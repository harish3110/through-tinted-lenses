{
  
    
        "post0": {
            "title": "Improving upon flowers-102 baseline model",
            "content": ". Introduction . In my previous blog post &quot;Building an image classifier using Fastai V2 &quot;, I introduced the Fastai V2 library by building a baseline flower classifier model on the flowers-102 dataset. . The baseline model achieved an accuracy of about 96.2% on the validation set which is definitley a good starting point. In this post i&#39;ll be using some of the techniques learnt in the Fastai to further improve the model by carefully training the model. . The main aim of this post is to improve on my current baseline by employing some of the strategies taught in the Fastai course in order to reach the SOTA for the flowers-102 dataset which is an accuracy of 99.7%. . . Let&#39;s first import the Fastai V2 library: . from fastai2.vision.all import * %matplotlib inline . . Re-loading the model . In the previous post, I saved the model created in order to re-load it again when needed. All that does is save the weights and bias matrices for each of the layers of the resnet-34 used. When we did a save of the model, behind the scenes Fastai saves the model in PyTorch models state_dict and stores it in a pickle file. . To reload the model we could simply do: learn.load(&#39;flowers-baseline&#39;) . But hold on, it isn&#39;t that simple. . To load all those weight matrices properly we need clearly define the architecture of the model as it was while creating the model. So we follow the same steps as we did last time to create the DataBlock then creating the dataloaders from it and specify the architecture we used by creating the Learner. . path = untar_data(URLs.FLOWERS) df = pd.read_csv(&#39;data/df.csv&#39;, index_col=0) . files = get_image_files(path/&#39;jpg&#39;) . def get_x(r): return path/r[&#39;name&#39;] def get_y(r): return r[&#39;class&#39;] dblock = DataBlock(blocks=(ImageBlock, CategoryBlock), splitter=RandomSplitter(seed=42), get_x= get_x, get_y= get_y, item_tfms = Resize(224)) dls = dblock.dataloaders(df) . learn = cnn_learner(dls, resnet34, metrics=accuracy) . learn.load(&#39;flowers-baseline&#39;) . &lt;fastai2.learner.Learner at 0x7f2ec9c62250&gt; . To view the weight and bias matrices of our model we can check its state_dict as follows . learn.model.state_dict() . OrderedDict([(&#39;0.0.weight&#39;, tensor([[[[ 5.2934e-03, -7.0347e-03, 7.7649e-03, ..., 4.8951e-02, 3.0531e-02, 2.5275e-02], [ 4.0975e-02, 3.1180e-02, 3.2154e-02, ..., 3.3027e-02, 2.9627e-02, 4.1612e-02], [ 4.8452e-03, -3.1817e-02, -6.1420e-02, ..., -9.7617e-02, -1.1614e-01, -1.2205e-01], ..., [-1.2382e-02, -2.4938e-02, -9.4016e-03, ..., 1.7000e-02, 2.3216e-03, 1.6565e-02], [ 3.8064e-03, 4.3531e-03, 3.6214e-02, ..., 1.0360e-01, 7.3841e-02, 5.8936e-02], [ 1.6682e-02, 8.7940e-03, 3.1216e-02, ..., 9.6852e-02, 8.3621e-02, 9.6833e-02]], [[-7.6685e-03, -8.7185e-03, 1.4210e-02, ..., 3.3966e-02, 2.5534e-02, 2.4342e-02], [ 5.4040e-02, 4.4763e-02, 3.4436e-02, ..., 1.3495e-02, 1.9215e-02, 3.8089e-02], [ 1.1155e-03, -5.4405e-02, -1.0212e-01, ..., -1.9219e-01, -1.9983e-01, -1.8181e-01], ..., [-1.6760e-02, -2.8263e-02, -4.2920e-03, ..., -6.7129e-03, -3.6163e-02, -1.1308e-02], [ 2.0135e-02, 3.0107e-02, 8.3050e-02, ..., 1.6193e-01, 1.1772e-01, 8.4021e-02], [ 4.1977e-02, 4.6163e-02, 8.0696e-02, ..., 1.7527e-01, 1.4353e-01, 1.3452e-01]], [[-7.8964e-03, -1.8102e-02, -2.0397e-02, ..., -1.3658e-02, -2.2841e-03, 7.0956e-03], [ 5.8680e-02, 3.8751e-02, 3.1612e-02, ..., 2.3743e-02, 3.5154e-02, 5.6260e-02], [ 2.5431e-02, -1.2722e-02, -3.2666e-02, ..., -8.2401e-02, -8.6437e-02, -8.8721e-02], ..., [ 9.5420e-03, 3.3931e-04, 1.6067e-02, ..., 1.2005e-02, -9.2098e-03, 1.2962e-02], [ 1.5021e-02, 1.7027e-02, 5.0216e-02, ..., 9.9442e-02, 6.4321e-02, 3.7624e-02], [ 2.2415e-02, 1.1657e-02, 3.8891e-02, ..., 1.0642e-01, 8.1992e-02, 6.7080e-02]]], [[[ 5.1663e-03, -1.8635e-02, 4.8489e-02, ..., -1.1683e-01, -7.8234e-03, 4.3092e-02], [ 9.7835e-03, -7.5611e-02, 8.5474e-02, ..., -2.5079e-01, 3.3086e-02, 7.9964e-02], [ 1.0787e-02, -1.0427e-01, 9.7993e-02, ..., -4.6029e-01, 1.0588e-01, 8.8864e-02], ..., [-1.3824e-02, -4.6198e-02, 4.9601e-02, ..., -4.9657e-01, 1.9874e-01, 7.2854e-04], [-1.6534e-02, -3.3123e-02, 1.1547e-02, ..., -2.7305e-01, 1.0551e-01, -3.0640e-03], [ 2.9077e-02, -2.3746e-02, 2.7412e-02, ..., -1.4085e-01, 8.0069e-03, 7.3075e-03]], [[ 1.7199e-02, -1.9266e-02, 7.1041e-02, ..., -1.1994e-01, -5.4977e-02, 4.1350e-02], [-9.9642e-04, -8.9805e-02, 1.4256e-01, ..., -3.2902e-01, -3.1113e-02, 1.2776e-01], [ 9.2670e-04, -1.1436e-01, 1.9630e-01, ..., -6.4512e-01, 5.0369e-02, 1.7496e-01], ..., [-1.6532e-02, -5.0089e-02, 1.0788e-01, ..., -6.5479e-01, 1.9256e-01, 8.3345e-02], [ 6.2161e-03, -2.0561e-02, 3.9141e-02, ..., -3.4153e-01, 1.1777e-01, 4.7866e-02], [ 1.4100e-02, -3.0685e-02, 1.8821e-02, ..., -1.4554e-01, 1.6616e-03, 2.6136e-02]], [[ 3.4734e-03, -1.7951e-02, 2.4830e-02, ..., -4.3384e-02, -5.2212e-03, -9.3487e-03], [ 5.5816e-05, -5.5287e-02, 2.5742e-02, ..., -1.2656e-01, 3.9149e-02, -6.1471e-03], [ 1.4349e-02, -5.6896e-02, 9.3847e-03, ..., -2.8156e-01, 1.1691e-01, -7.1561e-03], ..., [-2.0061e-03, -1.0488e-02, -4.1520e-02, ..., -3.3739e-01, 2.0678e-01, -4.8704e-02], [ 4.6790e-03, 1.2242e-04, -4.1346e-02, ..., -1.8823e-01, 1.1658e-01, -3.1934e-02], [ 8.7005e-03, -7.5090e-03, -6.7327e-03, ..., -8.1241e-02, 3.2335e-02, -3.4054e-03]]], [[[-5.7859e-03, -1.8886e-02, -4.3304e-02, ..., 2.1104e-02, 1.3569e-01, -5.7984e-02], [ 1.7579e-03, 3.4066e-02, 1.0271e-01, ..., -3.1734e-01, -1.4131e-01, 1.9199e-01], [-2.6427e-05, -2.8539e-02, -1.4659e-01, ..., 4.9161e-01, -2.6765e-01, -1.8512e-01], ..., [ 1.2202e-02, -5.6593e-02, 1.8392e-01, ..., -5.2297e-01, -1.7199e-01, 1.5961e-01], [ 2.8306e-03, 1.3157e-02, -1.3883e-01, ..., 2.3532e-01, -1.3267e-01, -1.0498e-01], [-1.1430e-02, -3.6334e-03, 2.5060e-02, ..., 1.6318e-03, 8.0514e-02, -1.9665e-03]], [[ 3.1445e-02, 2.3462e-02, -8.9497e-03, ..., -1.5025e-02, 1.1748e-01, -5.4081e-02], [-7.0711e-03, 4.0879e-02, 1.5642e-01, ..., -3.3901e-01, -2.3150e-01, 1.3628e-01], [-4.1085e-02, -6.8997e-02, -1.8221e-01, ..., 7.2998e-01, -2.1832e-01, -2.5412e-01], ..., [ 4.7447e-02, -3.9512e-02, 1.9420e-01, ..., -6.8340e-01, -2.0558e-01, 2.2744e-01], [ 2.4879e-02, 4.0767e-02, -1.2085e-01, ..., 2.1711e-01, -1.8654e-01, -9.7497e-02], [-4.4745e-03, 2.9983e-02, 5.8641e-02, ..., 2.7325e-03, 6.6819e-02, -1.2372e-02]], [[ 2.0118e-02, -5.9458e-03, -3.6450e-02, ..., 2.7179e-03, 9.7975e-02, -6.6032e-02], [ 1.7459e-02, 3.7596e-02, 1.0416e-01, ..., -2.9990e-01, -1.0611e-01, 1.8776e-01], [-5.8343e-03, -1.0463e-02, -1.1517e-01, ..., 4.0182e-01, -2.8627e-01, -1.6420e-01], ..., [ 1.1002e-02, -8.4244e-02, 1.2391e-01, ..., -3.6770e-01, -1.1192e-01, 1.5848e-01], [ 1.1382e-02, 1.4148e-02, -1.6195e-01, ..., 2.2065e-01, -8.4422e-02, -1.3626e-02], [-6.7287e-03, 9.3249e-03, 3.7485e-02, ..., -5.3539e-02, 3.9848e-02, -1.6644e-03]]], ..., [[[ 5.8642e-04, 2.2361e-02, -5.7131e-03, ..., 2.4851e-02, -1.4117e-03, -2.6911e-03], [-1.0746e-02, 3.4051e-02, -5.3995e-02, ..., 1.6757e-01, -6.2067e-03, -1.4510e-02], [-2.7579e-02, 1.0998e-01, 1.3252e-01, ..., -5.6120e-02, 2.2561e-01, -2.4214e-02], ..., [ 7.6893e-02, -2.3365e-01, -1.6649e-02, ..., -1.8318e-01, -2.6734e-01, 8.6402e-02], [ 2.6149e-02, 4.2616e-02, -2.6177e-01, ..., 2.3198e-01, -1.1561e-01, -5.4013e-02], [-2.3660e-02, 5.2380e-02, 1.8642e-03, ..., 6.9783e-02, 4.1841e-02, -2.1467e-02]], [[ 1.7092e-02, 1.4910e-02, -1.5954e-02, ..., 5.2193e-03, 2.7855e-02, 1.5691e-02], [-1.3185e-02, 3.6905e-02, -7.2042e-02, ..., 1.2938e-01, 3.4969e-02, 2.5765e-02], [-2.1009e-02, 1.4838e-01, 1.8752e-01, ..., -2.0107e-01, 2.3202e-01, -6.2657e-03], ..., [ 3.5385e-02, -3.3794e-01, 7.0787e-02, ..., -1.9551e-01, -3.7550e-01, 4.8918e-02], [ 2.2009e-02, -4.1142e-02, -3.4104e-01, ..., 3.1246e-01, -1.2822e-01, -7.7748e-02], [-2.7319e-03, 1.4651e-02, -9.2607e-02, ..., 9.3680e-02, 6.9303e-02, -1.0829e-03]], [[ 1.7710e-02, 2.1057e-02, 1.4493e-02, ..., -3.0822e-02, -7.3485e-03, 2.0361e-02], [-2.5820e-03, 1.6406e-02, -2.2064e-02, ..., 1.1663e-01, -3.0574e-02, 4.1635e-03], [-4.1493e-02, 6.1558e-02, 1.0706e-01, ..., -1.5167e-02, 1.4372e-01, -7.9904e-02], ..., [ 6.3153e-02, -2.2283e-01, -8.6914e-02, ..., -1.0024e-01, -1.7263e-01, 6.4511e-02], [ 1.5622e-02, 5.3203e-02, -2.6123e-01, ..., 1.9596e-01, -6.2363e-02, -4.0011e-02], [-5.7492e-03, 2.1197e-02, -4.5815e-02, ..., 3.4676e-02, 6.7841e-02, -2.1623e-02]]], [[[-5.7878e-02, -5.5778e-02, -7.0398e-02, ..., -5.5931e-02, -5.3639e-02, -3.0925e-02], [-7.5665e-02, -1.7393e-02, -1.2508e-02, ..., 5.0410e-03, -7.4781e-03, -5.8543e-03], [-2.7741e-02, 6.2801e-02, 6.7824e-02, ..., 5.0921e-02, 4.7288e-02, 4.5660e-02], ..., [ 5.9614e-02, 1.1081e-01, 5.5095e-02, ..., 2.0066e-02, 2.3038e-02, 8.4965e-02], [ 8.1853e-03, 1.5273e-02, -4.1320e-02, ..., -6.5849e-02, -4.0126e-02, 1.6302e-02], [ 3.2373e-03, -5.2678e-04, -5.5861e-02, ..., -5.9551e-02, -2.3552e-02, 1.4619e-02]], [[-5.8591e-02, -5.4009e-02, -6.3243e-02, ..., -3.7129e-02, -3.2883e-02, -2.1659e-02], [-5.9107e-02, -2.0356e-02, 6.8862e-04, ..., 5.0572e-02, 2.3836e-02, 9.5534e-03], [ 3.6474e-03, 6.8922e-02, 9.0261e-02, ..., 9.6888e-02, 7.7066e-02, 6.3041e-02], ..., [ 6.6161e-02, 1.1358e-01, 8.0021e-02, ..., 5.3380e-02, 4.3307e-02, 1.0224e-01], [ 2.4798e-02, 3.6345e-02, -1.0309e-02, ..., -4.0131e-02, -3.2110e-02, 2.6843e-02], [-5.9268e-03, -7.5326e-03, -5.3349e-02, ..., -5.1193e-02, -2.4631e-02, 1.5471e-02]], [[-2.0283e-02, -1.4149e-02, -3.7012e-02, ..., -1.3336e-02, -6.7242e-03, 1.8094e-02], [-5.3718e-02, -1.4932e-02, -2.5925e-02, ..., 4.2946e-03, -1.6230e-02, -1.5897e-02], [-2.6764e-02, 2.8841e-02, 1.1574e-02, ..., 1.7875e-02, 5.1461e-03, 2.5190e-03], ..., [ 1.5138e-02, 5.6858e-02, 9.4796e-03, ..., 1.0849e-02, 1.1084e-03, 5.8490e-02], [ 3.8887e-03, 2.8459e-02, -1.7188e-02, ..., -2.7974e-02, -2.2675e-02, 3.0102e-02], [ 2.2017e-03, 2.0619e-03, -2.1820e-02, ..., -5.1970e-03, 9.7906e-03, 4.4148e-02]]], [[[ 3.8198e-09, 5.2820e-09, 8.4706e-09, ..., 9.3894e-09, 1.0988e-08, 8.6678e-09], [ 1.0560e-08, 1.0032e-08, 1.2596e-08, ..., 9.4017e-09, 1.0029e-08, 1.3072e-08], [ 1.0009e-08, 6.9545e-09, 7.0830e-09, ..., 1.1454e-08, 8.3311e-09, 1.4116e-08], ..., [ 8.9855e-09, 6.0238e-09, 6.9333e-09, ..., 9.9645e-09, 8.1296e-09, 1.3150e-08], [ 9.3203e-09, 8.4863e-09, 1.0279e-08, ..., 1.0536e-08, 1.3432e-08, 1.2343e-08], [ 1.2704e-08, 1.2244e-08, 1.0365e-08, ..., 1.3496e-08, 1.1680e-08, 1.4884e-08]], [[-1.4683e-09, -6.0629e-10, 2.0654e-09, ..., 3.2166e-09, 5.7000e-09, 4.5556e-09], [ 5.5309e-09, 5.3149e-09, 7.1033e-09, ..., 3.6033e-09, 7.9867e-09, 8.5331e-09], [ 6.1578e-09, 3.8951e-09, 1.4952e-09, ..., 2.3825e-09, 5.0902e-09, 6.6120e-09], ..., [ 4.4387e-09, 4.0305e-09, 4.0408e-09, ..., 5.2285e-09, 1.4921e-09, 2.7368e-09], [ 7.9367e-09, 4.0944e-09, 2.5078e-09, ..., 6.5216e-09, 4.4082e-09, 5.1523e-09], [ 7.3699e-09, 4.7663e-09, 4.5816e-09, ..., 3.6753e-09, 5.5693e-09, 5.8747e-09]], [[-8.0700e-09, -7.5840e-09, -5.0518e-09, ..., -7.1474e-09, -6.9766e-09, -2.3014e-09], [ 8.2217e-10, 8.6027e-10, -7.5593e-10, ..., -2.4139e-09, 2.3130e-09, 4.2509e-09], [ 2.6393e-10, -1.6170e-09, -1.8818e-10, ..., -1.5928e-09, 2.5107e-10, 1.5924e-09], ..., [ 6.8490e-09, -1.8575e-09, -1.7963e-09, ..., -5.0750e-10, 9.6110e-10, 3.7406e-09], [ 8.7350e-10, 2.8883e-10, -7.9154e-10, ..., -3.7687e-10, -2.9927e-09, -5.4952e-10], [ 4.8446e-09, 1.9827e-09, 2.2089e-09, ..., 2.5378e-09, 2.0013e-09, 1.1245e-09]]]], device=&#39;cuda:0&#39;)), (&#39;0.1.weight&#39;, tensor([3.0283e-01, 2.7014e-01, 2.6043e-01, 3.0929e-01, 2.3837e-01, 3.2880e-01, 2.7430e-01, 3.8166e-01, 3.9271e-01, 4.1321e-01, 2.7077e-01, 3.1149e-01, 4.1753e-01, 2.5486e-01, 2.4564e-01, 1.1412e-06, 1.5042e-06, 2.6465e-01, 3.1071e-01, 4.1333e-01, 3.1065e-01, 2.8507e-01, 2.6113e-01, 5.7029e-01, 3.2861e-01, 1.4523e-01, 2.9323e-01, 3.3751e-01, 3.2862e-01, 2.7244e-01, 3.4187e-01, 3.7674e-04, 2.6235e-01, 3.3580e-01, 5.9192e-02, 3.4426e-06, 3.8517e-01, 2.8858e-01, 3.2239e-01, 3.1177e-01, 2.6273e-01, 6.6502e-08, 3.1545e-01, 2.1892e-01, 3.1787e-01, 4.4157e-01, 1.3414e-06, 2.8622e-05, 5.3130e-01, 2.9142e-06, 5.8474e-01, 2.0860e-01, 3.0625e-01, 3.0714e-01, 2.7348e-01, 3.3472e-01, 3.1845e-01, 8.0925e-05, 3.0865e-01, 1.9856e-01, 1.6382e-01, 2.6503e-01, 3.5221e-01, 3.9389e-08], device=&#39;cuda:0&#39;)), (&#39;0.1.bias&#39;, tensor([ 4.7984e-01, 2.0821e-01, 3.3158e-01, 3.7918e-01, 9.4127e-02, 2.3656e-01, 1.2841e-01, 8.6941e-01, 7.0170e-01, -1.6199e-01, 2.8283e-01, 3.2282e-01, -9.9835e-02, 2.0360e-01, 2.8376e-01, -4.9471e-06, -4.8600e-06, 2.2445e-01, 1.5097e-01, -3.6143e-01, 4.0368e-01, 2.6259e-01, 2.1868e-01, -4.2739e-01, 2.7931e-01, 1.7734e-01, 5.4458e-01, 6.3388e-01, 4.0853e-01, 2.5196e-01, 5.4674e-01, -1.5677e-03, 2.1894e-01, 4.0952e-01, 2.5556e-02, -1.1473e-05, 4.7469e-01, 2.7969e-01, 5.4147e-01, 2.2490e-01, 2.8531e-01, -2.1946e-07, 2.3922e-01, 4.3588e-02, 1.4017e-01, -4.4490e-01, -4.6348e-06, -8.8477e-05, -6.3542e-01, -9.9434e-06, -3.6943e-01, 2.6253e-01, 3.8268e-01, 4.8185e-01, 3.0732e-01, 4.8253e-01, 2.5613e-01, -2.3575e-04, 4.7338e-01, 3.0076e-01, -1.3493e-01, 2.3901e-01, 7.0009e-01, -1.3984e-07], device=&#39;cuda:0&#39;)), (&#39;0.1.running_mean&#39;, tensor([ 2.3691e-01, 2.0827e-02, -1.8896e-02, -3.3248e-01, 4.8198e-01, -1.6890e-01, 6.2946e-02, 8.1380e-01, -3.2593e-01, 9.0260e-02, 5.0142e-02, -4.0103e-01, 1.2729e+00, 2.6088e-02, -3.5533e-02, 1.2715e-05, -5.8752e-06, 6.7078e-02, -7.8059e-02, -3.5294e-01, -2.6727e-01, -6.8678e-02, -9.4906e-02, 9.2890e-01, -1.4141e+00, 8.4550e-02, 1.6675e-01, 4.5184e-01, -2.2402e-01, 3.0952e-02, -5.7195e-01, 1.4494e-04, -4.1468e-02, 2.0088e-01, 1.8644e-02, -1.5403e-05, 1.0828e+00, -1.9908e-01, -3.5882e-01, -2.6984e-02, 1.8591e-02, -3.2000e-07, 1.4492e-02, -2.1907e-01, -1.9669e-02, -7.1182e-02, -1.0866e-06, 1.3186e-04, 2.3752e-01, -1.9308e-05, 3.5994e-01, -5.7581e-02, -1.9763e-01, 1.6489e-01, -8.1288e-02, 6.2392e-01, -4.8783e-02, 7.1918e-05, 2.2978e-01, 1.6403e-02, -1.4601e-01, 1.0145e-02, -4.7314e-01, -6.9896e-08], device=&#39;cuda:0&#39;)), (&#39;0.1.running_var&#39;, tensor([2.5613e+00, 5.0584e-01, 1.9035e-01, 6.0189e+00, 1.5443e+00, 4.9920e+00, 2.1330e+00, 1.8157e+01, 2.1564e+01, 4.6941e+00, 3.9516e-01, 9.2967e+00, 8.5565e+00, 7.3795e-01, 2.9009e-01, 7.3501e-10, 6.3729e-10, 1.2060e+00, 1.3932e+00, 1.7401e+00, 2.3913e+00, 8.9258e-01, 1.3963e+00, 6.2249e+00, 1.5661e+01, 4.2177e-01, 9.0380e-01, 4.3790e+00, 2.1940e+00, 3.1811e-01, 1.0859e+01, 9.1546e-05, 1.0741e+00, 4.0083e+00, 1.2383e+00, 3.5432e-09, 2.4385e+01, 5.8889e+00, 1.4992e+01, 4.1450e-01, 3.8649e-01, 2.0015e-12, 6.8261e-01, 8.3445e-01, 1.3029e+00, 4.9160e+00, 7.5574e-10, 3.0861e-07, 4.6941e+00, 3.5475e-09, 4.7449e+00, 4.4311e-01, 2.2269e+00, 1.4503e+00, 4.6769e-01, 2.6066e+01, 9.1516e-01, 2.1254e-06, 1.9131e+00, 2.6762e-01, 3.8492e-01, 4.6413e-01, 3.8586e+00, 5.0344e-13], device=&#39;cuda:0&#39;)), (&#39;0.1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.4.0.conv1.weight&#39;, tensor([[[[-5.3532e-03, 1.4785e-02, -6.0779e-03], [-6.0472e-02, -2.4439e-02, -2.6618e-02], [-8.9005e-04, -1.5837e-02, 8.9062e-03]], [[-1.9166e-02, -9.7281e-03, -3.1025e-02], [-1.6156e-03, 1.8714e-02, -1.1201e-02], [ 1.4338e-02, -6.6759e-03, -2.0250e-02]], [[-2.5035e-02, 1.4994e-03, -2.3838e-02], [ 2.0399e-02, -2.4659e-03, -1.5909e-02], [ 1.0366e-02, 1.5781e-02, 4.7425e-04]], ..., [[-4.1091e-03, -2.0987e-03, 7.2952e-03], [-2.4023e-02, 5.7238e-02, -1.6372e-02], [ 4.1234e-02, -1.5547e-02, -2.0813e-02]], [[-2.0684e-03, 3.7073e-03, -2.2924e-02], [ 1.9769e-02, 1.5616e-02, 2.3313e-02], [-4.2355e-02, -3.9201e-02, -2.4391e-02]], [[ 7.3314e-10, 2.8610e-09, 7.1521e-09], [ 5.0182e-09, 1.0337e-08, 1.1351e-08], [ 7.8758e-09, 1.4317e-09, -2.0826e-09]]], [[[-3.3956e-02, -3.1888e-02, -3.8233e-02], [-7.1746e-02, -1.2163e-01, -9.2807e-02], [ 2.0736e-03, 5.4140e-02, -7.9573e-03]], [[-2.3269e-03, -1.6151e-02, 2.3675e-02], [ 4.7247e-03, -2.8980e-02, 8.8964e-03], [-5.3373e-03, 4.0233e-02, 2.5487e-02]], [[ 9.8332e-03, 5.7933e-04, 1.7468e-02], [ 2.4017e-02, -1.9074e-02, 2.6175e-02], [ 3.0721e-02, -8.6630e-03, -2.4989e-02]], ..., [[ 3.1272e-04, 4.3520e-02, -3.9849e-03], [ 3.0910e-02, -5.9192e-02, 6.6754e-02], [ 8.9309e-04, 5.7558e-03, -2.1384e-02]], [[ 5.6328e-02, 8.2605e-02, 7.6853e-02], [-2.0908e-02, 1.9101e-02, -9.6795e-03], [-3.1579e-02, -9.1142e-02, -8.8293e-02]], [[ 1.9127e-09, -5.1763e-09, -5.7546e-09], [-2.7477e-09, -4.4094e-09, -1.3663e-08], [-1.0954e-08, -1.5885e-08, -1.1000e-08]]], [[[-2.2107e-02, -2.1729e-02, -2.1531e-02], [ 5.5502e-02, 3.5768e-02, 4.0238e-02], [ 1.0501e-02, 5.6311e-03, -1.2325e-02]], [[ 2.8900e-02, 2.8525e-02, -7.6343e-03], [ 2.1057e-02, -2.1766e-01, 1.6783e-02], [ 3.0341e-03, -1.6954e-02, -9.1783e-03]], [[ 4.1839e-02, 4.1672e-02, -1.7399e-02], [-3.4366e-02, -2.1342e-02, 1.9512e-02], [-5.1632e-03, 1.3550e-02, -1.0797e-02]], ..., [[-1.7254e-02, 9.2796e-02, 1.4543e-02], [-1.6810e-02, -1.4584e-01, 7.0276e-03], [-3.3896e-02, 6.1889e-02, -6.5459e-03]], [[-1.4506e-02, -5.0582e-02, -1.2853e-02], [ 2.4529e-02, -6.3431e-02, 2.6410e-02], [ 3.4626e-03, -4.3010e-02, 7.9731e-03]], [[-2.2675e-09, -1.1453e-08, -4.4593e-09], [-4.7695e-09, -2.5765e-09, 2.1014e-09], [ 7.1413e-09, -4.0139e-09, -3.1576e-10]]], ..., [[[ 6.2462e-03, 5.1207e-02, 8.9084e-03], [ 3.9808e-02, 4.4273e-02, 4.6800e-02], [ 6.1059e-03, -8.8174e-04, -8.2152e-03]], [[-4.4491e-02, -9.5140e-02, 1.5251e-02], [-1.3173e-01, -3.1579e-01, -2.6420e-02], [-5.4368e-02, -1.0660e-01, 1.1025e-02]], [[ 1.1836e-02, 3.0914e-04, 3.5856e-02], [-2.1859e-02, -3.8133e-02, -4.4580e-03], [-6.5754e-03, 3.1179e-02, 3.9401e-02]], ..., [[-1.8390e-02, -7.1944e-05, 2.2740e-02], [-5.0030e-02, -1.6374e-01, -3.1973e-02], [ 4.7682e-02, 7.2531e-03, 7.0614e-02]], [[ 8.5785e-03, 2.6278e-02, -2.8607e-02], [ 3.3980e-03, 1.5922e-02, -2.5875e-02], [-4.1074e-03, 2.3373e-03, -4.5055e-02]], [[-2.9361e-09, 3.9262e-09, -7.3834e-09], [-1.8761e-09, -4.7638e-09, -5.3288e-09], [-2.7958e-09, -6.4468e-09, -5.8978e-09]]], [[[ 5.6723e-03, 9.7324e-03, 7.5059e-02], [-8.7238e-02, -2.1757e-02, 1.4349e-01], [-7.7780e-02, 1.3718e-02, 8.2466e-02]], [[ 9.6407e-03, -2.8117e-02, 3.3588e-02], [ 1.1520e-02, -1.2379e-01, 3.1274e-02], [ 2.6914e-02, -4.5012e-02, 6.1346e-02]], [[ 2.3301e-02, 2.4293e-03, 5.5463e-03], [ 1.7079e-02, -3.6982e-02, -6.6983e-03], [ 3.3130e-02, 2.3658e-02, -2.4222e-03]], ..., [[ 2.6457e-02, 4.1916e-02, 2.0677e-02], [ 1.3878e-02, -5.7596e-02, -2.6417e-02], [ 1.9523e-02, 4.7862e-02, 2.8881e-02]], [[ 1.2742e-01, -2.7521e-02, -9.2567e-02], [ 1.8783e-01, -1.5815e-02, -1.3076e-01], [ 1.5450e-01, -1.2917e-02, -9.0812e-02]], [[ 9.3760e-09, 1.4520e-09, -8.9436e-09], [ 1.2227e-08, 1.1994e-09, -1.1223e-08], [ 4.3605e-09, -6.2484e-09, -1.1025e-08]]], [[[ 1.2958e-02, -6.6220e-04, 6.4837e-02], [ 2.1036e-02, -2.6233e-02, -4.2888e-02], [-1.5912e-02, -3.3234e-02, 3.0765e-02]], [[ 1.9764e-02, -4.6465e-02, 1.2116e-02], [-2.6319e-02, 7.3503e-02, 2.1896e-03], [-5.9837e-03, -6.0896e-03, -9.5085e-03]], [[-7.8529e-03, -3.2647e-02, 3.3079e-02], [ 3.5497e-02, 1.7764e-02, -9.7301e-03], [-1.3607e-02, 2.4272e-02, 1.8442e-03]], ..., [[ 2.9149e-02, -6.5615e-02, 4.2846e-02], [-9.5554e-03, 4.8053e-02, -3.5984e-03], [-1.1263e-03, -4.0589e-02, -4.6959e-03]], [[ 3.9992e-02, -6.2953e-03, 4.8013e-02], [-6.7938e-02, -7.7253e-02, 1.9908e-02], [-3.7865e-03, -1.2132e-02, 5.5565e-02]], [[-4.0727e-10, -3.4331e-09, -1.5047e-09], [-2.3498e-09, -3.6364e-09, 1.2890e-09], [ 2.1743e-09, 2.3404e-09, 6.7830e-09]]]], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn1.weight&#39;, tensor([0.2403, 0.1844, 0.2155, 0.1655, 0.1820, 0.3132, 0.2595, 0.3542, 0.2324, 0.1504, 0.3324, 0.3780, 0.2513, 0.1876, 0.3138, 0.3322, 0.2968, 0.4628, 0.3804, 0.3163, 0.2382, 0.2898, 0.3813, 0.4205, 0.2014, 0.1906, 0.4070, 0.3773, 0.3244, 0.1691, 0.2617, 0.1886, 0.2016, 0.2525, 0.1696, 0.2995, 0.2578, 0.2105, 0.2253, 0.2128, 0.4273, 0.3755, 0.2468, 0.2327, 0.1872, 0.4766, 0.4398, 0.3281, 0.3013, 0.2499, 0.2006, 0.3100, 0.1768, 0.2681, 0.4549, 0.1870, 0.2637, 0.3025, 0.2006, 0.3962, 0.1702, 0.4332, 0.3780, 0.1675], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn1.bias&#39;, tensor([ 0.0252, 0.0881, 0.0814, 0.1428, 0.0666, 0.1384, -0.2354, -0.1122, -0.1201, 0.1940, 0.0785, -0.2885, -0.1574, 0.0697, 0.0507, -0.1886, -0.5022, -0.2315, -0.1289, -0.0063, 0.0074, -0.1224, -0.1352, -0.3625, 0.0985, 0.0015, -0.3856, -0.0917, -0.0602, 0.2209, -0.2781, 0.1522, 0.0710, 0.0701, 0.1690, 0.0164, -0.2534, 0.1227, 0.0809, 0.1129, -0.1496, -0.1151, 0.0286, 0.0522, 0.1639, -0.1533, -0.1674, 0.0533, 0.0769, 0.0495, 0.1366, -0.4201, 0.1898, 0.0438, -0.1431, 0.2295, -0.0943, -0.0195, 0.0880, -0.1423, 0.2998, -0.1852, -0.0122, 0.1353], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn1.running_mean&#39;, tensor([-1.2054, -0.1221, -0.4782, -0.6048, -0.7772, -1.3512, -0.0346, -1.5186, 1.2754, -0.7736, -0.1541, -0.0402, 1.1684, -1.0312, -2.0996, -0.9024, 0.1167, -1.9720, -1.4425, -0.9404, -1.3486, -0.7419, -1.1142, -1.4715, 0.2541, -0.4811, 0.2685, -1.4071, -1.8149, 0.2510, -0.6013, -0.2778, -0.3765, -1.2485, 0.7997, -0.6894, 0.1806, -0.1592, -1.0459, -0.8450, -1.6532, -1.4214, -1.1818, -0.7792, -0.0172, -2.2466, -1.2774, -1.6970, -1.0670, -1.0386, -1.1829, 0.2808, -0.4244, -0.4919, -2.1341, -0.9272, -1.3609, -0.8496, -0.8952, -0.9972, -0.1981, -1.9708, -1.9218, -0.0183], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn1.running_var&#39;, tensor([0.1847, 0.1985, 0.2104, 0.2140, 0.1723, 0.6828, 0.2812, 0.6687, 0.1566, 0.2230, 0.4000, 0.4812, 0.1552, 0.2256, 1.0707, 0.2662, 0.2074, 0.7937, 0.8747, 0.4988, 0.2475, 0.2474, 0.6413, 0.4891, 0.1388, 0.1426, 0.7294, 0.8058, 0.9299, 0.0948, 0.1355, 0.1856, 0.2185, 0.3014, 0.1073, 0.4452, 0.5498, 0.1613, 0.3904, 0.2083, 1.0367, 0.7974, 0.4393, 0.5313, 0.2198, 1.4507, 0.9574, 0.6027, 0.4662, 0.1740, 0.4630, 0.2608, 0.2474, 0.4182, 1.2382, 0.3054, 0.2047, 0.1999, 0.3487, 0.6554, 0.1432, 0.8233, 1.2959, 0.1155], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.4.0.conv2.weight&#39;, tensor([[[[ 0.0656, -0.0101, 0.0405], [ 0.0335, -0.0550, 0.0168], [ 0.0291, 0.0646, 0.0697]], [[-0.0176, 0.0514, -0.0389], [-0.0042, -0.0645, -0.0078], [ 0.0342, -0.1004, 0.0353]], [[-0.0084, -0.0356, -0.0473], [-0.0123, 0.0252, 0.0043], [ 0.0167, 0.0285, 0.0077]], ..., [[ 0.0018, -0.0457, -0.0271], [ 0.0113, -0.0144, 0.0235], [ 0.0139, 0.0108, 0.0375]], [[ 0.0161, 0.0155, 0.0018], [ 0.0060, -0.0281, -0.0124], [ 0.0307, -0.0054, -0.0087]], [[-0.0008, -0.0076, -0.0101], [-0.0361, 0.0163, 0.0216], [ 0.0355, 0.0240, 0.0124]]], [[[ 0.0083, 0.0239, -0.0043], [ 0.0109, 0.0444, 0.0029], [-0.0117, 0.0094, -0.0008]], [[ 0.0104, 0.0065, -0.0006], [ 0.0103, -0.0029, 0.0039], [ 0.0076, 0.0019, -0.0022]], [[ 0.0091, 0.0169, 0.0006], [-0.0057, -0.0657, -0.0218], [ 0.0120, 0.0203, 0.0213]], ..., [[-0.0052, -0.0275, -0.0073], [-0.0435, -0.0955, -0.0530], [-0.0133, -0.0425, -0.0197]], [[ 0.0229, -0.0099, 0.0230], [ 0.0254, -0.0263, 0.0073], [ 0.0433, 0.0071, 0.0296]], [[-0.0270, -0.0123, -0.0261], [-0.0175, 0.0187, -0.0133], [-0.0043, -0.0028, -0.0272]]], [[[-0.0434, -0.0028, -0.0037], [-0.0033, 0.0217, 0.0203], [-0.0357, -0.0107, -0.0007]], [[ 0.0027, -0.0414, 0.0202], [ 0.0125, -0.0215, -0.0225], [-0.0023, 0.0204, 0.0117]], [[ 0.0445, 0.0035, -0.0133], [ 0.0305, -0.0082, 0.0103], [-0.0007, 0.0382, -0.0137]], ..., [[ 0.0193, 0.0337, -0.0066], [-0.0221, -0.0373, -0.0117], [ 0.0152, -0.0390, -0.0095]], [[-0.0063, 0.0227, 0.0130], [-0.0325, 0.0062, 0.0291], [-0.0180, 0.0259, -0.0021]], [[-0.0421, -0.0391, -0.0256], [-0.0384, 0.0107, -0.0187], [ 0.0203, -0.0238, -0.0376]]], ..., [[[-0.0185, -0.0319, -0.0395], [-0.0062, 0.0128, -0.0122], [-0.0282, -0.0213, -0.0213]], [[-0.0245, -0.0268, -0.0041], [-0.0021, -0.0342, 0.0055], [-0.0017, -0.0102, -0.0023]], [[ 0.0115, -0.0081, 0.0008], [ 0.0091, -0.0220, 0.0110], [ 0.0144, 0.0217, 0.0031]], ..., [[ 0.0205, 0.0107, 0.0167], [-0.0060, -0.0265, -0.0085], [ 0.0096, 0.0003, 0.0093]], [[ 0.0177, 0.0022, 0.0088], [-0.0031, -0.0117, -0.0076], [ 0.0127, 0.0117, 0.0059]], [[-0.0179, -0.0110, -0.0093], [-0.0013, 0.0117, -0.0011], [ 0.0042, -0.0113, -0.0076]]], [[[-0.0176, 0.0282, -0.0142], [-0.0156, 0.0620, 0.0125], [-0.0042, -0.0583, -0.0586]], [[-0.0426, -0.0723, 0.0041], [ 0.0442, 0.0488, -0.0056], [-0.0426, -0.0467, -0.0335]], [[-0.0225, -0.0398, 0.0167], [-0.0725, 0.1753, -0.1189], [-0.0405, -0.0544, -0.0124]], ..., [[-0.0547, -0.0184, 0.0125], [-0.0079, 0.1216, -0.0215], [-0.0210, 0.0318, -0.0265]], [[ 0.0030, 0.0329, -0.0054], [ 0.0053, 0.0810, -0.0442], [-0.0339, -0.0435, -0.0181]], [[-0.0538, 0.1156, -0.0007], [ 0.0411, -0.1544, 0.0268], [-0.0810, 0.1007, -0.0414]]], [[[ 0.0398, 0.0477, 0.0407], [ 0.0432, 0.0404, 0.0185], [ 0.0163, 0.0083, -0.0192]], [[ 0.0055, -0.0174, -0.0067], [ 0.0145, 0.0151, 0.0029], [-0.0149, -0.0219, -0.0124]], [[ 0.0111, -0.0071, -0.0168], [-0.0142, -0.0228, -0.0492], [-0.0101, -0.0272, -0.0338]], ..., [[-0.0039, -0.0080, -0.0333], [-0.0035, 0.0124, -0.0224], [-0.0139, 0.0009, -0.0126]], [[-0.0058, -0.0035, 0.0012], [ 0.0073, 0.0245, 0.0051], [-0.0064, 0.0120, 0.0127]], [[-0.0076, -0.0092, -0.0022], [ 0.0048, -0.0038, -0.0034], [-0.0311, -0.0252, 0.0029]]]], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn2.weight&#39;, tensor([0.3407, 0.1867, 0.2527, 0.3054, 0.2594, 0.1591, 0.3482, 0.0410, 0.1143, 0.1622, 0.0572, 0.3594, 0.1470, 0.2086, 0.2127, 0.2504, 0.3175, 0.1658, 0.3509, 0.2448, 0.3015, 0.2870, 0.1808, 0.1455, 0.0712, 0.3968, 0.4448, 0.4137, 0.3348, 0.2013, 0.2394, 0.2514, 0.1496, 0.2737, 0.3339, 0.3824, 0.1408, 0.3622, 0.2281, 0.1150, 0.2472, 0.4252, 0.1743, 0.2670, 0.2854, 0.2139, 0.3244, 0.3315, 0.2499, 0.2297, 0.1367, 0.1852, 0.4185, 0.3654, 0.1432, 0.1094, 0.2234, 0.3379, 0.3496, 0.2002, 0.2682, 0.1049, 0.4703, 0.2333], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn2.bias&#39;, tensor([-2.5244e-01, 1.9740e-01, 2.2930e-01, -1.1474e-01, 6.9967e-02, 7.8003e-03, -1.1334e-01, 3.6167e-02, -1.3729e-01, 1.5844e-01, -6.8561e-03, -2.2543e-02, 1.3444e-01, 2.2986e-01, 2.3405e-01, 1.5984e-01, -1.0026e-01, -2.4249e-02, 1.9836e-01, -2.9930e-01, 3.2362e-04, 2.0135e-01, 4.3582e-02, -3.7183e-01, 8.1241e-02, -1.9322e-01, 1.3164e-01, -3.7397e-02, 1.4124e-02, 1.2837e-01, -2.2884e-01, 3.6482e-01, -8.2969e-02, -2.8880e-01, 1.1354e-01, -1.1478e-02, -2.0655e-02, 2.6093e-02, 7.4633e-03, -5.9384e-02, 1.9700e-01, -1.3979e-01, 1.1536e-01, 5.2358e-02, 2.5777e-01, -1.8679e-01, 5.8505e-03, 2.1431e-02, -4.8129e-01, 3.1407e-01, -8.8697e-02, 1.0366e-01, 1.9019e-01, 1.0846e-01, 1.1945e-02, 8.7571e-02, 1.9695e-01, -3.3294e-02, 6.5814e-02, 1.2166e-01, 2.3598e-01, 6.0281e-03, 3.9834e-01, 3.7614e-01], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn2.running_mean&#39;, tensor([ 0.0822, 0.1486, -0.1962, -0.0324, -0.3871, -0.1269, 0.0958, -0.0160, 0.0023, -0.2177, 0.0826, 0.0768, 0.1327, -0.1013, 0.0823, -0.3969, 0.0271, 0.1367, 0.1269, -0.0421, 0.0271, 0.1487, -0.1036, -0.0103, -0.1269, 0.0510, 0.0491, -0.1135, -0.0496, 0.1209, -0.0859, 0.2246, 0.0988, 0.2084, 0.5074, 0.3547, -0.0792, -0.0481, -0.2575, 0.1268, 0.1337, 0.1498, 0.2475, -0.1705, 0.1214, 0.0863, 0.1938, 0.1176, 0.0156, -0.0831, -0.2424, -0.1588, -0.1824, 0.1296, -0.1225, 0.0688, 0.1802, 0.1162, -0.0551, -0.1147, -0.0247, 0.0623, -0.2743, 0.2405], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn2.running_var&#39;, tensor([0.0543, 0.0724, 0.0266, 0.1253, 0.0319, 0.0363, 0.0576, 0.0113, 0.0446, 0.0245, 0.0121, 0.2173, 0.0430, 0.0202, 0.0617, 0.0223, 0.0287, 0.0202, 0.0273, 0.0121, 0.1420, 0.0231, 0.0322, 0.0069, 0.0431, 0.0600, 0.2794, 0.2120, 0.1399, 0.1109, 0.1640, 0.0746, 0.0159, 0.0417, 0.0927, 0.0469, 0.0928, 0.1425, 0.0615, 0.0269, 0.0609, 0.0324, 0.0634, 0.0420, 0.0293, 0.0091, 0.0356, 0.0373, 0.0145, 0.0611, 0.0247, 0.0445, 0.0432, 0.1983, 0.0368, 0.0704, 0.0174, 0.0330, 0.1555, 0.0522, 0.0189, 0.0245, 0.0499, 0.1069], device=&#39;cuda:0&#39;)), (&#39;0.4.0.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.4.1.conv1.weight&#39;, tensor([[[[-8.1457e-03, -4.0436e-02, -5.4289e-02], [-1.8849e-02, 1.0762e-02, -3.2598e-02], [ 1.5740e-02, -1.9804e-02, -2.5035e-02]], [[ 6.5777e-03, 3.7741e-02, 3.4629e-03], [ 1.6512e-02, -1.3747e-02, -3.4443e-02], [ 4.1029e-03, -1.5687e-02, 1.0705e-02]], [[ 5.8621e-03, 4.2896e-02, -1.5684e-03], [-1.5047e-02, -1.0225e-02, -3.3179e-02], [ 3.5658e-02, -1.7388e-02, 4.4558e-02]], ..., [[-1.8457e-02, 3.3913e-02, -1.4049e-02], [-9.3434e-03, -3.7311e-02, -5.5579e-04], [ 3.4861e-02, -2.0245e-02, 8.4965e-02]], [[ 1.5725e-02, 8.4583e-02, 2.3413e-03], [-3.9692e-02, -5.3692e-02, 5.9311e-03], [ 5.0255e-02, 1.0254e-01, 5.8598e-02]], [[ 5.0865e-02, 4.5273e-02, 3.1127e-02], [ 3.1921e-02, 8.3417e-03, 1.4235e-02], [ 1.9482e-02, 1.1236e-03, -6.0260e-03]]], [[[ 5.0453e-06, -1.3764e-03, 3.6630e-02], [ 1.5760e-02, 4.5172e-02, -2.7948e-02], [-4.4482e-02, -1.1464e-02, -4.9266e-03]], [[ 2.4388e-02, -5.2186e-02, -2.3018e-02], [ 6.6230e-03, -1.0766e-01, -6.0262e-02], [ 2.1134e-02, -3.1337e-02, 5.7183e-03]], [[ 6.0164e-03, -3.6610e-03, 2.1845e-02], [-5.0120e-02, -6.3904e-02, -3.1649e-03], [ 1.2949e-02, -8.0064e-03, -5.5592e-04]], ..., [[-6.4813e-04, -6.4144e-02, 1.1455e-02], [ 3.8631e-03, -9.2582e-02, -5.4779e-02], [ 8.0029e-03, 1.6286e-02, -3.6392e-02]], [[-5.1105e-02, -2.8365e-02, 3.8034e-02], [-4.5763e-02, 1.1542e-01, 5.5693e-02], [ 2.7893e-02, -3.5896e-02, -3.7079e-02]], [[-1.1335e-02, 9.5021e-03, 2.6586e-02], [-1.1697e-02, 1.2076e-02, 2.2394e-02], [-1.0673e-02, -1.2071e-03, 1.3524e-02]]], [[[ 1.9768e-02, -8.0696e-03, 3.9721e-02], [ 7.1601e-02, -1.0830e-03, 5.1102e-02], [ 3.1348e-02, 1.9598e-02, 4.2273e-02]], [[-6.3855e-03, -1.9001e-02, 3.1372e-02], [ 5.7577e-02, -9.2509e-02, 3.7932e-02], [ 4.1606e-02, 3.8685e-03, 8.7652e-02]], [[-1.5303e-02, 9.0893e-02, -2.0601e-03], [ 8.2584e-02, -2.4564e-01, -6.7164e-02], [ 3.7672e-02, -5.9163e-02, 7.3793e-02]], ..., [[ 3.5074e-03, 1.0862e-02, -1.1515e-02], [ 3.6652e-02, -2.1676e-01, -1.6113e-01], [-1.3854e-03, -1.0259e-01, -7.2141e-02]], [[-7.6707e-03, -2.5830e-02, 6.0398e-02], [-6.6740e-02, 1.1874e-01, 6.2487e-02], [-1.9129e-02, -1.2681e-02, -1.0622e-01]], [[-6.3536e-02, -2.9104e-02, -3.7751e-02], [-5.6864e-02, 1.4481e-02, 6.7772e-03], [-4.8896e-02, 3.4646e-03, 8.6100e-03]]], ..., [[[ 3.9354e-02, -6.6627e-03, 4.0764e-02], [ 2.7842e-02, -3.0555e-02, 3.2447e-02], [ 6.8370e-02, 2.5911e-02, 6.6900e-03]], [[ 2.4717e-03, -1.6805e-02, 1.9826e-02], [ 4.2008e-03, 7.0609e-02, -8.5756e-04], [ 3.5993e-02, -3.0459e-02, -1.8319e-02]], [[ 3.9273e-02, -1.7870e-02, -3.1896e-04], [ 2.4121e-02, 3.4507e-03, -8.2581e-03], [ 1.3955e-02, 7.6891e-03, -6.0636e-03]], ..., [[ 3.5209e-02, -5.7626e-03, -1.1892e-02], [-2.7179e-02, 2.1104e-02, 6.3786e-03], [ 2.2173e-02, -1.0348e-03, 2.0204e-02]], [[ 6.3617e-02, -2.1511e-02, 6.4041e-02], [ 7.5848e-02, -6.4107e-02, 5.6652e-02], [ 3.4952e-02, -5.5156e-03, 5.1382e-02]], [[ 2.5357e-02, 1.5523e-02, 3.8787e-02], [ 2.9371e-02, 1.4384e-02, 2.8148e-02], [ 2.5142e-02, 9.4786e-03, 1.6502e-02]]], [[[ 9.0271e-02, -4.9715e-02, -1.7902e-02], [ 6.6080e-02, -3.5741e-02, -2.9211e-02], [ 1.3406e-02, -2.2202e-02, 3.6659e-02]], [[ 3.7982e-02, -5.8343e-03, -4.1921e-03], [-2.4354e-02, 2.3517e-02, 3.4350e-02], [ 2.1185e-02, -2.0275e-03, -7.9948e-03]], [[-9.0334e-02, -5.0362e-02, 7.3534e-02], [ 9.9277e-02, -4.2438e-02, -6.0837e-02], [ 6.6483e-03, -2.6758e-02, 1.2265e-02]], ..., [[ 4.8771e-03, -6.5949e-02, 9.6650e-03], [-2.9347e-02, 2.3732e-02, -6.7471e-02], [-3.4458e-02, -2.9734e-02, -1.9612e-03]], [[-1.2211e-03, 1.1176e-02, -2.1034e-02], [ 1.7472e-02, -1.1057e-01, 4.9435e-02], [ 3.0578e-02, 4.5229e-03, -6.8300e-02]], [[-4.8275e-02, 2.8710e-03, 5.7739e-02], [-5.6662e-02, 1.3080e-03, 7.0796e-02], [-5.5019e-03, -1.1777e-02, 2.0156e-02]]], [[[-8.6935e-03, -4.6093e-02, -5.4336e-02], [-1.7928e-02, 4.7668e-02, -4.8272e-02], [-2.4692e-02, 2.4703e-02, -4.5279e-02]], [[-1.9556e-02, 1.4680e-02, -7.9975e-03], [-3.8431e-02, -2.8728e-02, 1.1342e-02], [-6.9387e-03, 6.1731e-03, 3.8022e-02]], [[ 1.3072e-02, 3.0144e-02, 2.7840e-02], [-4.4969e-03, -1.3793e-02, -6.1284e-02], [-2.4437e-02, -1.0847e-02, -4.5067e-02]], ..., [[ 1.8969e-02, 8.9498e-03, 9.0906e-03], [ 2.7867e-02, 2.1409e-02, -1.7042e-03], [-1.0398e-02, 9.1379e-03, -2.2365e-02]], [[-2.0583e-02, 2.7973e-02, -9.0827e-03], [-5.9185e-03, -3.1830e-02, 1.6653e-02], [ 1.6591e-02, 6.5387e-02, 1.6431e-02]], [[-1.9109e-02, -6.2296e-03, 6.1300e-04], [-3.8871e-03, -6.9625e-03, 1.0216e-02], [ 2.7805e-03, -8.5179e-03, -9.7649e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn1.weight&#39;, tensor([0.1748, 0.3737, 0.1808, 0.2580, 0.2431, 0.2056, 0.2154, 0.3235, 0.3418, 0.3051, 0.2315, 0.4691, 0.1823, 0.1790, 0.2678, 0.2618, 0.1957, 0.2152, 0.1474, 0.1809, 0.2854, 0.1855, 0.3767, 0.3665, 0.2535, 0.2568, 0.1912, 0.2014, 0.2062, 0.2274, 0.2732, 0.3154, 0.2769, 0.2532, 0.1620, 0.1193, 0.2227, 0.2354, 0.3566, 0.2655, 0.2177, 0.2811, 0.2079, 0.3037, 0.2254, 0.2652, 0.1521, 0.3733, 0.3453, 0.4399, 0.4199, 0.2532, 0.2169, 0.2255, 0.1728, 0.3755, 0.3123, 0.3760, 0.3352, 0.1731, 0.2364, 0.2004, 0.2749, 0.2048], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn1.bias&#39;, tensor([ 0.0714, -0.2212, 0.1773, -0.0651, -0.0536, 0.0327, 0.0272, -0.0967, -0.1033, -0.0444, -0.0882, -0.2716, 0.0880, 0.1030, -0.0590, -0.1257, 0.0839, -0.0247, 0.0959, 0.1179, -0.1641, 0.0698, -0.1945, -0.3569, -0.0213, -0.0478, 0.0604, -0.0413, 0.1210, -0.0499, -0.0096, -0.2207, -0.2379, -0.0032, 0.1816, 0.3244, 0.0183, 0.0882, -0.1563, -0.1849, -0.0091, -0.0903, 0.0386, -0.2935, 0.0473, -0.2539, 0.1413, -0.2301, -0.1787, -0.2541, -0.3250, -0.2354, 0.1357, 0.0146, 0.1557, -0.2550, -0.3233, -0.2833, -0.2453, 0.0921, 0.0315, 0.1107, -0.0400, 0.0373], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn1.running_mean&#39;, tensor([-0.0084, -1.2009, -2.0344, -0.8417, -1.3372, -2.0430, 0.5005, -1.5382, -1.8219, -2.3691, -1.3074, -1.8488, 0.3173, -0.8091, -1.2201, -0.5220, -0.7249, -0.5389, 0.7444, 0.5539, -1.0173, -0.2035, -1.7642, -0.0370, -1.3548, -0.5274, 0.7042, -0.6026, -0.9001, -0.5396, -2.3335, -0.3754, -0.2083, -1.0563, -1.4258, -0.7735, -1.3254, 0.6141, -1.5443, 0.6561, -0.2042, -1.3082, -0.5204, -0.5012, -1.9201, 0.1045, 1.0486, -1.6926, -0.9428, -1.5448, -1.2403, -0.9271, -1.1307, 0.3451, -0.9522, -1.0822, 0.4499, -0.6493, -1.2386, -1.7924, -0.3526, 0.2162, -0.4868, 0.7981], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn1.running_var&#39;, tensor([0.1462, 0.6141, 0.4199, 0.4307, 0.1728, 0.2980, 0.3598, 0.3250, 0.7221, 0.5831, 0.1707, 1.1432, 0.1878, 0.4230, 0.3122, 0.1801, 0.2226, 0.2309, 0.2923, 0.2139, 0.2452, 0.2540, 0.7093, 0.8228, 0.6059, 0.2416, 0.3336, 0.2046, 0.3200, 0.4062, 0.5415, 0.6025, 0.2552, 0.4520, 0.3038, 0.0648, 0.2330, 0.5626, 0.7710, 0.2215, 0.2397, 0.3655, 0.3269, 0.3099, 0.3069, 0.1448, 0.1680, 0.4382, 0.5737, 0.8946, 0.6366, 0.1254, 0.2511, 0.3637, 0.4040, 0.5359, 0.3491, 0.4333, 0.4531, 0.2906, 0.3411, 0.1613, 0.2256, 0.2222], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.4.1.conv2.weight&#39;, tensor([[[[-1.8145e-03, -3.9612e-02, -1.2018e-02], [ 8.2245e-03, 8.7828e-02, -1.5204e-03], [ 9.2361e-03, -1.1406e-02, 5.8815e-02]], [[-9.3483e-03, 2.5004e-03, -1.5393e-02], [ 5.2439e-03, 2.9025e-02, 2.4373e-02], [-1.3835e-02, -3.4593e-02, 2.8946e-02]], [[-1.6685e-02, 3.3273e-03, -3.2152e-02], [-3.2670e-02, -1.4035e-02, 8.7651e-03], [-1.7983e-02, -1.2080e-02, 2.0640e-02]], ..., [[-3.3190e-02, 3.5548e-02, -5.1597e-02], [ 1.2301e-02, 3.2947e-02, 8.5908e-03], [-1.4458e-02, -2.1013e-03, 8.0946e-03]], [[-1.4270e-02, 6.6109e-03, 8.8242e-03], [ 2.3258e-02, 1.5087e-03, 2.7574e-03], [ 5.7200e-02, -1.0539e-01, 6.6891e-02]], [[ 1.5654e-02, -2.3585e-02, -3.6192e-02], [ 5.5637e-03, 1.3133e-02, -2.6548e-02], [ 7.2652e-03, 1.4120e-02, 2.8433e-02]]], [[[-2.1132e-02, -1.6436e-02, -1.8516e-02], [-2.3854e-02, 9.1838e-03, -2.0763e-02], [-1.7143e-02, 1.6433e-02, -1.4078e-02]], [[-1.0042e-02, -2.9123e-02, -1.7546e-02], [-4.8080e-02, -6.8281e-02, -2.6111e-02], [-4.3372e-02, -4.2058e-02, 5.5110e-03]], [[ 3.4251e-02, 3.5651e-02, 3.2472e-02], [ 4.0790e-02, 4.7982e-02, 4.6256e-02], [-5.9874e-04, 2.7933e-02, -4.9169e-03]], ..., [[-2.4227e-02, 2.5946e-02, -5.7962e-03], [-2.7757e-02, 5.5278e-02, -6.8525e-03], [-4.4312e-02, 8.2043e-03, -1.3916e-02]], [[-1.2879e-02, -4.4172e-03, 6.2828e-03], [-1.0234e-02, 2.7333e-03, -2.2262e-02], [-2.6354e-02, 8.5431e-03, 1.7143e-02]], [[-1.9169e-02, 1.4941e-02, -1.7583e-02], [ 2.3217e-02, 2.1205e-02, -1.4178e-02], [ 1.5771e-02, 2.0219e-02, -2.3303e-02]]], [[[ 4.9425e-02, -2.2913e-02, 2.3223e-02], [ 1.1494e-03, 1.5908e-02, 4.2130e-03], [-1.5582e-02, 8.4023e-02, -2.7326e-02]], [[-2.0361e-02, -4.4856e-02, -1.6992e-03], [ 2.2790e-03, -3.6029e-02, -4.6639e-02], [ 1.0282e-02, -1.1723e-02, -3.1018e-02]], [[ 6.6229e-02, -6.7712e-02, 1.3038e-02], [-4.0919e-02, -2.0920e-01, -4.1797e-02], [ 9.9552e-02, 4.6061e-02, 2.5864e-02]], ..., [[ 6.7544e-03, 2.5750e-02, 1.9689e-02], [-2.6711e-02, 2.1892e-02, -1.3880e-02], [-1.3702e-02, 1.0696e-02, 2.2887e-02]], [[ 1.6874e-02, -1.7527e-02, -7.4332e-03], [ 2.1386e-02, -9.2370e-02, 5.4758e-02], [ 2.2712e-02, -2.4266e-03, -2.5822e-02]], [[ 1.3694e-02, 3.0733e-02, 2.1586e-02], [-3.8074e-02, 7.7631e-03, 8.6641e-03], [-1.9455e-04, 6.4281e-03, -9.5327e-03]]], ..., [[[ 1.7632e-02, 1.3502e-02, 2.4915e-02], [ 1.6522e-02, 7.7777e-03, 2.6458e-02], [-8.5664e-03, 5.0094e-05, -1.4079e-02]], [[-1.3191e-02, -7.1027e-03, 4.6912e-03], [-1.7317e-02, -2.9457e-02, -1.2977e-02], [-5.6581e-03, -1.0144e-02, -3.1520e-04]], [[-1.5924e-02, -4.6368e-02, -1.7522e-03], [-5.8432e-02, -8.1452e-02, 8.5147e-03], [ 1.4505e-03, -1.1156e-02, 1.7457e-02]], ..., [[-2.1663e-02, -2.3072e-02, -7.1501e-03], [-1.1482e-02, -1.9443e-02, -8.3405e-03], [-2.1203e-02, -1.6785e-02, 7.6581e-03]], [[ 1.5224e-02, 2.1795e-04, 4.6970e-03], [ 1.7165e-02, -2.4591e-02, -1.1916e-02], [ 1.4974e-03, -2.7462e-02, -2.2667e-02]], [[-5.4297e-03, -2.1733e-02, -3.6171e-03], [-1.1916e-02, -3.7854e-02, -1.1730e-02], [ 8.7455e-03, -2.8462e-03, 5.6075e-03]]], [[[ 5.3917e-02, 1.3463e-02, -2.8401e-02], [-4.7861e-02, -6.6790e-02, 3.2290e-02], [-6.5546e-03, -1.2191e-02, -6.6395e-02]], [[-1.5565e-02, -1.4423e-03, 1.7894e-02], [ 3.7189e-02, 8.2062e-02, -5.0061e-02], [ 2.2904e-02, -5.6337e-02, -2.9913e-02]], [[ 2.9285e-02, -3.2311e-03, -5.4796e-02], [ 1.1017e-02, 1.1909e-01, -1.1574e-01], [-8.1773e-02, 6.1303e-03, 8.4666e-02]], ..., [[-2.4140e-02, 7.7404e-02, -5.1417e-02], [-8.8553e-03, -3.4850e-02, -2.6129e-02], [ 1.1263e-02, -8.6578e-03, -1.0866e-02]], [[ 9.5845e-03, 2.2293e-02, 3.7993e-02], [ 6.5610e-03, 5.9288e-02, -6.4780e-02], [-9.9325e-03, 6.3267e-02, 2.1805e-02]], [[ 1.8789e-02, 1.6738e-02, 3.3449e-03], [ 4.2467e-02, -9.8273e-02, 1.3569e-02], [ 2.8990e-03, -4.1968e-03, 8.0731e-03]]], [[[ 1.2519e-02, 3.2174e-03, -1.0541e-02], [ 1.3306e-02, -1.0507e-02, -3.0698e-02], [-1.2967e-02, 4.5570e-03, -1.4386e-02]], [[ 7.2350e-03, 3.0150e-03, 1.2597e-02], [ 2.1183e-03, 7.9199e-04, 8.3751e-03], [-1.2538e-02, -1.4494e-02, 6.3494e-03]], [[ 5.1814e-03, -5.0160e-04, 1.7246e-02], [ 1.8660e-03, 7.1507e-03, -1.6564e-02], [-3.0094e-02, -1.1687e-02, -9.9348e-03]], ..., [[ 9.7019e-03, -6.7472e-03, 1.6544e-02], [ 9.1374e-04, 8.5702e-03, 2.6068e-02], [ 6.1633e-03, 1.3805e-02, 2.2554e-02]], [[-4.3235e-02, 1.6514e-02, 1.9223e-02], [ 1.7729e-02, 1.0756e-01, -1.4510e-02], [ 1.0217e-02, 4.1177e-02, -1.5238e-02]], [[ 4.3922e-02, 3.5555e-03, 3.5512e-03], [ 5.2478e-02, 1.3647e-02, 1.2495e-02], [ 2.2764e-02, 2.3387e-02, -2.3931e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn2.weight&#39;, tensor([0.4188, 0.2079, 0.2234, 0.1804, 0.4022, 0.0709, 0.3808, 0.1047, 0.1255, 0.1628, 0.0952, 0.2355, 0.1492, 0.3564, 0.2866, 0.3935, 0.5282, 0.1766, 0.3381, 0.2645, 0.1800, 0.3317, 0.3288, 0.4932, 0.1390, 0.4043, 0.3159, 0.2253, 0.2841, 0.2078, 0.1399, 0.2655, 0.3180, 0.4895, 0.1650, 0.2393, 0.1359, 0.2403, 0.2059, 0.1667, 0.3167, 0.3584, 0.1532, 0.2363, 0.3103, 0.3217, 0.3411, 0.3173, 0.2250, 0.2875, 0.2016, 0.2394, 0.3260, 0.2861, 0.1133, 0.1522, 0.2842, 0.3140, 0.2176, 0.2567, 0.3511, 0.0913, 0.3399, 0.3373], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn2.bias&#39;, tensor([-0.0345, -0.0784, 0.1734, -0.1018, 0.1756, -0.0748, -0.0547, -0.1124, -0.3827, -0.0051, -0.0251, -0.1386, 0.0890, 0.1785, 0.0391, 0.1113, 0.0470, -0.1359, 0.0258, 0.0146, 0.0097, 0.1513, 0.2452, 0.1453, 0.0304, 0.0048, 0.0041, -0.0353, 0.0241, -0.2495, -0.0838, 0.0637, -0.1292, -0.2068, 0.1611, -0.0986, 0.0443, -0.0118, -0.0011, -0.0725, 0.0218, 0.2045, 0.0854, 0.0205, 0.1613, 0.2331, 0.2322, 0.0686, -0.1574, 0.1271, 0.0667, -0.1213, 0.2162, -0.1008, -0.0464, 0.1131, 0.1839, 0.0334, -0.1604, -0.1545, 0.2172, -0.0313, 0.3443, 0.0373], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn2.running_mean&#39;, tensor([-0.0882, -0.0349, 0.0344, 0.2352, -0.3404, -0.0412, 0.0513, 0.1101, 0.0778, -0.0343, -0.0259, 0.0191, -0.0416, -0.0735, 0.0582, -0.3315, 0.0374, 0.0172, -0.1517, 0.1185, -0.0194, 0.1417, 0.0071, -0.1023, 0.1478, 0.0036, 0.1100, 0.0081, -0.1134, -0.0186, -0.1044, 0.1299, -0.1096, 0.0707, 0.3070, 0.4206, -0.0221, 0.0442, -0.3043, -0.0329, -0.0633, -0.0672, 0.0483, -0.2660, -0.0677, -0.2304, -0.2441, 0.0543, -0.1047, -0.0883, -0.5860, -0.0639, -0.2300, 0.0975, 0.0531, 0.0862, 0.0014, 0.1412, 0.0258, -0.0909, -0.0341, 0.0663, -0.1606, 0.0656], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn2.running_var&#39;, tensor([0.0265, 0.0369, 0.0154, 0.0325, 0.0208, 0.0067, 0.0294, 0.0238, 0.0335, 0.0200, 0.0108, 0.0534, 0.0283, 0.0138, 0.0592, 0.0194, 0.0352, 0.0115, 0.0161, 0.0160, 0.0260, 0.0169, 0.0165, 0.0358, 0.0507, 0.0266, 0.0900, 0.0500, 0.0229, 0.0219, 0.0405, 0.0621, 0.0118, 0.0344, 0.0299, 0.0128, 0.0604, 0.0426, 0.0327, 0.0169, 0.0351, 0.0150, 0.0146, 0.0331, 0.0176, 0.0156, 0.0319, 0.0246, 0.0079, 0.0284, 0.0238, 0.0232, 0.0185, 0.0746, 0.0174, 0.0546, 0.0126, 0.0285, 0.0474, 0.0200, 0.0150, 0.0112, 0.0146, 0.1008], device=&#39;cuda:0&#39;)), (&#39;0.4.1.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.4.2.conv1.weight&#39;, tensor([[[[ 2.0496e-02, -1.0060e-01, -2.4221e-02], [ 1.3189e-02, 1.1087e-01, 3.1708e-02], [-6.9981e-03, -5.6420e-05, -2.3930e-02]], [[-5.1400e-02, 1.0768e-02, 4.6819e-03], [-1.6593e-02, 8.0450e-02, 5.3001e-03], [-5.7553e-02, 2.8036e-02, 7.2105e-04]], [[-1.7130e-02, -1.7701e-02, -3.5705e-02], [-4.7677e-02, 2.7300e-02, 1.5171e-02], [ 7.0168e-03, -3.1372e-03, 9.0153e-04]], ..., [[-2.1065e-02, 2.7986e-02, -1.3189e-02], [-4.2906e-02, 2.4717e-02, -2.3334e-02], [-2.5240e-02, 1.1367e-02, -3.3748e-02]], [[-2.8826e-03, 3.9708e-04, -4.1764e-02], [ 5.2639e-02, -6.4350e-02, 1.3612e-02], [-2.9932e-02, -3.0989e-02, -4.1334e-02]], [[ 2.0460e-02, -6.6541e-03, -1.3031e-02], [ 5.3527e-02, 2.1243e-02, 1.1287e-02], [ 1.8353e-02, 1.1000e-02, 1.3914e-02]]], [[[-6.8577e-02, -3.0081e-02, 6.4244e-02], [-2.7863e-02, -6.1276e-02, -2.8415e-02], [-1.1341e-02, -3.0762e-03, 3.1487e-02]], [[ 1.7849e-03, -2.7606e-02, 4.3912e-02], [ 3.4040e-03, -3.5316e-02, 2.5534e-02], [ 1.5221e-02, -3.8764e-02, 4.5167e-03]], [[-5.2236e-03, -6.4958e-03, -3.3261e-02], [-2.9987e-02, -3.4710e-03, 3.1836e-02], [ 2.8013e-02, -1.8746e-02, -1.0719e-03]], ..., [[ 1.5346e-02, -2.5923e-02, 1.1370e-03], [ 5.2693e-02, -4.1694e-02, 1.9907e-03], [ 1.3208e-02, -2.9651e-02, -2.0161e-02]], [[-1.0533e-02, -1.2234e-02, -4.0399e-03], [-1.5171e-02, 8.7143e-02, 2.1822e-02], [-1.2920e-02, 2.6548e-02, 1.9266e-02]], [[-1.3140e-02, -5.9512e-03, -6.3449e-03], [ 2.0431e-04, 2.6175e-03, -1.7585e-02], [ 3.3116e-03, 4.9562e-03, -2.1674e-02]]], [[[-4.5381e-03, 2.7838e-03, 1.6661e-02], [-1.1975e-02, -5.6517e-03, 1.8282e-02], [-2.7784e-02, -1.1509e-02, -4.4901e-03]], [[-9.2977e-03, 1.1480e-02, -8.8698e-03], [-1.1773e-02, 5.3083e-03, -2.5638e-02], [-4.2624e-03, 8.0779e-03, -4.8886e-03]], [[ 2.5654e-03, 3.0239e-03, -2.2048e-02], [ 3.8568e-03, 2.7949e-02, 9.3180e-03], [-2.3659e-02, -6.2289e-03, -9.5112e-03]], ..., [[ 7.8773e-03, 9.7748e-03, -2.2388e-04], [ 5.8584e-03, 3.7311e-03, -1.1507e-02], [-7.8860e-03, 1.3766e-02, 1.2346e-03]], [[-1.9084e-02, 1.3638e-02, 1.4376e-02], [ 2.2467e-02, -2.4504e-02, -5.7537e-02], [ 3.4847e-02, -7.1245e-04, -2.2944e-02]], [[ 3.7746e-02, 4.6463e-02, 4.4170e-02], [ 1.9670e-02, 1.7299e-02, 2.1056e-02], [ 1.4454e-02, 6.6981e-03, 8.0628e-03]]], ..., [[[-5.7277e-02, -2.4683e-02, 3.5472e-02], [-5.7031e-03, -3.7629e-02, 3.7945e-02], [ 3.6785e-02, -2.4738e-02, -4.6898e-03]], [[ 9.0556e-03, -3.9724e-02, -5.5773e-03], [ 5.8196e-03, -4.9986e-02, -4.7475e-02], [-1.9602e-02, -4.5175e-02, -7.7040e-02]], [[-5.4617e-02, -3.6052e-02, -8.5597e-03], [-6.1807e-03, 6.1483e-03, -5.5606e-03], [ 1.5080e-02, 4.8254e-02, 5.5435e-02]], ..., [[-2.7351e-02, -4.3554e-02, -1.7377e-02], [ 2.8702e-03, 3.6321e-02, 1.3463e-02], [-1.6183e-02, 3.6181e-02, 3.1276e-02]], [[-2.6301e-02, 1.0147e-02, -4.7518e-03], [-3.1631e-02, 7.9084e-03, 3.9764e-02], [-3.3067e-03, -2.5955e-02, 6.4192e-02]], [[ 2.9256e-02, 1.0077e-02, -2.1098e-03], [ 5.0823e-02, 5.3062e-02, 2.6831e-02], [ 3.8114e-02, 4.5122e-02, 3.1380e-02]]], [[[-2.6880e-02, -1.8491e-02, 1.2066e-02], [-4.6238e-02, -7.2064e-02, 7.8855e-04], [-2.0530e-02, 1.5374e-03, 4.3318e-02]], [[-8.5367e-03, -5.7272e-03, -1.3976e-02], [-2.6166e-02, 2.2138e-02, -3.0832e-02], [ 1.6681e-02, 5.7004e-02, 2.2634e-02]], [[ 1.6195e-02, -6.4311e-02, -3.6318e-02], [ 9.5191e-02, 1.0311e-01, 1.2900e-02], [-7.7605e-03, 6.0386e-02, -8.2614e-02]], ..., [[ 8.3452e-03, 1.8277e-03, -1.3020e-02], [ 1.2551e-02, 1.2301e-01, 1.8502e-02], [-4.5336e-02, 5.6455e-03, -4.2496e-02]], [[-2.7719e-02, 8.9759e-02, 1.1923e-01], [-2.1929e-03, -1.7815e-01, 2.1651e-02], [ 7.8351e-02, -6.6564e-02, 4.6480e-02]], [[ 1.8043e-02, 7.4549e-03, 5.9718e-03], [ 8.1043e-03, -1.0325e-02, -8.8560e-03], [ 3.1455e-02, 1.3707e-02, 3.7852e-02]]], [[[ 2.2857e-02, -4.2522e-02, -2.7958e-03], [ 5.3447e-02, -1.5102e-02, 9.4634e-03], [ 3.0826e-02, -1.9096e-02, 1.5787e-03]], [[-5.8950e-03, -1.6410e-02, 2.0204e-02], [-1.3524e-02, -1.6161e-02, 2.8106e-02], [-1.0401e-02, 5.6227e-04, 3.5347e-02]], [[-3.5383e-02, -2.8507e-02, 2.9895e-02], [-7.1119e-03, -2.1424e-02, 4.7424e-02], [-3.0663e-03, -2.6745e-02, 9.8941e-03]], ..., [[-7.0433e-03, -1.7941e-04, 7.1991e-03], [ 1.9939e-02, -8.5026e-04, 1.0380e-02], [ 1.7691e-03, 2.0573e-02, 3.5697e-02]], [[ 1.6309e-02, 2.8896e-03, -2.3772e-02], [ 6.4320e-02, 4.4203e-03, 4.2304e-03], [ 1.6926e-02, -6.9997e-02, 2.4014e-02]], [[ 5.7018e-03, -2.7467e-02, -2.9757e-02], [ 2.1883e-02, -1.3004e-02, -1.4891e-02], [ 3.0910e-02, -7.4926e-03, -2.6042e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn1.weight&#39;, tensor([0.3334, 0.2020, 0.1940, 0.2483, 0.2484, 0.1890, 0.1253, 0.2781, 0.2747, 0.2891, 0.2197, 0.2722, 0.3052, 0.3260, 0.3871, 0.2560, 0.2842, 0.1527, 0.3044, 0.3445, 0.3138, 0.1641, 0.2803, 0.2008, 0.2878, 0.2819, 0.2712, 0.3017, 0.3140, 0.2086, 0.2750, 0.3197, 0.2108, 0.2709, 0.2744, 0.3570, 0.2078, 0.2925, 0.3176, 0.3022, 0.2122, 0.3455, 0.2239, 0.2401, 0.2773, 0.2699, 0.3149, 0.2915, 0.2351, 0.2645, 0.2042, 0.3063, 0.2822, 0.3106, 0.2474, 0.2659, 0.1857, 0.1914, 0.2726, 0.2227, 0.2348, 0.2501, 0.3243, 0.3103], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn1.bias&#39;, tensor([-0.2671, -0.0416, -0.1072, -0.2452, 0.0172, 0.0654, 0.1782, -0.0759, -0.1003, -0.1249, 0.0688, -0.1050, -0.2072, -0.1027, -0.2378, -0.0881, -0.1318, 0.1489, -0.1585, -0.2267, -0.2344, 0.0887, -0.2014, 0.0530, -0.1658, -0.2352, -0.1652, -0.1963, -0.2267, -0.0400, -0.1705, -0.3033, -0.1240, -0.1179, -0.1241, -0.4215, -0.0501, -0.2113, -0.1604, -0.2083, 0.0119, -0.2287, -0.0263, -0.0468, -0.2525, -0.2455, -0.1847, -0.1180, -0.2996, -0.1027, -0.1336, -0.2028, -0.1389, -0.1307, 0.0232, -0.0289, 0.0329, 0.0873, -0.0271, 0.0284, -0.0255, -0.1038, -0.3273, -0.1441], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn1.running_mean&#39;, tensor([-1.5089, -0.0159, 0.9989, -0.1447, -1.4800, 0.9215, 0.2357, -0.3978, -0.8416, -0.8677, 0.6877, -0.2911, 0.5165, -1.8310, -1.9159, -0.1723, -0.5706, 0.4727, -0.6308, -0.8233, -0.6157, -0.6470, 0.1067, -1.0154, -0.5236, -1.4664, -0.2981, 0.1792, -0.7171, 0.0368, -0.0498, 0.3450, 0.0618, 0.0950, -1.1525, 0.8294, -0.8727, 0.1488, -0.6141, 0.6639, -0.7874, -0.9413, -0.7491, 0.5035, 0.3859, -0.7045, -1.2051, -1.1699, 0.3682, -0.5311, -1.8588, 0.3011, -0.2397, 0.7656, 0.1056, -1.1119, -0.1698, -1.2699, -0.6746, -0.3865, -1.3971, -0.7258, 0.8065, 0.0632], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn1.running_var&#39;, tensor([0.3031, 0.4157, 0.2863, 0.3132, 0.6418, 0.4700, 0.2000, 0.7507, 0.3280, 0.4779, 0.6136, 0.2538, 0.3453, 0.7954, 0.4909, 0.5772, 0.2963, 0.3211, 0.4495, 0.4998, 0.3104, 0.2125, 0.2457, 0.6394, 0.4167, 0.3291, 0.2651, 0.4248, 0.4777, 0.3178, 0.3062, 0.5544, 0.2151, 0.4851, 0.5743, 0.7557, 0.3679, 0.3900, 0.5924, 0.2905, 0.5195, 0.6038, 0.4224, 0.2881, 0.4611, 0.2665, 0.5240, 0.7216, 0.1238, 0.5235, 0.1489, 0.4308, 0.2264, 0.5656, 0.7678, 0.6419, 0.2625, 0.4006, 0.8291, 0.4430, 0.4098, 0.5945, 0.4651, 0.3378], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.4.2.conv2.weight&#39;, tensor([[[[-1.7469e-02, 2.2828e-02, -2.1418e-02], [-3.9866e-02, 4.1496e-02, -2.7192e-02], [-1.0811e-02, -6.6157e-02, -1.2306e-02]], [[ 9.7720e-03, 6.4869e-02, -6.0872e-03], [-1.4101e-02, 7.6893e-03, 8.3872e-03], [ 5.9458e-02, -5.4102e-02, 1.2943e-02]], [[ 1.4860e-02, -1.0892e-02, 1.4181e-02], [-8.1209e-03, -3.6385e-02, 1.0927e-02], [-8.7662e-03, -2.4546e-02, 1.3878e-02]], ..., [[ 5.1164e-02, 2.8636e-02, -7.4304e-02], [ 1.0341e-01, 9.1311e-02, -4.4484e-02], [ 3.3261e-02, 5.6438e-03, -7.3759e-02]], [[ 2.9532e-03, -1.1315e-02, 1.1967e-02], [ 2.0889e-02, 1.1999e-02, -1.2673e-02], [ 9.2595e-03, -4.0403e-02, 1.1889e-02]], [[ 2.6200e-02, 2.9309e-02, 1.9944e-02], [ 9.3071e-03, 4.5881e-03, 1.8449e-02], [ 7.8459e-03, -9.7127e-03, 1.6959e-02]]], [[[ 1.3427e-02, -5.7220e-04, 1.4615e-02], [ 2.7822e-02, 3.0167e-02, 4.8994e-02], [ 3.9650e-02, 3.9586e-02, 6.0366e-02]], [[-2.0877e-02, -8.5754e-03, -8.4245e-03], [-4.0648e-02, -7.1957e-03, -4.2903e-03], [-4.9643e-02, -3.8165e-03, 6.5575e-03]], [[-1.1645e-02, -1.6431e-02, 5.2077e-03], [ 1.9365e-03, -1.3005e-02, 1.6005e-04], [ 1.4839e-02, -5.9996e-04, -5.3360e-03]], ..., [[ 1.3379e-02, 3.0517e-02, 3.0218e-02], [-2.4518e-02, -5.4167e-03, 3.6850e-02], [ 1.8803e-02, 1.3537e-03, 3.2769e-02]], [[-4.5585e-03, -4.3135e-02, -7.3531e-02], [-2.8007e-02, -7.5053e-02, -6.4940e-02], [-1.3264e-02, -3.7256e-02, -2.2718e-02]], [[-1.0769e-02, -1.0031e-02, -5.9547e-03], [ 4.5782e-03, -1.0245e-02, -2.2337e-03], [-1.4099e-02, -1.5220e-02, -7.9905e-03]]], [[[ 2.3478e-02, -6.2236e-03, 4.1973e-02], [ 2.5341e-02, -2.0505e-03, 4.7520e-03], [-3.3992e-02, -1.7696e-03, -5.1838e-03]], [[-1.0073e-02, -2.1145e-03, 4.5688e-03], [-3.3068e-02, -5.7266e-03, -4.6921e-03], [-1.2779e-02, -4.5579e-02, -3.2907e-02]], [[ 4.7722e-03, 9.0127e-03, 1.1622e-02], [ 1.0948e-02, -6.9072e-03, 5.9978e-04], [ 1.9048e-02, -6.1925e-03, 6.3072e-03]], ..., [[ 3.3936e-02, 5.2581e-03, 6.1275e-02], [ 2.7936e-02, -1.3963e-02, 2.1620e-02], [ 1.0739e-02, 3.0070e-02, -5.8423e-03]], [[-3.7423e-02, -1.6539e-01, -1.1354e-01], [-2.6422e-02, -7.0875e-02, -4.4150e-02], [ 2.2469e-02, -5.3809e-03, -3.4713e-02]], [[-1.4941e-02, 2.5142e-02, 6.8325e-03], [-1.6572e-02, -1.7794e-02, 1.5785e-02], [ 1.8051e-02, 4.6173e-02, 2.2150e-02]]], ..., [[[-1.1792e-02, 3.0573e-03, -1.2234e-02], [ 7.9095e-03, 5.3741e-03, -3.6815e-03], [-7.2174e-03, -2.8625e-04, -2.5993e-02]], [[-3.2502e-02, -2.5400e-02, -2.9576e-02], [-2.3484e-02, -2.2118e-02, -1.9200e-02], [-4.3796e-02, -1.9725e-02, -1.7754e-02]], [[-3.8540e-02, -3.5573e-02, -2.0464e-02], [-3.9760e-02, -4.0647e-02, -2.2391e-02], [-3.1835e-02, -2.2873e-02, -1.8378e-03]], ..., [[ 3.7756e-02, 5.5922e-02, 2.1860e-03], [ 1.9294e-02, 3.4934e-02, 2.4069e-02], [-5.7919e-03, -1.0351e-02, -2.1698e-02]], [[-2.6844e-02, -8.6140e-02, -3.4890e-02], [-5.2334e-02, -1.8042e-02, -1.7659e-02], [-2.4277e-03, -3.7857e-03, -3.5173e-03]], [[-1.4608e-02, -8.6835e-04, 1.7064e-02], [ 1.0697e-02, 3.9360e-03, -1.3431e-04], [ 4.6497e-03, 1.0355e-03, -1.6132e-02]]], [[[ 2.8843e-02, -2.1091e-02, 2.6425e-02], [-4.7686e-03, -1.6388e-02, 1.8723e-02], [-5.2291e-03, -2.6848e-02, -7.4600e-03]], [[-6.5235e-03, -1.0510e-02, 1.6774e-02], [-3.9649e-03, -8.6189e-02, 5.0728e-02], [ 6.2632e-03, 1.3385e-02, 3.3311e-02]], [[-1.5250e-02, -2.1977e-02, -3.7696e-02], [ 1.3229e-02, 6.2037e-03, -2.2866e-02], [-6.2548e-02, -3.2334e-02, 4.1744e-03]], ..., [[-7.0995e-02, -1.0163e-01, 2.4541e-02], [-1.5261e-03, -7.7478e-03, -2.0216e-02], [ 1.1946e-02, 4.0892e-02, -1.2166e-02]], [[ 9.2939e-02, 5.3028e-02, -5.6805e-02], [ 6.3092e-03, -5.1487e-02, 6.2890e-02], [-1.8383e-02, 5.9468e-02, 3.8725e-02]], [[ 2.2471e-02, 2.0890e-02, 5.0256e-03], [-1.6907e-02, -6.9451e-02, -7.1373e-03], [ 4.2952e-02, 3.7984e-02, -3.8220e-02]]], [[[ 1.1689e-02, -1.4558e-02, 5.8952e-03], [-6.4705e-03, -6.9862e-03, 5.5730e-03], [-2.6453e-02, -3.0443e-02, -1.7433e-02]], [[-6.6396e-03, -1.2084e-02, -1.7487e-02], [ 1.4362e-02, 1.8728e-02, 1.7806e-02], [-1.4309e-02, 1.5131e-02, -2.3915e-02]], [[-2.6824e-02, -2.5112e-02, -3.8340e-02], [-2.8840e-02, -2.9565e-02, -3.1946e-02], [-2.5728e-02, -1.6824e-02, -3.6428e-02]], ..., [[ 6.0971e-03, -3.1445e-03, -4.6876e-02], [-1.0845e-02, -2.9374e-02, -2.6803e-02], [-2.8116e-02, -2.6432e-02, -1.6237e-02]], [[ 1.1990e-02, -3.5450e-03, -2.6544e-02], [-2.4191e-02, -1.1380e-02, -2.1332e-02], [-1.4199e-02, -3.1741e-02, -5.8306e-02]], [[ 1.0288e-02, -5.2964e-04, -1.0570e-02], [ 1.4992e-02, 6.1325e-03, 1.1030e-02], [ 2.4269e-03, -1.3754e-02, -6.7641e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn2.weight&#39;, tensor([ 0.5567, 0.1696, 0.2844, 0.1936, 0.2486, 0.1824, 0.3347, 0.0483, 0.0180, 0.0816, 0.2080, 0.2378, 0.0555, 0.4221, 0.1841, 0.2234, 0.4980, 0.2356, 0.4653, 0.1539, 0.1668, 0.3570, 0.3098, 0.3732, -0.0079, 0.3544, 0.3778, 0.1356, 0.3250, 0.2470, 0.1845, 0.1951, 0.2853, 0.3956, 0.1455, 0.3082, 0.0491, 0.2709, 0.1277, 0.1774, 0.3444, 0.4148, 0.2681, 0.1222, 0.3839, 0.3543, 0.4213, 0.4453, 0.4435, 0.1484, 0.1439, 0.2007, 0.3677, 0.1896, 0.1629, 0.0057, 0.3050, 0.1241, 0.1687, 0.1383, 0.4403, 0.2256, 0.3540, 0.2121], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn2.bias&#39;, tensor([-0.0939, -0.2151, 0.1222, 0.0575, 0.0729, 0.2008, -0.0621, -0.0577, 0.0062, -0.0161, -0.1263, 0.0269, 0.0360, 0.0551, -0.0240, 0.1524, -0.0020, -0.1549, -0.1472, 0.0045, 0.0694, 0.0132, 0.0886, 0.1345, 0.0131, 0.2646, 0.0103, 0.1106, 0.0245, 0.1365, 0.0161, 0.0673, -0.1826, 0.2464, 0.1888, 0.0387, 0.0166, -0.0338, 0.0733, -0.1551, 0.0718, 0.2017, 0.0962, 0.0253, 0.0148, 0.1741, 0.0531, 0.1072, -0.0583, 0.0474, 0.0758, -0.0944, -0.0346, 0.0417, 0.0653, 0.0050, 0.0483, 0.1295, 0.0932, -0.1078, 0.0739, 0.2013, 0.0706, 0.0148], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn2.running_mean&#39;, tensor([-1.2378e-01, -4.4988e-02, 4.6394e-02, -9.6137e-03, -1.3425e-01, 5.9690e-02, -1.0785e-01, 1.7902e-02, 1.0402e-03, -7.6848e-02, -2.1800e-02, 6.6740e-02, -7.8854e-02, -1.0344e-01, 4.6078e-02, -8.7399e-02, -1.0534e-01, -3.3219e-02, -2.7235e-02, 2.4132e-02, 7.2538e-02, 4.9132e-02, -4.7280e-02, 3.9314e-02, 6.3903e-03, 2.2621e-02, 6.4782e-02, 9.9824e-02, -1.3623e-01, 5.2057e-03, 1.7529e-02, 2.0883e-01, -1.0801e-02, 6.8006e-03, 8.7971e-02, 3.7804e-01, 1.6163e-02, -6.5911e-02, 2.8106e-03, 4.1015e-02, -5.1017e-02, 1.5285e-02, -1.2627e-01, -1.7925e-01, -8.1116e-02, -1.6681e-01, -1.9684e-01, 1.7503e-02, 9.7019e-03, -1.6269e-01, -6.7313e-02, -5.0669e-02, -9.6874e-02, 2.0284e-01, 9.9142e-02, 3.0499e-04, -1.2989e-01, -3.7582e-02, 1.2974e-01, -9.4476e-02, 8.4777e-03, 1.2249e-01, -1.2270e-01, 8.5391e-02], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn2.running_var&#39;, tensor([0.0202, 0.0092, 0.0153, 0.0150, 0.0106, 0.0121, 0.0155, 0.0059, 0.0041, 0.0068, 0.0118, 0.0300, 0.0073, 0.0143, 0.0117, 0.0092, 0.0155, 0.0116, 0.0136, 0.0066, 0.0115, 0.0137, 0.0161, 0.0206, 0.0039, 0.0164, 0.0505, 0.0176, 0.0190, 0.0158, 0.0187, 0.0246, 0.0135, 0.0193, 0.0165, 0.0152, 0.0117, 0.0235, 0.0143, 0.0076, 0.0212, 0.0147, 0.0136, 0.0103, 0.0188, 0.0135, 0.0260, 0.0206, 0.0165, 0.0109, 0.0135, 0.0102, 0.0222, 0.0281, 0.0106, 0.0041, 0.0111, 0.0091, 0.0211, 0.0088, 0.0137, 0.0128, 0.0109, 0.0268], device=&#39;cuda:0&#39;)), (&#39;0.4.2.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.0.conv1.weight&#39;, tensor([[[[-7.4187e-03, 6.2212e-04, -6.7807e-03], [-2.3790e-02, 3.4096e-02, -4.9927e-02], [-2.0869e-02, 3.4507e-03, -2.4535e-02]], [[-1.1464e-02, -1.3849e-03, -1.0704e-03], [-9.6032e-03, 9.6008e-03, 9.6038e-03], [-3.8007e-02, -4.8571e-03, 1.8663e-03]], [[ 4.0224e-04, 3.6549e-02, -4.2570e-02], [-4.6914e-02, 4.5465e-02, -3.6883e-02], [-6.1375e-02, 2.3815e-02, -2.7301e-02]], ..., [[-2.6546e-03, -2.9761e-03, -1.3573e-02], [-2.1086e-02, -2.2356e-02, -1.0954e-02], [ 1.2671e-02, -7.9245e-03, 1.7942e-03]], [[-5.6177e-03, 1.4816e-03, -2.1322e-02], [ 5.0165e-02, -2.2182e-02, 2.8947e-02], [ 4.2009e-02, -1.9106e-02, 1.9416e-02]], [[-1.8032e-02, -4.5850e-03, 2.5289e-02], [-2.4404e-02, -4.2853e-02, 2.8969e-02], [-1.6584e-02, -5.7180e-02, 1.5592e-02]]], [[[ 3.8200e-02, 1.2430e-01, 1.1340e-01], [-9.4878e-03, -1.9263e-02, -7.7663e-02], [-2.7920e-02, 4.8918e-03, 2.2388e-02]], [[-2.9344e-03, 1.9958e-02, 8.1671e-03], [-1.7660e-02, -1.6214e-02, -2.2974e-02], [-1.8250e-02, -2.0149e-02, -7.1198e-03]], [[-5.9130e-03, -1.5876e-03, 1.7138e-02], [ 2.8892e-04, 1.5019e-02, -1.4799e-03], [ 4.5373e-02, 3.3112e-02, -7.4405e-03]], ..., [[ 5.5507e-03, 8.5807e-03, -5.8508e-03], [ 2.6819e-03, -1.4614e-03, -2.9870e-02], [-1.0932e-03, -2.0145e-02, 4.4390e-02]], [[ 4.0049e-02, 6.9310e-02, 4.2085e-02], [-7.5571e-02, -9.5208e-02, -3.7911e-02], [ 1.8651e-02, 7.0515e-02, 4.4939e-02]], [[ 9.8676e-02, 5.7983e-02, 4.0864e-02], [-1.3611e-02, -5.5284e-02, -3.7893e-02], [ 1.9160e-02, 9.0856e-03, 3.1530e-02]]], [[[-2.4447e-04, -1.5879e-02, -2.3922e-02], [-1.3339e-02, -1.4642e-02, -2.8622e-02], [-2.1940e-02, -9.5824e-03, 1.2744e-02]], [[ 6.8647e-03, -1.0276e-02, -2.1301e-02], [ 2.8689e-02, 1.8463e-02, -1.6690e-02], [ 3.6498e-02, 4.3354e-02, 1.7960e-02]], [[-1.2903e-02, 7.3889e-03, 2.1758e-02], [-1.4780e-02, 2.6203e-02, 5.3623e-02], [ 2.4670e-03, -1.8774e-03, 3.0332e-02]], ..., [[-1.2068e-02, 3.0517e-02, 3.7144e-02], [-2.3315e-02, -1.7876e-03, 4.6061e-02], [-4.6575e-02, -1.4225e-02, -6.6445e-03]], [[-1.8578e-02, -1.3299e-02, 4.2167e-02], [-4.7775e-02, -5.4953e-03, 1.7650e-02], [-1.0046e-02, -1.7007e-02, -8.4111e-04]], [[ 2.7987e-02, 3.3600e-02, 4.9452e-02], [ 1.1499e-02, 2.0000e-02, 3.1282e-02], [ 2.7117e-02, 3.2509e-02, 2.1273e-02]]], ..., [[[-1.6728e-02, -4.0770e-03, -3.2645e-02], [-5.2354e-03, 2.7390e-02, -3.8789e-02], [-1.0238e-02, -2.5828e-02, -3.1134e-02]], [[ 2.8986e-02, -3.0412e-02, 1.0815e-02], [ 1.5884e-02, -4.4536e-02, 2.4509e-03], [-3.2079e-02, -2.4494e-02, -2.0484e-02]], [[-8.0866e-02, -3.9966e-03, 5.6676e-02], [ 6.4748e-02, -1.7775e-01, 1.1163e-01], [ 1.1318e-01, -4.3008e-02, -4.2821e-02]], ..., [[ 5.2136e-02, -5.1743e-02, 1.1130e-02], [ 6.4167e-02, -2.8433e-02, -5.5279e-02], [-3.0951e-02, 6.8362e-02, -4.9804e-02]], [[-2.4569e-02, 1.1952e-01, -1.1609e-01], [-1.6852e-01, 1.0203e-01, 2.8500e-02], [ 4.2400e-02, -1.1240e-01, 1.4795e-01]], [[-2.0620e-03, 2.9423e-02, 6.3876e-03], [-2.0534e-02, 1.4794e-03, -3.9275e-05], [ 7.3602e-04, 2.7509e-03, 5.0103e-02]]], [[[-2.8271e-02, -7.4348e-02, -3.0008e-02], [-2.8259e-02, -4.2851e-02, 8.7793e-03], [ 1.4292e-02, 7.3599e-03, 1.8989e-02]], [[-1.7713e-02, -2.6316e-03, 2.6483e-02], [-1.2562e-02, 1.6206e-03, 4.3998e-02], [-1.5561e-02, -4.4155e-03, 1.5739e-02]], [[-3.9953e-03, -1.0811e-02, -2.2205e-03], [-2.2232e-02, -1.9635e-02, -2.1201e-02], [-6.2389e-03, 5.4740e-02, 5.7495e-02]], ..., [[ 6.0228e-03, 4.4675e-03, -1.9686e-02], [ 5.7634e-03, -4.9598e-03, -6.7462e-03], [-1.6985e-02, 3.8074e-04, -1.1804e-02]], [[-1.8817e-02, 1.3877e-02, 4.1737e-02], [-3.5288e-03, 6.2555e-02, 5.5838e-02], [ 4.9367e-02, 5.9948e-02, 3.9035e-02]], [[ 3.8640e-02, 6.9761e-02, 4.9433e-02], [ 3.2310e-02, 3.0482e-02, 5.8202e-03], [-9.7514e-03, -2.2561e-02, -4.0284e-02]]], [[[-1.0858e-02, -1.5657e-02, -5.5779e-03], [-1.4548e-02, -4.1126e-03, -3.3421e-02], [ 1.8470e-02, -3.0541e-02, -6.9992e-02]], [[ 1.3507e-05, 5.4718e-03, 3.2258e-02], [-1.4417e-02, 5.6782e-03, 3.5700e-02], [-1.2255e-02, -1.0014e-02, 8.4416e-03]], [[ 2.3432e-02, 8.4511e-03, -1.0074e-02], [ 2.1704e-03, -3.9563e-02, -4.6783e-02], [-4.3303e-03, -2.1372e-02, 2.2191e-03]], ..., [[ 1.9042e-02, 1.0032e-02, 1.4562e-02], [-6.4973e-03, 2.1837e-02, 1.4887e-02], [ 6.2191e-04, 9.2222e-04, 1.7597e-02]], [[ 2.9403e-02, -4.9606e-03, -3.9945e-02], [ 5.0174e-02, -3.8640e-02, -2.7190e-02], [ 2.2974e-02, 3.5070e-03, -2.6505e-02]], [[-2.4248e-02, -2.1269e-02, -7.8527e-03], [-1.3615e-02, 9.2987e-03, 6.6217e-03], [-1.1455e-02, 4.4190e-03, 1.2119e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn1.weight&#39;, tensor([0.2600, 0.2876, 0.1752, 0.2383, 0.2747, 0.2706, 0.2870, 0.2809, 0.2571, 0.2363, 0.3254, 0.2580, 0.2811, 0.2684, 0.2615, 0.2339, 0.2612, 0.2981, 0.2839, 0.2573, 0.1604, 0.2429, 0.2922, 0.2962, 0.2851, 0.3303, 0.2753, 0.2772, 0.2543, 0.2586, 0.2374, 0.3047, 0.2501, 0.2849, 0.1831, 0.2287, 0.2102, 0.2896, 0.3055, 0.2407, 0.2684, 0.2482, 0.2982, 0.2799, 0.2789, 0.2463, 0.2155, 0.3050, 0.3153, 0.2846, 0.2472, 0.3067, 0.2739, 0.2866, 0.2537, 0.2957, 0.2696, 0.3328, 0.2464, 0.2853, 0.2676, 0.2816, 0.2894, 0.2604, 0.1798, 0.3088, 0.1820, 0.2983, 0.2980, 0.2820, 0.2658, 0.1845, 0.3175, 0.3090, 0.2645, 0.2566, 0.3224, 0.2762, 0.2706, 0.2639, 0.2766, 0.2485, 0.2636, 0.2398, 0.2922, 0.2532, 0.3061, 0.2922, 0.2649, 0.2052, 0.2871, 0.3100, 0.2590, 0.3063, 0.2960, 0.2640, 0.2559, 0.2623, 0.2720, 0.2684, 0.2568, 0.2706, 0.2753, 0.2844, 0.2583, 0.2542, 0.2540, 0.2480, 0.2635, 0.2450, 0.1509, 0.2477, 0.2698, 0.3279, 0.2602, 0.2706, 0.2710, 0.2838, 0.2518, 0.2799, 0.2606, 0.2731, 0.2620, 0.2409, 0.3062, 0.2832, 0.2329, 0.2223], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn1.bias&#39;, tensor([-0.0833, -0.0942, 0.2854, -0.0421, -0.1003, -0.0764, -0.0986, -0.0787, -0.0674, -0.0150, -0.1743, -0.0462, -0.0720, -0.0532, -0.0270, -0.0368, -0.0549, -0.1228, -0.0825, -0.0485, 0.2039, -0.0022, -0.1075, -0.0915, -0.0663, -0.1328, -0.1148, -0.1302, -0.0457, -0.0486, 0.0366, -0.0847, -0.0666, -0.1090, 0.1934, -0.0496, 0.1061, -0.1620, -0.0595, 0.0082, -0.0732, -0.0539, -0.1224, -0.0695, -0.1172, -0.0633, 0.0583, -0.1404, -0.1415, -0.0600, -0.0504, -0.1089, -0.1222, -0.1361, -0.0377, -0.0825, -0.0927, -0.1532, 0.0215, -0.1014, -0.0513, -0.0990, -0.0678, -0.0806, 0.1113, -0.1107, 0.0770, -0.0594, -0.0770, -0.1014, -0.0786, 0.1126, -0.1589, -0.1452, -0.0830, -0.0554, -0.1621, -0.0530, -0.0747, -0.0705, -0.0875, -0.0363, -0.0450, -0.0355, -0.0651, 0.0145, -0.0887, -0.1392, -0.0332, 0.0180, -0.2250, -0.1398, -0.0462, -0.2667, -0.1061, -0.0695, -0.0679, -0.0096, -0.0932, -0.0711, -0.0500, -0.0763, -0.0508, -0.0713, -0.0226, -0.0174, -0.1262, -0.0442, -0.1082, -0.0386, 0.3662, -0.0416, -0.0560, -0.1610, -0.0691, -0.0900, -0.0927, -0.1000, -0.0745, -0.1007, -0.0642, -0.0653, -0.0882, -0.0090, -0.1052, -0.0710, 0.0159, 0.1297], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn1.running_mean&#39;, tensor([-3.7947e-01, -3.1928e-01, -5.5112e-01, 1.0358e-01, -3.6725e-01, -2.2969e-01, -9.3294e-01, 1.4772e-01, 2.7947e-01, 1.4982e-01, -8.2066e-01, -5.0445e-01, -2.0762e-01, 3.3920e-01, -5.4892e-01, -4.8034e-01, 5.5093e-02, -3.3913e-01, 6.5061e-02, 1.5491e-02, 4.7467e-01, -5.8419e-01, 3.6653e-02, -3.6295e-01, 9.7562e-03, 2.2967e-03, -2.5015e-01, -3.1155e-01, -6.9542e-01, -4.0693e-01, -1.4183e-01, -2.6500e-01, -2.1180e-04, -3.9560e-01, 2.7008e-02, -1.9820e-01, -6.9186e-01, -7.8685e-01, -2.0763e-01, 2.0399e-01, -9.7651e-01, -4.7452e-01, 1.5026e-01, 2.0246e-01, 3.2271e-01, 5.3137e-01, -5.4829e-01, -9.2125e-01, 7.6447e-02, 1.4242e-01, -7.0674e-02, 1.3194e-01, -6.2779e-01, -5.0141e-01, -2.5173e-01, -5.7818e-02, -2.3646e-01, 1.2917e-02, 6.6042e-01, -3.1510e-01, 1.1080e-01, 1.2161e-01, 2.1386e-01, 3.3187e-01, -2.4455e-01, 2.8957e-01, 8.7351e-01, -4.5043e-01, -4.2762e-02, -6.9726e-01, -3.7837e-01, -1.7546e+00, -2.7454e-01, -3.3517e-01, -5.0307e-01, 2.6088e-02, 1.4760e-01, -4.5101e-01, -4.7433e-01, -5.6620e-01, -2.3706e-01, -1.1838e-01, -4.0402e-01, -3.3247e-01, -3.4379e-01, 9.8657e-01, -1.5585e-01, 1.3087e-01, -5.6659e-03, 8.3780e-01, -4.1457e-01, -1.0975e-03, -2.9565e-01, 5.7508e-01, -1.1516e-01, 4.2260e-01, -5.1656e-01, 4.5130e-01, 7.5604e-03, -2.1929e-01, 1.9033e-02, -2.2974e-01, -4.0320e-01, -6.4143e-01, -4.6839e-01, -1.0168e+00, 2.0154e+00, 7.1565e-02, 8.0118e-02, -2.1928e-01, -2.0341e+00, -6.3655e-01, -5.8990e-01, 2.2274e-01, -3.0708e-01, 1.0489e-01, 1.6920e-01, 7.4072e-01, 1.4595e-01, -2.2812e-01, 7.6189e-01, -1.3150e-01, -1.1014e+00, 8.8866e-02, 2.0691e-01, -1.4928e-01, 1.9827e-02, -9.5390e-01], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn1.running_var&#39;, tensor([0.3933, 0.6134, 1.2628, 0.9750, 0.6904, 0.6723, 0.4668, 0.5449, 0.5454, 0.4420, 0.5674, 0.6976, 0.7020, 0.5808, 0.6901, 0.6195, 0.4826, 0.2744, 0.6128, 0.7459, 0.2437, 0.5954, 0.5834, 0.8587, 0.7279, 1.2348, 0.7543, 0.5904, 0.5944, 0.6803, 0.9539, 0.5908, 0.4563, 0.4938, 0.4587, 0.4162, 0.9113, 0.4501, 1.2163, 0.6362, 0.5322, 0.5020, 0.6209, 0.6449, 0.5146, 0.3873, 0.7506, 0.5830, 0.5574, 1.0503, 0.4252, 0.2546, 0.6002, 0.5231, 0.6127, 0.8366, 0.6927, 0.2866, 1.1464, 0.6132, 0.5972, 0.4638, 0.7565, 0.5243, 0.5624, 0.7124, 0.3970, 1.3623, 0.6161, 0.5986, 0.6165, 0.4907, 0.4992, 0.5845, 0.5646, 0.8537, 0.5870, 0.8655, 0.6185, 0.4451, 0.6690, 0.4983, 0.6551, 0.4635, 0.7430, 0.4780, 0.7660, 0.5145, 0.5672, 0.5289, 0.3720, 0.6571, 0.3109, 0.1759, 0.6436, 0.6893, 0.6016, 0.9774, 0.6203, 0.5355, 0.5976, 0.5916, 0.7573, 0.5425, 0.7502, 0.6509, 0.3262, 0.5838, 0.4153, 0.5102, 0.8387, 0.4999, 0.7342, 0.6488, 0.7156, 0.6114, 0.5606, 0.5708, 0.4694, 0.6441, 0.3673, 0.6036, 0.5949, 0.7310, 0.5961, 0.6760, 0.7520, 0.8401], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.0.conv2.weight&#39;, tensor([[[[-4.6677e-03, -2.4692e-02, 2.5052e-02], [ 7.1571e-03, -2.0834e-02, 4.2877e-02], [ 1.7543e-03, -6.8529e-03, 3.7504e-03]], [[ 9.7906e-03, 1.2876e-02, 3.6262e-02], [-5.4385e-02, -2.8080e-02, 5.2638e-02], [-4.5546e-04, -3.8280e-02, 1.9056e-02]], [[-1.5753e-02, -2.1945e-02, 8.3131e-03], [ 4.0821e-02, -1.1810e-01, -2.7844e-02], [ 1.9802e-02, -6.2872e-02, 5.1846e-03]], ..., [[ 8.2198e-03, 1.8025e-02, 2.0375e-02], [-2.5454e-02, 1.4031e-02, 2.4443e-02], [ 1.1981e-02, 1.8269e-02, -8.0132e-03]], [[ 2.9594e-03, 3.9520e-02, -1.0877e-02], [ 1.5541e-02, 4.4206e-02, -3.8783e-03], [ 1.8739e-02, 1.3264e-03, -1.0723e-02]], [[-4.5669e-03, 1.3569e-02, -1.0052e-02], [-3.5158e-02, -3.1317e-02, 1.1961e-02], [ 6.0711e-03, -3.6016e-03, -1.2074e-02]]], [[[ 3.1239e-03, -9.0906e-04, 3.6158e-03], [-3.5276e-03, -5.9320e-03, -4.1787e-03], [-4.9851e-03, -6.3492e-03, 1.6848e-03]], [[ 5.5298e-03, -7.0927e-04, 6.9775e-03], [-6.7800e-03, -3.2676e-03, -3.8349e-03], [ 2.5917e-03, 3.3175e-03, 7.0853e-03]], [[ 8.0823e-03, 1.6111e-03, 4.6504e-03], [ 3.8894e-03, 8.1087e-04, -3.1979e-03], [-2.8502e-03, 3.7218e-03, -1.9898e-03]], ..., [[-6.7479e-03, 1.0887e-03, 7.0493e-03], [ 1.1557e-02, -1.4221e-02, 9.9080e-03], [ 5.2288e-03, -1.1593e-04, -9.3496e-04]], [[-4.4423e-03, 4.4936e-03, -2.0891e-03], [ 2.5950e-03, -5.5063e-03, -3.4027e-03], [-9.3430e-03, 1.5017e-03, -1.9006e-03]], [[-1.0423e-03, 4.6984e-03, 7.1337e-03], [ 3.9866e-05, -3.2607e-03, 5.0460e-03], [-4.8433e-03, 1.8513e-03, -1.8918e-03]]], [[[-1.0328e-02, -2.7630e-02, -1.6031e-02], [-2.2751e-02, -4.0653e-02, -3.0693e-02], [ 1.7441e-04, -1.0294e-03, -1.2047e-02]], [[-1.1178e-02, 1.3554e-03, -3.0963e-03], [-5.9012e-03, -2.9645e-02, -5.2359e-03], [-3.1251e-02, -1.6552e-02, 2.1127e-02]], [[ 2.8153e-02, 4.8094e-03, 5.1148e-02], [-1.0080e-01, -1.7317e-01, -1.4303e-03], [-5.1768e-02, -4.1405e-02, 8.3916e-02]], ..., [[ 3.8864e-03, 1.2671e-02, 8.9272e-03], [ 1.5374e-02, -9.1063e-03, -5.2230e-02], [-6.4478e-03, 2.5892e-03, 2.6897e-03]], [[-1.0989e-05, -1.0977e-02, -2.3793e-02], [ 3.7720e-03, 1.9226e-02, -3.4758e-02], [ 3.1568e-03, -7.3410e-02, -3.3857e-03]], [[-1.3399e-02, -3.0873e-02, 1.7192e-02], [-1.3425e-02, 1.0464e-02, 3.5200e-02], [-1.0048e-02, -1.7762e-02, 3.0979e-02]]], ..., [[[-1.7316e-02, -5.9968e-02, -3.2081e-02], [-3.1547e-02, -4.0428e-02, -2.1457e-02], [-1.7992e-02, -1.6002e-02, -2.6777e-02]], [[ 7.0103e-03, 1.4409e-02, 4.4640e-03], [ 2.2041e-02, 3.5212e-02, -4.0407e-03], [-1.6237e-02, -6.7860e-03, -3.5450e-02]], [[ 8.2079e-02, 1.1202e-01, 7.3164e-02], [-1.0923e-02, 2.5116e-02, 1.8955e-02], [-6.7783e-02, -1.0402e-01, -1.0911e-01]], ..., [[-3.4808e-03, -1.7869e-03, -1.4315e-02], [-1.2216e-02, -7.1241e-03, 1.5779e-02], [ 1.1692e-02, -3.5236e-03, -1.8558e-02]], [[ 2.2342e-02, 2.1617e-02, -4.9508e-03], [ 1.5843e-02, 2.0716e-02, 2.3160e-02], [-1.8201e-03, 4.1293e-02, 5.0035e-02]], [[ 1.6211e-02, 9.0000e-03, 1.5996e-02], [-2.1080e-02, -1.0757e-02, -6.2794e-03], [-1.0856e-02, 2.7720e-03, 9.0333e-03]]], [[[ 4.4165e-03, 5.0888e-02, 3.2076e-02], [ 2.4682e-02, 6.2129e-02, 3.6723e-02], [ 5.4922e-03, 3.2766e-02, 5.6122e-02]], [[ 8.5701e-03, -2.8127e-03, -6.1371e-03], [ 1.5237e-02, 5.2393e-02, 1.2908e-02], [-3.4212e-03, 1.5024e-02, 2.7514e-02]], [[-7.3277e-04, 4.9771e-02, 3.6194e-03], [-2.5238e-03, 3.5809e-02, 8.5528e-04], [-9.3814e-03, 4.2717e-02, 3.3918e-03]], ..., [[-8.4116e-04, -2.2839e-02, 1.1734e-02], [ 1.2659e-02, -1.0700e-02, -4.1650e-03], [-1.1049e-03, -1.3967e-02, -1.6552e-02]], [[-3.1401e-02, -2.7568e-02, -1.4917e-02], [-9.0787e-03, -3.3744e-02, -1.9107e-02], [-1.5033e-02, -4.6981e-02, -3.6583e-02]], [[-2.5389e-02, -3.5652e-03, 2.8840e-02], [-1.9741e-02, -2.3877e-02, -3.3623e-03], [-2.5591e-02, 6.9017e-03, -6.0236e-03]]], [[[-1.7669e-02, 1.3538e-02, -1.7157e-03], [-1.1787e-02, 5.0979e-02, 7.1112e-04], [-3.2606e-03, -1.8135e-02, 4.4519e-03]], [[-2.4957e-03, 1.4084e-03, -5.9751e-04], [ 2.3195e-02, 1.7915e-01, 1.0963e-01], [ 3.5013e-02, 9.6800e-02, 2.2628e-02]], [[-4.9155e-02, -5.4548e-03, -1.1942e-02], [ 1.5677e-03, -5.9815e-02, 1.9029e-02], [ 1.1887e-02, -3.1848e-02, 1.6915e-02]], ..., [[ 2.1538e-02, 3.9111e-02, 2.4464e-02], [ 4.4035e-02, 1.1924e-01, 5.3032e-02], [ 1.9641e-02, 7.4077e-02, 5.1842e-02]], [[-5.0069e-02, -1.2993e-02, -1.2138e-02], [ 1.6335e-02, 4.5994e-02, -3.4283e-03], [ 5.8718e-03, 1.6609e-02, 2.3753e-02]], [[-1.7191e-03, -2.1520e-02, -5.8409e-02], [ 8.5500e-04, -5.3904e-03, 1.0493e-02], [ 1.7785e-02, -2.9564e-03, -9.1699e-04]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn2.weight&#39;, tensor([ 0.3756, 0.0110, 0.1872, 0.2692, 0.3435, 0.4151, 0.1314, 0.1230, 0.1169, 0.3225, 0.1193, 0.1704, 0.3544, 0.1885, 0.1261, 0.2829, 0.3889, 0.4282, 0.1223, 0.0043, 0.4312, 0.2019, 0.3654, 0.0783, 0.2569, 0.3120, 0.3606, 0.2201, 0.1247, 0.4021, 0.4373, 0.3806, 0.1986, 0.1272, 0.6408, 0.1868, 0.2513, 0.2293, 0.3305, 0.0843, 0.5417, 0.2745, 0.1362, 0.2028, 0.3396, 0.1730, 0.4191, 0.2251, 0.2480, 0.1516, 0.3362, 0.2562, 0.0994, 0.0092, 0.2533, 0.2238, 0.2218, 0.2770, 0.1408, 0.0704, 0.0558, 0.4081, 0.2546, 0.2982, 0.1147, 0.2723, 0.1088, 0.2573, 0.0551, 0.2779, 0.2866, 0.2663, 0.4701, 0.3151, 0.4187, 0.4357, -0.0077, 0.1749, 0.0115, 0.2250, 0.1203, 0.2605, 0.2997, 0.2949, 0.3757, 0.2748, 0.3054, 0.0474, 0.3102, 0.4406, 0.1031, 0.2278, 0.3075, 0.3281, 0.2699, 0.4008, 0.4400, 0.3097, 0.5570, 0.2844, 0.3228, 0.3023, 0.2638, 0.3803, 0.1215, 0.3726, 0.2589, 0.4148, 0.0561, 0.3048, 0.4218, 0.0357, 0.2883, 0.1356, 0.3078, 0.4554, 0.0373, 0.2972, 0.2436, 0.2827, 0.2721, 0.1035, 0.3044, 0.2512, 0.2203, 0.2379, 0.3180, 0.2929], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn2.bias&#39;, tensor([-0.0693, 0.2193, 0.0668, 0.0769, 0.1339, -0.0124, 0.1152, 0.0333, 0.2351, 0.0931, 0.1754, 0.2030, 0.0613, 0.2217, 0.1029, 0.0809, 0.0850, 0.0221, 0.0651, 0.2859, -0.1143, 0.0228, 0.0903, 0.0531, 0.0703, -0.0046, 0.0855, -0.0400, 0.1826, 0.0591, 0.0833, 0.0503, 0.1181, 0.2225, -0.1420, -0.0030, 0.1096, 0.0738, 0.0084, 0.1066, -0.0978, 0.0334, 0.0873, 0.1669, -0.0970, 0.0070, -0.0261, 0.1026, 0.0861, 0.0431, -0.1247, 0.0260, 0.2310, 0.2761, 0.0772, 0.0786, 0.0164, 0.0362, 0.1002, -0.0854, 0.0476, 0.0494, 0.0627, 0.0069, 0.0146, -0.0143, -0.0286, 0.0544, 0.1965, 0.0139, 0.0376, 0.0737, -0.1298, 0.0928, 0.0212, -0.0203, 0.1391, 0.1324, 0.1258, 0.1202, 0.0181, 0.0777, 0.0296, 0.1062, 0.0094, -0.0176, -0.0685, 0.1924, 0.0350, -0.0184, 0.0409, 0.1039, 0.0911, 0.0351, 0.1777, 0.1117, -0.0929, -0.0402, -0.0858, 0.1551, 0.0743, 0.0418, 0.0978, -0.0129, 0.1434, 0.0108, 0.1168, -0.0167, 0.1008, 0.0038, 0.0255, 0.1190, 0.0838, 0.0699, 0.0212, -0.1108, 0.1018, 0.2025, 0.0995, 0.0612, 0.0881, 0.1409, 0.0728, 0.2046, 0.0579, 0.0863, -0.0346, 0.1855], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn2.running_mean&#39;, tensor([-0.0339, -0.0063, 0.0980, -0.3649, -0.3509, -0.0915, -0.0551, 0.0945, 0.0510, -0.0220, 0.1813, -0.4954, 0.4577, -0.1776, 0.0023, -0.3410, -0.1973, 0.0248, -0.1606, -0.0026, 0.3787, -0.0838, -0.0519, -0.0158, -0.2146, 0.1389, -0.6211, -0.0714, -0.0271, -0.0863, -0.2637, -0.2270, -0.1455, -0.2313, -0.6951, -0.0086, 0.1821, 0.0663, 0.1480, -0.1448, -0.3907, -0.1795, -0.0461, 0.2669, -0.1648, -0.1398, -0.1521, -0.4338, -0.0691, 0.0584, 0.0439, 0.0360, -0.2660, -0.0229, 0.1187, 0.0428, 0.0860, -0.0224, 0.2847, 0.0483, -0.1900, -0.2128, -0.0693, 0.0209, -0.0560, -0.1349, 0.1213, -0.0414, 0.0642, -0.1001, -0.0912, -0.3145, -0.0960, -0.0375, -0.2439, -0.0407, -0.0266, -0.1559, -0.0728, -0.3561, -0.0411, -0.0274, -0.2618, 0.0030, 0.0028, 0.0625, -0.0541, 0.0085, -0.1931, 0.0306, -0.0070, -0.0256, -0.2960, -0.0834, -0.0153, -0.4720, -0.2646, -0.1322, -0.6371, -0.2046, -0.0236, -0.2652, -0.1128, -0.0614, -0.3486, 0.1788, -0.3745, -0.1427, 0.0068, 0.0607, -0.2515, -0.0200, -0.0813, -0.1102, -0.1779, -0.0236, -0.1002, 0.0385, -0.1036, 0.0048, -0.3844, -0.0042, -0.0528, -0.2057, -0.0123, -0.0048, -0.4699, -0.0863], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn2.running_var&#39;, tensor([0.0414, 0.0044, 0.0454, 0.0534, 0.1306, 0.0524, 0.0289, 0.0115, 0.0254, 0.0550, 0.0365, 0.0498, 0.0720, 0.0408, 0.0336, 0.0341, 0.0463, 0.0318, 0.0130, 0.0039, 0.0290, 0.0245, 0.0657, 0.0091, 0.0392, 0.0385, 0.1047, 0.0201, 0.0127, 0.0508, 0.0659, 0.0366, 0.0375, 0.0244, 0.0624, 0.0204, 0.0546, 0.0291, 0.0393, 0.0128, 0.0804, 0.0457, 0.0187, 0.0334, 0.0171, 0.0159, 0.0710, 0.0340, 0.0281, 0.0112, 0.0230, 0.0600, 0.0185, 0.0047, 0.0457, 0.0424, 0.0294, 0.0308, 0.0269, 0.0056, 0.0110, 0.0624, 0.0271, 0.0404, 0.0285, 0.0303, 0.0092, 0.0329, 0.0045, 0.0219, 0.0356, 0.0400, 0.0473, 0.0490, 0.0685, 0.0341, 0.0039, 0.0181, 0.0039, 0.0279, 0.0076, 0.0475, 0.0529, 0.0458, 0.0443, 0.0222, 0.0245, 0.0046, 0.0318, 0.0519, 0.0099, 0.0372, 0.0505, 0.0376, 0.0718, 0.1146, 0.0280, 0.0286, 0.0635, 0.0479, 0.0607, 0.0422, 0.0346, 0.0489, 0.0323, 0.0399, 0.0503, 0.0496, 0.0066, 0.0378, 0.0459, 0.0037, 0.0386, 0.0270, 0.0216, 0.0326, 0.0042, 0.0405, 0.0435, 0.0497, 0.0873, 0.0282, 0.0428, 0.0318, 0.0281, 0.0427, 0.0212, 0.0476], device=&#39;cuda:0&#39;)), (&#39;0.5.0.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.0.downsample.0.weight&#39;, tensor([[[[-0.0083]], [[-0.1087]], [[ 0.0451]], ..., [[ 0.0282]], [[ 0.0107]], [[ 0.0977]]], [[[-0.0027]], [[-0.0127]], [[ 0.0094]], ..., [[ 0.0236]], [[ 0.0408]], [[ 0.0383]]], [[[ 0.0202]], [[-0.0324]], [[-0.0252]], ..., [[-0.1646]], [[-0.0062]], [[-0.0179]]], ..., [[[ 0.0304]], [[-0.0132]], [[ 0.0205]], ..., [[-0.0035]], [[-0.0260]], [[-0.2362]]], [[[ 0.0742]], [[ 0.0008]], [[-0.0075]], ..., [[-0.0072]], [[ 0.0506]], [[-0.0350]]], [[[-0.0981]], [[ 0.0297]], [[-0.0065]], ..., [[ 0.0124]], [[ 0.0292]], [[-0.0684]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.0.downsample.1.weight&#39;, tensor([0.1686, 0.3634, 0.4073, 0.0763, 0.2065, 0.1372, 0.3126, 0.1471, 0.2133, 0.1525, 0.3244, 0.4202, 0.2549, 0.3820, 0.3611, 0.2952, 0.1549, 0.1117, 0.3602, 0.3938, 0.1471, 0.0958, 0.0860, 0.1458, 0.2623, 0.1825, 0.1782, 0.1840, 0.1947, 0.1099, 0.0722, 0.2316, 0.2816, 0.3727, 0.0981, 0.0852, 0.0371, 0.3154, 0.2970, 0.2670, 0.1319, 0.4059, 0.1236, 0.0400, 0.1095, 0.4822, 0.1433, 0.1783, 0.1246, 0.2969, 0.1534, 0.3724, 0.3422, 0.5024, 0.2383, 0.2916, 0.2225, 0.2298, 0.3676, 0.5647, 0.5296, 0.0553, 0.1133, 0.3535, 0.3465, 0.3751, 0.2104, 0.0825, 0.3231, 0.0732, 0.1818, 0.3255, 0.1677, 0.1698, 0.0774, 0.1528, 0.4440, 0.2684, 0.4095, 0.1173, 0.3341, 0.4218, 0.4104, 0.1235, 0.0829, 0.2268, 0.1761, 0.3379, 0.2441, 0.1273, 0.1877, 0.1701, 0.0804, 0.1384, 0.0198, 0.0238, 0.0423, 0.2250, 0.0326, 0.0086, 0.0405, 0.3070, 0.1655, 0.0591, 0.3364, 0.4352, 0.2000, 0.1436, 0.5515, 0.3396, 0.0814, 0.1758, 0.1313, 0.3166, 0.0993, 0.1427, 0.1229, 0.0258, 0.0577, 0.0967, 0.2911, 0.3480, 0.1390, 0.1151, 0.3073, 0.1966, 0.1550, 0.0764], device=&#39;cuda:0&#39;)), (&#39;0.5.0.downsample.1.bias&#39;, tensor([-0.0693, 0.2193, 0.0668, 0.0769, 0.1339, -0.0124, 0.1152, 0.0333, 0.2351, 0.0931, 0.1754, 0.2030, 0.0613, 0.2217, 0.1029, 0.0809, 0.0850, 0.0221, 0.0651, 0.2859, -0.1143, 0.0228, 0.0903, 0.0531, 0.0703, -0.0046, 0.0855, -0.0400, 0.1826, 0.0591, 0.0833, 0.0503, 0.1181, 0.2225, -0.1420, -0.0030, 0.1096, 0.0738, 0.0084, 0.1066, -0.0978, 0.0334, 0.0873, 0.1669, -0.0970, 0.0070, -0.0261, 0.1026, 0.0861, 0.0431, -0.1247, 0.0260, 0.2310, 0.2761, 0.0772, 0.0786, 0.0164, 0.0362, 0.1002, -0.0854, 0.0476, 0.0494, 0.0627, 0.0069, 0.0146, -0.0143, -0.0286, 0.0544, 0.1965, 0.0139, 0.0376, 0.0737, -0.1298, 0.0928, 0.0212, -0.0203, 0.1391, 0.1324, 0.1258, 0.1202, 0.0181, 0.0777, 0.0296, 0.1062, 0.0094, -0.0176, -0.0685, 0.1924, 0.0350, -0.0184, 0.0409, 0.1039, 0.0911, 0.0351, 0.1777, 0.1117, -0.0929, -0.0402, -0.0858, 0.1551, 0.0743, 0.0418, 0.0978, -0.0129, 0.1434, 0.0108, 0.1168, -0.0167, 0.1008, 0.0038, 0.0255, 0.1190, 0.0838, 0.0699, 0.0212, -0.1108, 0.1018, 0.2025, 0.0995, 0.0612, 0.0881, 0.1409, 0.0728, 0.2046, 0.0579, 0.0863, -0.0346, 0.1855], device=&#39;cuda:0&#39;)), (&#39;0.5.0.downsample.1.running_mean&#39;, tensor([-8.0945e-02, 4.3252e-01, -1.4228e-02, 2.4158e-01, -1.4690e-01, -1.4731e-01, 7.2624e-01, 1.0260e-01, -4.0832e-01, 1.8961e-01, -7.6209e-01, 6.1054e-01, -5.1790e-02, -1.7607e-01, 3.2980e-01, -1.0252e-01, 1.2761e-01, -3.3776e-01, 3.8659e-01, -2.6111e-01, 4.0183e-01, 1.1660e-01, -4.5265e-02, -1.4261e-01, -1.6882e-01, -1.7379e-01, 4.0286e-01, -2.6969e-02, -6.0047e-01, 4.0343e-01, 2.0161e-01, -1.8980e-01, -2.5866e-01, -3.9547e-01, 3.0612e-01, -4.3981e-01, -8.5202e-02, -1.5457e-01, -1.5197e-01, 3.5200e-01, 2.2102e-01, -1.5146e-01, -1.3395e-01, -2.3328e-01, 2.0702e-01, 2.3020e-01, -9.4098e-03, -3.8067e-01, 1.4885e-01, -1.1813e-01, -7.0944e-02, 5.1824e-03, -8.8616e-01, 4.9062e-01, 5.1735e-02, 4.0176e-01, -3.0407e-01, -1.7087e-01, 1.5090e-01, -4.1481e-02, 1.1009e-01, 3.4742e-01, 3.1413e-01, 2.8358e-02, 9.4612e-01, -9.1641e-02, -1.4617e-01, 3.0157e-02, 1.6102e-01, 2.2436e-01, 3.1084e-01, -1.6945e-01, 1.1155e-01, 2.1388e-01, -2.1169e-01, -1.0542e-01, -3.9179e-02, 4.1638e-02, 1.7919e-01, 2.2100e-01, 7.7098e-01, -2.3887e-01, -2.8107e-01, 1.9011e-01, -2.5568e-01, -2.3169e-03, -3.1272e-05, -1.6044e-01, -2.1053e-01, -2.1548e-01, -3.8145e-01, -1.4321e-01, 3.3918e-01, -3.9146e-01, 4.3110e-02, 1.2222e-02, 7.6354e-02, -9.8565e-02, -4.0063e-02, 1.8999e-02, -2.5999e-01, -2.3831e-01, -4.2060e-01, -3.4689e-02, 4.0589e-01, 2.4841e-01, 2.7173e-01, 3.1858e-01, 1.3671e-01, -7.4376e-02, 2.1206e-01, -3.4997e-01, 3.2537e-01, 5.8624e-01, 1.6020e-01, -3.3253e-01, -4.4468e-01, 2.0502e-01, -1.7805e-01, 5.8891e-01, -5.3597e-01, -2.8620e-01, 4.2628e-02, 2.2623e-02, -6.2439e-01, -3.6643e-01, 1.5186e-01, -2.3041e-01], device=&#39;cuda:0&#39;)), (&#39;0.5.0.downsample.1.running_var&#39;, tensor([0.0557, 0.1745, 0.3573, 0.0225, 0.1850, 0.0490, 0.1674, 0.0405, 0.0516, 0.0480, 0.1741, 0.2441, 0.0860, 0.1892, 0.3274, 0.1006, 0.0328, 0.0298, 0.0842, 0.1601, 0.0303, 0.0262, 0.0286, 0.0283, 0.1421, 0.0569, 0.1106, 0.0495, 0.0583, 0.0386, 0.0248, 0.0555, 0.0908, 0.2428, 0.0237, 0.0177, 0.0167, 0.1153, 0.1352, 0.0832, 0.0297, 0.2440, 0.0511, 0.0131, 0.0168, 0.1403, 0.0643, 0.0761, 0.0376, 0.0400, 0.0283, 0.3138, 0.1637, 0.3991, 0.1069, 0.1373, 0.0593, 0.0774, 0.1904, 0.1834, 0.1514, 0.0145, 0.0358, 0.1626, 0.1414, 0.0856, 0.0346, 0.0284, 0.1190, 0.0150, 0.0754, 0.1667, 0.0438, 0.0875, 0.0257, 0.0277, 0.3798, 0.0718, 0.2201, 0.0373, 0.0521, 0.2691, 0.2244, 0.0436, 0.0466, 0.0449, 0.0367, 0.1008, 0.0717, 0.0366, 0.0486, 0.0609, 0.0357, 0.0335, 0.0095, 0.0132, 0.0037, 0.0531, 0.0053, 0.0098, 0.0172, 0.1213, 0.0672, 0.0157, 0.3070, 0.1148, 0.0709, 0.0449, 0.2846, 0.1916, 0.0307, 0.0446, 0.0401, 0.0781, 0.0171, 0.0485, 0.0343, 0.0122, 0.0265, 0.0457, 0.2420, 0.2268, 0.0530, 0.0459, 0.0919, 0.0609, 0.0241, 0.0294], device=&#39;cuda:0&#39;)), (&#39;0.5.0.downsample.1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.1.conv1.weight&#39;, tensor([[[[-1.1351e-02, -3.5435e-03, 1.2310e-02], [-1.5191e-02, -1.1108e-02, 2.2416e-03], [ 2.3133e-04, -1.4138e-02, -1.7708e-02]], [[-6.6203e-02, 6.2262e-02, 1.5414e-01], [-8.0135e-02, 1.8846e-02, 1.1877e-01], [-9.8742e-02, -6.9176e-02, -6.7370e-03]], [[ 7.9128e-03, 1.3046e-02, 1.2574e-02], [ 1.1444e-02, -3.9736e-03, 1.8765e-02], [-2.7725e-03, -1.0582e-02, 1.7131e-02]], ..., [[-1.0659e-02, -1.0478e-03, -6.4320e-03], [-1.8168e-02, -1.0104e-02, -1.0145e-02], [ 7.6104e-03, 6.8635e-04, -2.0969e-02]], [[-2.1942e-02, -2.5397e-02, -2.2036e-02], [-2.4586e-03, 2.1777e-04, -9.0369e-03], [ 9.2909e-03, 3.4494e-03, -1.2246e-02]], [[-1.5058e-02, -3.1980e-02, -2.5135e-02], [-1.6315e-02, -7.4819e-03, -3.5631e-03], [ 7.7515e-03, 9.8814e-04, -1.2966e-02]]], [[[-2.2153e-02, -2.8534e-03, -1.7548e-02], [-1.3659e-02, 2.0768e-02, 3.0630e-02], [-1.4126e-02, 1.1175e-02, 8.0187e-03]], [[-5.4791e-03, -1.2808e-02, 7.5085e-04], [-2.2454e-02, -4.0007e-02, -1.6242e-02], [-1.8407e-02, -3.2245e-02, -1.7601e-02]], [[-1.6960e-02, -8.3893e-04, 6.4857e-03], [-4.5513e-02, -3.0796e-02, 3.9109e-02], [-5.7354e-02, -7.3691e-03, -2.5000e-03]], ..., [[-2.1252e-02, -6.3675e-03, 4.1071e-03], [-4.2447e-02, -3.3965e-02, -1.5145e-02], [-3.4841e-02, -1.4311e-02, 1.7778e-03]], [[-9.5260e-03, -1.8325e-02, -1.7060e-02], [ 7.2113e-03, 1.4041e-02, 1.2363e-02], [-1.3355e-02, 6.6146e-03, 1.8054e-02]], [[-2.5701e-02, -1.6052e-02, -5.4884e-02], [ 7.4965e-03, -1.2761e-02, -1.5995e-02], [ 1.5014e-02, -1.4792e-02, -1.2497e-03]]], [[[-3.9103e-03, 1.1274e-04, 1.3621e-03], [ 3.5300e-03, 9.9565e-03, 2.0523e-02], [ 8.2783e-03, 6.5588e-03, -2.0836e-03]], [[-2.5683e-01, -2.2517e-01, -1.7731e-01], [-8.7526e-02, -3.0986e-02, 1.4393e-02], [ 1.8254e-01, 2.3226e-01, 2.5587e-01]], [[-2.0130e-02, 9.4802e-03, -2.2466e-03], [-2.1649e-02, -1.2736e-02, -1.7207e-02], [-6.5139e-03, -1.8625e-02, -1.9091e-02]], ..., [[ 4.3041e-02, 4.3378e-02, 4.2279e-02], [ 2.4346e-04, -1.7234e-03, 7.5235e-03], [-1.9231e-02, -1.3540e-02, -7.5169e-03]], [[ 3.8090e-03, 1.7054e-02, 1.2607e-02], [ 1.5608e-02, 3.8082e-02, 2.4874e-02], [ 1.2336e-02, 2.0457e-02, 1.3815e-02]], [[ 2.1151e-02, 1.0276e-02, 4.6588e-03], [ 9.2704e-03, -9.2000e-03, 6.5114e-03], [ 1.7865e-03, -8.9339e-03, 9.7889e-03]]], ..., [[[-2.4967e-02, -1.6314e-02, -2.9345e-02], [ 9.5648e-03, 8.1133e-03, -4.6451e-02], [-1.1525e-02, -1.5916e-02, -2.7963e-02]], [[-6.3951e-03, -4.8508e-03, -1.9196e-02], [-3.0425e-03, 1.1870e-02, -8.6595e-04], [ 7.4362e-03, -2.1336e-03, 6.8573e-04]], [[ 1.8298e-02, -3.0711e-02, -7.7125e-02], [ 8.1464e-02, 3.9899e-02, -1.3487e-01], [ 6.7937e-02, 1.1089e-02, -4.2061e-02]], ..., [[-6.7690e-03, -5.5735e-03, -1.4049e-02], [ 2.2616e-02, -6.7437e-03, -2.5689e-02], [ 1.8654e-02, 7.8059e-04, -2.7413e-03]], [[-3.5299e-02, -2.4574e-02, -1.4050e-02], [-2.2453e-02, -5.3167e-03, -5.2718e-03], [-1.2551e-02, 1.1390e-02, 1.4290e-03]], [[ 1.1823e-02, 1.0470e-02, -1.2303e-02], [-5.4639e-03, 3.3081e-02, 3.1263e-03], [-2.3530e-05, -2.9369e-03, 8.4776e-03]]], [[[-2.8848e-02, -1.6315e-02, 1.5848e-04], [-8.5487e-03, 1.1063e-03, 1.3607e-02], [ 1.6504e-03, -4.4869e-03, 4.2731e-03]], [[ 1.9244e-01, 1.5994e-01, 4.4400e-02], [ 1.3523e-01, 2.0193e-02, -1.3240e-01], [-2.2441e-02, -2.0256e-01, -2.0281e-01]], [[-2.0915e-02, -2.4747e-02, -1.5650e-02], [-3.2422e-03, -2.3481e-02, -9.4151e-03], [-1.6436e-02, 1.1228e-02, 5.5562e-03]], ..., [[-1.5808e-02, -1.3784e-02, -5.8469e-03], [-3.0424e-02, -2.2522e-02, -2.2394e-02], [ 8.0426e-03, 1.8704e-02, 2.1521e-02]], [[ 5.5718e-03, 1.3977e-02, 5.6694e-03], [ 7.0379e-03, 1.5136e-02, 3.5009e-03], [-2.7111e-03, -1.0947e-02, -5.2029e-03]], [[ 2.0397e-02, 1.5897e-02, -5.6102e-03], [ 2.1915e-02, -1.4783e-02, -2.2399e-02], [-5.9047e-03, 5.7965e-03, -5.8358e-04]]], [[[-2.7344e-02, -1.5764e-03, -1.4012e-02], [ 4.5194e-03, 2.4203e-02, -5.2250e-04], [ 1.8507e-03, 1.0311e-02, 1.1952e-02]], [[-1.7472e-02, 2.0472e-03, 1.3215e-02], [ 1.3934e-03, 3.6807e-02, 1.2319e-02], [-2.4221e-03, 7.2633e-04, 1.2218e-02]], [[-1.0666e-03, 4.8072e-03, 2.6288e-02], [ 3.6842e-02, 1.1852e-01, 7.4645e-02], [-4.0943e-02, -5.1958e-02, -3.2773e-02]], ..., [[-1.5786e-02, -9.6550e-03, -3.0857e-02], [-2.4808e-02, -1.9937e-02, 2.0438e-03], [-4.0196e-02, -1.5465e-02, -2.1942e-02]], [[-2.4942e-02, -1.4581e-02, -2.8751e-03], [-1.6434e-02, -7.2866e-03, -4.4101e-03], [-1.7163e-02, -5.6359e-04, -1.3464e-03]], [[-9.3213e-03, -1.4703e-02, -3.7301e-03], [ 2.2755e-02, 4.6737e-02, 3.5333e-02], [ 2.1362e-03, -2.2371e-02, 2.8263e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn1.weight&#39;, tensor([0.1553, 0.3034, 0.1553, 0.3116, 0.2115, 0.2806, 0.2131, 0.1625, 0.2461, 0.2166, 0.2244, 0.2363, 0.1963, 0.3094, 0.3069, 0.2183, 0.2542, 0.3129, 0.2546, 0.2282, 0.2836, 0.1615, 0.2229, 0.2715, 0.1856, 0.1671, 0.3196, 0.2248, 0.2028, 0.1549, 0.2596, 0.1642, 0.2434, 0.3893, 0.1753, 0.2045, 0.2377, 0.1506, 0.2703, 0.2744, 0.2382, 0.1473, 0.2315, 0.2575, 0.2141, 0.2540, 0.2116, 0.2507, 0.1751, 0.2371, 0.1825, 0.2795, 0.2584, 0.2698, 0.2669, 0.2504, 0.1604, 0.2473, 0.1902, 0.1746, 0.3285, 0.2599, 0.1771, 0.2519, 0.3102, 0.2187, 0.2529, 0.2712, 0.2030, 0.2498, 0.2457, 0.1806, 0.1973, 0.1868, 0.2835, 0.2885, 0.2609, 0.2067, 0.2706, 0.1949, 0.2589, 0.1532, 0.1510, 0.2098, 0.2418, 0.2167, 0.2850, 0.2812, 0.3240, 0.2529, 0.2689, 0.2582, 0.1751, 0.2537, 0.1980, 0.2335, 0.2283, 0.2488, 0.2508, 0.2740, 0.1624, 0.1720, 0.2218, 0.2290, 0.1864, 0.2350, 0.2222, 0.1746, 0.2606, 0.2949, 0.2296, 0.2556, 0.2890, 0.4349, 0.2561, 0.3159, 0.2552, 0.2718, 0.3275, 0.2788, 0.2076, 0.2959, 0.1312, 0.2577, 0.2163, 0.2396, 0.1676, 0.2661], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn1.bias&#39;, tensor([ 0.0607, -0.1974, 0.0547, -0.2580, -0.0349, -0.1155, -0.0901, 0.0405, -0.1609, -0.1688, 0.0011, -0.1031, -0.0176, -0.2238, -0.3179, -0.0602, -0.1244, -0.2687, -0.0931, -0.0589, -0.1992, 0.0605, -0.0734, -0.1615, -0.1992, 0.0251, -0.2935, -0.1761, -0.0851, 0.0384, -0.1412, 0.0054, -0.1266, -0.4093, 0.0458, -0.0692, -0.0900, 0.0880, -0.1823, -0.1572, -0.0724, 0.0644, -0.1013, -0.2028, -0.0650, -0.1715, -0.1606, -0.0830, 0.0175, -0.1252, 0.0031, -0.2953, -0.1397, -0.3059, -0.2618, -0.1822, 0.0719, -0.0614, 0.0241, -0.1007, -0.2099, -0.0838, -0.0301, -0.1684, -0.3345, -0.0837, -0.2615, -0.2019, -0.0957, -0.1462, -0.1151, -0.1195, -0.0073, -0.0058, -0.2561, -0.1089, -0.1068, -0.0197, -0.1374, -0.0318, -0.1731, 0.0364, 0.0656, -0.1258, -0.1989, -0.0946, -0.1922, -0.1900, -0.2989, -0.1578, -0.1264, -0.1587, -0.0873, -0.2341, -0.0194, -0.1048, -0.1428, -0.2198, -0.2526, -0.1166, 0.0723, 0.0381, -0.1494, -0.0991, 0.0336, -0.1360, -0.0491, 0.0250, -0.1878, -0.2188, -0.0345, -0.1560, -0.1946, -0.4625, -0.1938, -0.3404, -0.1359, -0.1818, -0.2026, -0.2874, -0.0852, -0.1916, 0.0524, -0.1300, -0.0873, -0.1415, 0.0692, -0.1755], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn1.running_mean&#39;, tensor([-0.5543, -0.7887, -0.2882, -0.4131, -0.2719, -0.5278, -0.4615, 0.2058, -0.2566, 0.6664, -0.7908, -0.8546, 0.0604, -0.5215, 0.9571, 0.1092, 0.0343, -1.0647, -0.1444, -0.0245, 0.1983, 0.4535, 0.1334, -0.6856, -0.0622, -0.2388, -0.6651, 1.0381, -0.3422, -0.2349, 0.1050, 0.0994, -0.3017, -1.4526, -0.3521, -0.1437, -0.0157, -0.0743, -0.7831, -1.0019, 0.0093, -0.2025, -0.4531, -0.3679, -0.2804, -0.1255, -0.5126, -0.2331, -0.3621, 2.2522, 0.3189, -0.3010, -0.1738, -0.8471, 0.7219, -0.3506, -0.0551, 0.4760, 0.4763, 0.4912, 0.1067, -0.2030, -0.1091, -0.6904, -1.2137, -0.2478, -0.0292, -0.6743, -0.1304, -0.1838, -0.6170, -0.7425, 0.4139, -0.3925, -0.8787, 0.2364, -0.1833, -0.4978, -0.4020, 0.1031, 0.3981, -0.3054, -0.0269, 0.1196, 0.4096, 0.0719, -0.5549, -1.0189, 0.0719, 0.7766, 0.0163, -2.2128, -0.1301, -0.1300, -0.2801, -0.3413, -0.1815, 0.2648, -0.3280, -0.0650, 0.0816, -0.3071, 0.4767, -0.1305, -0.1177, -0.2743, 0.1946, -0.0574, -0.1169, 0.2631, -0.7724, 0.0504, -0.6549, -1.3735, 1.0285, -0.0836, 0.0716, -0.5587, -0.6200, -0.2352, 0.1579, -0.0172, 0.2604, 0.1079, 0.1384, 0.2161, -0.2690, 0.5581], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn1.running_var&#39;, tensor([0.3783, 0.2205, 0.2740, 0.3393, 0.2129, 0.1712, 0.1541, 0.1545, 0.0909, 0.1030, 0.2514, 0.2550, 0.1563, 0.1770, 0.3560, 0.2033, 0.1679, 0.3741, 0.2714, 0.2177, 0.1819, 0.2282, 0.1883, 0.1625, 0.0950, 0.1858, 0.3863, 0.1065, 0.1509, 0.1736, 0.1979, 0.2050, 0.1594, 0.1940, 0.2262, 0.1555, 0.2459, 0.3855, 0.2468, 0.3061, 0.2299, 0.2326, 0.2060, 0.1342, 0.1801, 0.1982, 0.1110, 0.3012, 0.1577, 0.1615, 0.2162, 0.1697, 0.2146, 0.1244, 0.1505, 0.1842, 0.3523, 0.2810, 0.2651, 0.1216, 0.2824, 0.1942, 0.3163, 0.0868, 0.1820, 0.1658, 0.1495, 0.2728, 0.1364, 0.2065, 0.2143, 0.1107, 0.2469, 0.1777, 0.1012, 0.2573, 0.1783, 0.2018, 0.3015, 0.1584, 0.3033, 0.3047, 0.4765, 0.1455, 0.1273, 0.1941, 0.2031, 0.2601, 0.1586, 0.1281, 0.2271, 0.2101, 0.1677, 0.1194, 0.1798, 0.2211, 0.1645, 0.1599, 0.1304, 0.1967, 0.4250, 0.4430, 0.1420, 0.1546, 0.2612, 0.1790, 0.1934, 0.2469, 0.2846, 0.2634, 0.2019, 0.2179, 0.2570, 0.2825, 0.2314, 0.3288, 0.1923, 0.1928, 0.7372, 0.1451, 0.1380, 0.3638, 0.2956, 0.1986, 0.2039, 0.1539, 0.2245, 0.2021], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.1.conv2.weight&#39;, tensor([[[[ 2.2250e-02, -6.2553e-03, 2.8683e-02], [ 1.5265e-03, -2.2600e-02, 2.6450e-02], [ 3.3547e-03, -1.9201e-02, 3.8074e-03]], [[-9.4293e-03, -2.9515e-03, 4.7870e-02], [ 9.2141e-03, 2.3610e-02, 4.9790e-02], [-2.6876e-03, -1.1311e-02, 1.1631e-02]], [[ 2.2365e-02, -3.2006e-03, -1.9717e-02], [ 3.5013e-02, 8.7189e-03, -8.6585e-03], [ 2.2961e-02, 2.1434e-02, 8.1632e-03]], ..., [[-1.5329e-04, 2.8984e-02, 4.1331e-02], [ 4.6571e-02, 5.5526e-02, 5.1308e-02], [ 7.2904e-03, -1.7741e-02, -2.2506e-02]], [[ 1.1372e-02, 1.2606e-02, 7.3511e-03], [ 1.2582e-02, -1.4377e-02, -8.7142e-04], [ 2.1867e-02, -1.4181e-03, -9.7848e-03]], [[-1.5684e-02, -2.6847e-02, -9.3028e-03], [-1.1794e-02, -2.9754e-02, -1.2077e-02], [ 2.1324e-02, 5.5578e-03, 1.5227e-02]]], [[[-2.9985e-02, -1.3851e-02, 2.5804e-02], [-1.6781e-02, -3.9245e-03, 1.1395e-02], [-3.1270e-02, 2.5033e-02, 2.2282e-02]], [[ 2.1373e-02, 4.3493e-03, -1.4292e-02], [ 2.9550e-02, -4.6991e-03, -1.1614e-02], [ 3.6260e-02, 9.2775e-03, 1.2935e-03]], [[ 4.8988e-02, 7.5513e-02, 6.8174e-02], [ 4.7429e-02, 8.1926e-02, 3.6970e-02], [-3.5113e-02, -1.0733e-02, -5.0592e-02]], ..., [[ 7.9084e-03, 2.9724e-04, 8.9342e-03], [ 9.6612e-03, 1.1695e-02, -7.5842e-03], [-4.8468e-03, 6.7464e-03, -1.3283e-02]], [[ 5.7025e-02, -2.9624e-02, -2.0098e-02], [-2.5843e-02, -1.3721e-01, -5.1012e-02], [-1.8928e-02, -6.1545e-02, -2.6835e-03]], [[ 1.0023e-02, 1.7502e-02, 1.7766e-02], [-1.1588e-02, -1.0062e-02, -1.3354e-02], [ 6.0797e-03, 1.5982e-02, -3.8364e-04]]], [[[ 1.2811e-02, 1.8235e-02, -1.9040e-02], [-2.3565e-02, 7.0089e-03, 5.5785e-04], [ 6.8738e-03, 4.2329e-02, 1.4765e-02]], [[-7.8063e-03, 5.0180e-02, 3.8504e-02], [-5.3935e-03, 6.6535e-02, 4.3842e-02], [ 1.1293e-02, 3.2098e-02, 5.7425e-03]], [[ 7.3400e-03, -3.4942e-04, 2.4047e-02], [-1.9993e-02, -3.9348e-02, 9.3466e-04], [-3.7987e-03, -9.1411e-03, 1.3063e-03]], ..., [[ 4.1804e-03, -9.2376e-03, 2.3335e-02], [-7.1447e-02, -5.3734e-03, 4.5721e-02], [-1.1226e-02, -2.1197e-02, -1.0149e-02]], [[-9.7854e-03, -6.7995e-03, 1.3783e-02], [-1.4881e-02, -2.0969e-02, 2.7064e-02], [ 1.2009e-02, -2.5205e-03, 1.3100e-02]], [[ 2.5662e-02, 3.3072e-02, 4.9225e-03], [ 4.4572e-02, 5.0830e-02, 1.0521e-02], [-1.1176e-02, -6.8060e-03, 1.5575e-02]]], ..., [[[-4.8960e-03, -1.1902e-02, 1.2051e-02], [ 1.2459e-02, 6.7388e-03, 2.5638e-02], [ 2.6996e-02, 1.5272e-03, 2.6662e-03]], [[ 2.1903e-03, 3.5135e-03, 1.8427e-02], [-5.6721e-03, -1.4058e-02, -4.1800e-03], [-1.3596e-03, -8.9411e-03, -1.2344e-02]], [[ 2.6406e-02, 3.7322e-02, 2.8429e-02], [ 6.4925e-03, -8.6091e-03, -1.9670e-02], [-9.5860e-03, -2.9374e-02, -2.9124e-02]], ..., [[-8.7587e-03, 4.3300e-03, -2.6990e-02], [-2.9211e-02, 1.8942e-03, 1.3621e-02], [-2.6032e-02, -4.9581e-03, 2.0007e-02]], [[ 1.8169e-03, 1.4155e-02, 2.5443e-02], [ 1.1779e-02, 2.0907e-02, 2.5282e-02], [ 2.5688e-02, 2.7317e-02, 2.8451e-02]], [[-2.4318e-02, -2.0751e-02, -4.2174e-02], [ 6.5275e-03, 1.7363e-02, 6.6098e-03], [ 2.3223e-03, 8.8318e-03, 1.9545e-02]]], [[[ 8.7343e-03, 3.0569e-02, 2.6184e-02], [-2.2942e-02, 8.9910e-03, 3.3169e-02], [ 1.6486e-03, 4.4041e-02, 3.1713e-02]], [[ 2.5060e-02, 2.2482e-02, -6.4740e-04], [-1.3340e-04, -5.2928e-03, -2.6884e-02], [ 1.3925e-03, 3.8446e-03, -1.7275e-02]], [[-3.9245e-02, 8.1841e-03, -1.5148e-02], [-5.7739e-02, -8.2330e-02, -6.1897e-02], [-1.7078e-02, 5.4872e-03, -1.0236e-02]], ..., [[ 2.9197e-02, 1.3993e-02, 6.2323e-02], [-6.4740e-03, -2.0089e-03, 3.1491e-02], [-2.1315e-02, -5.9415e-03, 4.0237e-02]], [[-2.0584e-03, 8.8940e-03, 4.7940e-03], [-3.4186e-02, -7.8500e-02, 2.0244e-03], [-8.8977e-03, 2.2008e-02, 3.2369e-02]], [[ 5.1354e-03, -1.0281e-02, -4.7651e-03], [-4.2724e-02, -3.4330e-02, -3.1280e-02], [-3.6701e-02, -2.4159e-02, -4.9243e-02]]], [[[-1.0619e-02, -5.4525e-03, -6.2610e-04], [-1.0859e-02, -8.7257e-03, -2.2712e-03], [-1.2712e-02, -1.4844e-02, -8.3991e-03]], [[-1.5135e-02, -2.1732e-02, -1.8649e-02], [-2.1540e-02, -3.1244e-02, -1.9217e-02], [ 1.3532e-02, 8.7245e-03, 1.7934e-05]], [[-2.2779e-03, -1.0559e-02, -1.3433e-02], [-4.7051e-04, -5.7047e-03, -7.5103e-03], [ 2.7235e-04, 3.1699e-03, -8.8031e-03]], ..., [[-3.1434e-03, -1.1959e-02, 4.3020e-03], [-1.5483e-02, -1.1879e-02, 5.6603e-03], [-2.8436e-03, -6.9665e-03, -1.7395e-02]], [[ 1.7071e-03, 1.2703e-02, -1.1850e-03], [-2.4394e-02, -3.9000e-02, -2.5295e-02], [-3.3353e-02, -1.8937e-02, -2.0815e-04]], [[ 1.4157e-02, 1.5927e-02, 6.4659e-03], [-1.1420e-02, -2.0784e-02, -1.3157e-03], [-6.0396e-03, 5.9911e-03, 1.3209e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn2.weight&#39;, tensor([0.1451, 0.2712, 0.1686, 0.1614, 0.0915, 0.1410, 0.0956, 0.2122, 0.1363, 0.1917, 0.0365, 0.1303, 0.1095, 0.2161, 0.0900, 0.1919, 0.1245, 0.1635, 0.1671, 0.2774, 0.1847, 0.3008, 0.0911, 0.4615, 0.1794, 0.1635, 0.1224, 0.1605, 0.2573, 0.1855, 0.0725, 0.1367, 0.1634, 0.2282, 0.1934, 0.4597, 0.1901, 0.2731, 0.1761, 0.3682, 0.1238, 0.1037, 0.2216, 0.1352, 0.3024, 0.3174, 0.1265, 0.2334, 0.2137, 0.2070, 0.1694, 0.1503, 0.1607, 0.3317, 0.0842, 0.2224, 0.1730, 0.1324, 0.2542, 0.3017, 0.2796, 0.0703, 0.1751, 0.1096, 0.1201, 0.1690, 0.3652, 0.2389, 0.1739, 0.1922, 0.0804, 0.2018, 0.1459, 0.0857, 0.0711, 0.2074, 0.3265, 0.2390, 0.3593, 0.1903, 0.1977, 0.1106, 0.1442, 0.2485, 0.1237, 0.2379, 0.2418, 0.2980, 0.1226, 0.2000, 0.4488, 0.1307, 0.1171, 0.1706, 0.0868, 0.0183, 0.1383, 0.1179, 0.2127, 0.0831, 0.1131, 0.2341, 0.2021, 0.1179, 0.0895, 0.1994, 0.1387, 0.2109, 0.2818, 0.1403, 0.1243, 0.4569, 0.1628, 0.1214, 0.1966, 0.1749, 0.3311, 0.0402, 0.2436, 0.0966, 0.0892, 0.1556, 0.0857, 0.1324, 0.1147, 0.1831, 0.3355, 0.0748], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn2.bias&#39;, tensor([-0.0651, -0.4787, -0.1265, -0.0314, -0.0308, -0.0719, -0.0413, -0.0857, 0.0311, -0.0415, -0.0200, -0.1034, -0.0562, -0.2485, -0.1483, -0.1526, -0.1516, -0.1220, -0.1432, -0.5718, -0.1091, 0.0982, -0.0328, 0.0579, 0.0692, -0.1353, -0.0557, -0.1142, 0.1959, -0.1210, 0.0270, -0.0992, 0.0366, -0.3126, -0.1102, 0.1438, 0.0247, -0.1942, -0.1342, -0.0419, 0.0612, -0.0238, 0.1094, 0.0816, 0.2136, -0.2077, 0.0807, -0.0449, -0.0910, -0.1756, -0.0548, -0.0359, -0.2249, -0.3015, -0.0622, -0.0335, 0.0735, 0.1530, -0.2707, -0.0848, -0.3510, 0.0755, 0.0999, -0.0831, -0.0576, 0.0106, 0.0719, 0.1317, -0.1238, 0.1082, -0.0643, 0.0119, 0.1180, -0.0163, 0.1074, -0.1380, -0.1506, 0.0108, -0.1356, 0.0717, -0.1403, 0.0017, -0.0985, 0.0085, -0.0095, -0.1211, -0.1294, -0.2026, -0.1259, -0.1445, 0.0282, -0.0069, -0.0183, -0.1465, 0.0291, 0.0010, -0.0813, -0.1116, -0.1441, 0.0525, -0.0184, -0.0011, 0.0757, 0.1458, -0.1581, -0.1672, -0.1041, -0.1640, -0.2923, -0.0878, -0.0999, -0.0142, 0.0335, -0.1045, -0.1098, -0.1115, 0.1256, 0.0078, 0.0711, 0.0983, -0.0101, -0.1643, -0.0747, 0.0394, 0.0195, -0.0101, 0.1436, -0.0419], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn2.running_mean&#39;, tensor([-0.0216, 0.0265, -0.0396, -0.1599, -0.0466, -0.0060, -0.1744, 0.2068, -0.2133, -0.1147, -0.0012, 0.0570, -0.1678, 0.0922, -0.0030, -0.1844, 0.0101, -0.0312, -0.1136, -0.0042, -0.0372, -0.2103, 0.0074, -0.2289, -0.1455, -0.1658, -0.0211, 0.0454, -0.3640, 0.0544, 0.0329, -0.0664, -0.1986, 0.0433, -0.0583, -0.1830, -0.1314, -0.0942, -0.1200, -0.2642, -0.0311, -0.0493, -0.1157, -0.1871, -0.3180, -0.0980, -0.0426, -0.0939, -0.1400, -0.0402, 0.0074, -0.0016, 0.0497, -0.2548, -0.2037, -0.1985, 0.0506, -0.0758, 0.0936, 0.0683, -0.1454, -0.0426, -0.2988, -0.0327, -0.0705, 0.1477, -0.1027, -0.2090, -0.0211, -0.1880, -0.0244, -0.1974, -0.0371, -0.0085, -0.0107, -0.0604, -0.2228, -0.2824, -0.1424, -0.1664, 0.0275, -0.1672, -0.1091, -0.0439, 0.0129, -0.1757, -0.0823, -0.0815, -0.0385, -0.0549, -0.1611, -0.1368, -0.0604, -0.0536, 0.0077, -0.0135, 0.0608, -0.1744, -0.0648, -0.0048, -0.0171, -0.2242, -0.0991, 0.0220, 0.0568, 0.0044, 0.0775, -0.2033, -0.0504, -0.0390, 0.0088, -0.2385, -0.2017, -0.0794, 0.0580, -0.0371, -0.2137, -0.0375, -0.1381, -0.1251, 0.0416, 0.0626, 0.0083, -0.1091, -0.0557, -0.0686, -0.4123, -0.1755], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn2.running_var&#39;, tensor([0.0103, 0.0295, 0.0143, 0.0207, 0.0145, 0.0070, 0.0118, 0.0158, 0.0257, 0.0130, 0.0064, 0.0155, 0.0121, 0.0316, 0.0146, 0.0180, 0.0098, 0.0092, 0.0105, 0.0131, 0.0086, 0.0212, 0.0072, 0.0606, 0.0149, 0.0081, 0.0151, 0.0077, 0.0219, 0.0181, 0.0069, 0.0089, 0.0192, 0.0278, 0.0203, 0.0658, 0.0198, 0.0297, 0.0145, 0.0231, 0.0103, 0.0096, 0.0239, 0.0167, 0.0167, 0.0274, 0.0125, 0.0183, 0.0137, 0.0126, 0.0094, 0.0183, 0.0192, 0.0304, 0.0082, 0.0200, 0.0134, 0.0072, 0.0227, 0.0153, 0.0170, 0.0085, 0.0127, 0.0086, 0.0125, 0.0146, 0.0389, 0.0202, 0.0134, 0.0116, 0.0044, 0.0153, 0.0147, 0.0048, 0.0105, 0.0145, 0.0282, 0.0116, 0.0332, 0.0185, 0.0121, 0.0098, 0.0124, 0.0154, 0.0076, 0.0088, 0.0110, 0.0145, 0.0068, 0.0092, 0.0467, 0.0109, 0.0094, 0.0071, 0.0108, 0.0021, 0.0061, 0.0044, 0.0197, 0.0081, 0.0082, 0.0179, 0.0122, 0.0103, 0.0164, 0.0135, 0.0152, 0.0124, 0.0198, 0.0137, 0.0104, 0.0530, 0.0152, 0.0100, 0.0070, 0.0084, 0.0727, 0.0041, 0.0217, 0.0153, 0.0174, 0.0254, 0.0042, 0.0086, 0.0127, 0.0151, 0.0264, 0.0086], device=&#39;cuda:0&#39;)), (&#39;0.5.1.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.2.conv1.weight&#39;, tensor([[[[ 3.9234e-02, 3.7442e-03, -6.4025e-03], [ 8.3395e-03, 9.7579e-03, -4.0926e-03], [-2.0638e-02, -1.1313e-02, 1.2053e-02]], [[ 6.8380e-03, -1.8787e-02, 6.8908e-03], [ 4.8431e-03, 7.7194e-05, 1.9143e-02], [ 7.4007e-03, 1.3121e-02, 8.6667e-03]], [[ 3.5760e-02, -9.6712e-03, -2.8018e-02], [-4.8713e-02, -7.8866e-02, 7.4796e-02], [-9.6747e-02, -1.1963e-01, 2.8760e-02]], ..., [[ 1.3079e-03, -1.7778e-02, 6.5438e-03], [-2.9732e-02, 9.4996e-03, -9.3552e-03], [-2.3156e-02, -9.8621e-03, -1.2735e-02]], [[ 2.7578e-03, 9.8898e-03, -1.0261e-02], [-2.7218e-02, 4.3571e-03, -3.0271e-03], [-2.8824e-02, -4.8165e-03, -1.7946e-02]], [[-1.3650e-02, -1.3612e-02, -9.1355e-03], [-5.6140e-02, 1.9662e-02, 5.6979e-02], [-2.9460e-02, 3.7121e-02, -3.6080e-02]]], [[[ 2.3858e-02, -1.4537e-03, 4.4220e-03], [ 1.5619e-02, -1.0893e-02, -3.6451e-02], [ 6.9077e-03, -5.8286e-02, -3.3807e-02]], [[ 3.1110e-02, 1.0582e-02, -5.0686e-03], [-1.0379e-03, -1.5656e-02, -1.7350e-02], [-1.8619e-02, -2.0209e-02, -1.9040e-02]], [[ 3.9483e-02, 1.3614e-02, -3.8734e-02], [-9.3816e-03, -2.7488e-02, 8.0281e-03], [-1.7293e-02, 8.3457e-03, 5.2239e-02]], ..., [[ 1.1351e-02, 6.0856e-02, 2.1988e-03], [ 2.2131e-02, 6.0091e-02, 1.9395e-03], [-2.7888e-02, -6.2515e-02, -2.4228e-02]], [[-2.5339e-02, -4.6316e-02, -2.6760e-02], [-2.4063e-03, -2.2603e-02, 6.1870e-03], [-3.0087e-02, -4.8355e-02, -2.4188e-02]], [[ 2.3291e-02, -2.7142e-02, 3.8999e-04], [-1.7375e-02, -7.2139e-02, 9.1263e-03], [ 8.1639e-03, -1.9580e-02, 1.5296e-02]]], [[[-9.8793e-03, -1.2947e-03, -1.7738e-02], [-1.0363e-02, 2.8556e-02, -5.9636e-03], [-3.6600e-02, 3.0297e-03, -3.8123e-03]], [[ 2.0598e-02, -2.6793e-02, -2.6099e-02], [-3.1863e-02, 1.4864e-02, -5.5691e-03], [ 1.2759e-02, -2.8674e-02, -4.6526e-02]], [[-2.0894e-02, -4.4010e-03, -5.1101e-03], [-3.1990e-02, 4.8805e-02, -1.8654e-02], [-8.4418e-03, -1.5137e-02, 4.3650e-03]], ..., [[ 2.5643e-02, 3.0593e-02, -8.2917e-03], [ 1.8488e-02, -6.4214e-02, -3.5328e-02], [-3.1767e-02, -7.0168e-03, 8.2448e-03]], [[ 7.5636e-03, 6.7110e-03, 4.8882e-03], [ 2.2884e-03, -2.2172e-02, -6.6769e-03], [-1.8618e-02, -8.0713e-03, 3.7073e-02]], [[-2.8187e-02, -3.4743e-03, 5.3757e-03], [ 1.3479e-04, 1.9574e-02, -1.9095e-02], [ 1.9865e-03, -1.2632e-02, 2.1833e-03]]], ..., [[[-3.3898e-02, -1.5758e-02, 5.0639e-03], [-4.6409e-02, -9.2232e-03, 4.0758e-04], [-3.4528e-02, -3.1430e-02, -1.6746e-02]], [[-1.7157e-02, 6.9980e-03, -1.7720e-02], [-1.1257e-02, 1.5116e-02, -2.8453e-02], [ 2.1976e-02, -1.4256e-03, -7.0509e-03]], [[-2.5964e-02, 5.6618e-03, 3.3596e-03], [-5.2551e-02, 2.5721e-02, 2.6342e-02], [-2.2075e-02, -1.9331e-02, 9.2560e-03]], ..., [[ 3.8653e-02, 9.8657e-04, -1.5234e-02], [ 2.1380e-02, -2.0376e-02, -5.1128e-02], [ 3.0073e-02, -3.3021e-03, -1.8626e-02]], [[-2.0848e-02, -4.2721e-03, -1.4197e-02], [ 1.3512e-02, 2.6415e-02, 1.2506e-02], [-6.5234e-04, 1.9312e-02, 5.7748e-03]], [[-3.1181e-02, 2.5857e-03, 4.8867e-03], [-3.1326e-02, 5.5694e-02, 3.4254e-02], [ 5.6704e-03, -2.9527e-02, -1.8220e-02]]], [[[-5.6057e-03, -8.9883e-03, 4.2484e-04], [-5.6241e-03, -7.0273e-03, -1.2284e-02], [-5.1163e-03, -1.7795e-02, 3.5051e-03]], [[-1.7901e-02, -1.4160e-02, 4.7677e-02], [-2.0531e-02, -2.9114e-02, 8.8829e-02], [-3.9138e-02, -4.7396e-02, -2.1349e-02]], [[-2.9567e-03, -8.1021e-03, -1.4293e-02], [-1.7178e-02, -8.2908e-03, -7.8042e-03], [ 5.7376e-03, -8.0818e-03, 1.0033e-02]], ..., [[-1.9293e-02, -7.3667e-03, -2.0664e-02], [-2.2205e-02, 2.2329e-02, -1.8112e-02], [-1.2391e-02, 3.3562e-04, 1.1318e-02]], [[-1.3001e-02, -1.2534e-02, -2.0025e-03], [-2.1011e-03, -8.6293e-04, 1.1316e-02], [-3.9269e-04, -1.2861e-02, 9.4464e-03]], [[ 5.9160e-03, 9.5042e-03, 1.3320e-02], [ 5.0226e-03, -1.4260e-02, 9.4937e-03], [ 1.1143e-02, 2.5515e-05, 3.2409e-03]]], [[[-2.7538e-02, -7.3602e-03, -1.4807e-02], [ 6.7508e-02, 9.6830e-03, 2.6235e-02], [ 3.2110e-02, 6.0815e-03, 3.9174e-02]], [[-1.0263e-02, -2.2148e-02, -1.7280e-02], [-8.2027e-03, 5.4696e-03, -1.5609e-02], [ 8.2379e-04, 1.6057e-02, 3.1811e-03]], [[-3.6053e-02, -2.7960e-02, -4.2119e-02], [-6.2498e-03, -5.0139e-02, -2.5255e-02], [-1.1165e-02, 1.1526e-02, -2.4412e-02]], ..., [[ 5.0022e-03, 9.4152e-03, 1.5887e-02], [ 8.9511e-03, 4.4795e-02, 4.8572e-04], [ 2.0850e-02, 1.8134e-02, -7.1920e-03]], [[ 3.6535e-02, 4.3740e-02, 2.6522e-02], [-3.4610e-02, -1.6931e-02, 4.0649e-02], [ 1.0836e-04, -7.6133e-03, 3.8618e-02]], [[-2.2010e-02, -2.1327e-02, -2.6442e-02], [-1.6053e-03, 4.8060e-03, -5.6096e-02], [-3.1899e-03, 4.7648e-03, 1.1129e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn1.weight&#39;, tensor([0.2816, 0.3005, 0.2472, 0.2160, 0.2333, 0.2484, 0.2336, 0.2753, 0.2641, 0.2845, 0.2694, 0.2823, 0.2807, 0.3211, 0.2699, 0.2910, 0.2939, 0.2422, 0.2417, 0.2273, 0.2126, 0.2828, 0.2270, 0.3106, 0.2753, 0.2195, 0.3082, 0.2810, 0.2541, 0.2092, 0.2358, 0.2275, 0.2915, 0.2105, 0.2523, 0.3076, 0.2380, 0.2538, 0.2859, 0.2442, 0.2262, 0.2454, 0.2445, 0.2909, 0.2459, 0.2838, 0.2672, 0.2380, 0.2469, 0.2428, 0.2639, 0.2308, 0.2318, 0.2480, 0.2229, 0.2810, 0.2077, 0.2391, 0.1946, 0.2604, 0.2661, 0.2292, 0.2491, 0.2646, 0.2423, 0.2549, 0.2359, 0.2780, 0.2186, 0.2831, 0.2251, 0.2484, 0.2802, 0.2606, 0.1916, 0.2281, 0.3276, 0.2650, 0.2613, 0.1994, 0.2568, 0.2935, 0.2810, 0.2431, 0.2615, 0.2697, 0.2286, 0.3065, 0.2497, 0.2484, 0.2751, 0.2269, 0.2261, 0.2565, 0.2390, 0.2312, 0.2567, 0.3704, 0.2115, 0.2444, 0.2639, 0.2621, 0.2419, 0.2963, 0.3037, 0.2742, 0.2371, 0.2152, 0.2143, 0.2436, 0.2491, 0.1730, 0.2712, 0.2370, 0.2831, 0.2547, 0.2824, 0.2166, 0.2618, 0.2269, 0.2145, 0.2443, 0.2616, 0.2553, 0.3008, 0.2426, 0.2397, 0.2744], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn1.bias&#39;, tensor([-0.2091, -0.5348, -0.1275, -0.1459, -0.0900, -0.1621, -0.1111, -0.3221, -0.1552, -0.2498, -0.2046, -0.1955, -0.2161, -0.2938, -0.1559, -0.2719, -0.2869, -0.2095, -0.1819, -0.2309, -0.1566, -0.2398, -0.2518, -0.1905, -0.2091, -0.2351, -0.2892, -0.2692, -0.2490, -0.1045, -0.1410, -0.1137, -0.2035, -0.1204, -0.2042, -0.2238, -0.1462, -0.2114, -0.2674, -0.1798, -0.1393, -0.1430, -0.1891, -0.2432, -0.1676, -0.2893, -0.2025, -0.1542, -0.1274, -0.1228, -0.1839, -0.1029, -0.1894, -0.1665, -0.1056, -0.2167, -0.0691, -0.1409, -0.1806, -0.2148, -0.1735, -0.2138, -0.2046, -0.2155, -0.1728, -0.1514, -0.2643, -0.2066, -0.1109, -0.1905, -0.1132, -0.2032, -0.1893, -0.1719, -0.0570, -0.1873, -0.4256, -0.1694, -0.2187, -0.0994, -0.2155, -0.1818, -0.3116, -0.1427, -0.2863, -0.1831, -0.1273, -0.1931, -0.2490, -0.1700, -0.3086, -0.1049, -0.1185, -0.2699, -0.1515, -0.1569, -0.1485, -0.3269, -0.0454, -0.2132, -0.1593, -0.1770, -0.1447, -0.2823, -0.2768, -0.2081, -0.1383, -0.0733, -0.1431, -0.0967, -0.1657, -0.1711, -0.2852, -0.1451, -0.3198, -0.1698, -0.2561, -0.1423, -0.3072, -0.1555, -0.1405, -0.2209, -0.1481, -0.1770, -0.2272, -0.1919, -0.1284, -0.2202], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn1.running_mean&#39;, tensor([-0.0595, -0.6884, -0.3502, 0.1711, -0.2839, -0.0512, -0.1086, 0.2714, -0.3875, -0.2144, -0.1615, -0.1798, -0.0198, 0.1125, -0.1841, -0.4857, -0.1905, 0.2483, -0.3546, 0.1417, -0.1501, 0.1421, -0.2702, -0.2302, -0.0712, 0.4440, 0.0054, -0.2396, 0.0523, -0.5257, 0.1188, -0.2455, -0.2672, 0.4648, -0.3620, -0.1653, -0.0418, -0.6756, -0.1429, -0.7671, -0.0520, 0.1278, -0.2125, 0.5374, -0.0521, 0.0523, 0.1255, -0.1390, -0.0925, -0.1169, -0.4037, -0.6055, -0.2058, -0.2603, -0.1773, -0.1730, -0.0256, -0.3489, 0.3913, -0.0340, -0.0753, -0.1024, 0.1900, -0.6034, -0.0990, -0.2207, 0.5372, 0.3760, -0.2562, 0.2488, -0.0369, -0.2759, -0.0386, 0.0335, -0.4293, 0.2152, -0.5466, -0.0380, -0.0580, -0.7509, -0.4232, -0.2128, -0.3112, -0.0654, 0.3479, -0.1695, -0.3883, -0.2200, -0.1564, -0.3787, 0.0870, -0.6199, -0.1877, -0.8018, -0.1924, -0.3044, -0.3898, -0.5793, 0.3203, 0.1981, -0.1637, -0.5119, -0.4139, 0.1061, -0.0248, -0.3511, -0.0948, 0.1708, -0.0099, 0.2030, -0.3233, 0.0296, -0.5773, -0.0840, 0.0854, -0.3243, 0.0687, -0.5055, 0.2631, -0.0473, -0.1874, 0.5244, -0.3863, -0.1992, -0.5505, -0.0969, -0.0134, -0.3351], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn1.running_var&#39;, tensor([0.3827, 0.1157, 0.2289, 0.2315, 0.3030, 0.2185, 0.2755, 0.1231, 0.2680, 0.3563, 0.1745, 0.3612, 0.3364, 0.3508, 0.3305, 0.1639, 0.1951, 0.1653, 0.2203, 0.1175, 0.2086, 0.2687, 0.1232, 0.6127, 0.2731, 0.1306, 0.1531, 0.1850, 0.2336, 0.1795, 0.3901, 0.3086, 0.3530, 0.2522, 0.1787, 0.3068, 0.2900, 0.2160, 0.2224, 0.1507, 0.2549, 0.2488, 0.1734, 0.1678, 0.2068, 0.1966, 0.2647, 0.2438, 0.2381, 0.3065, 0.2767, 0.2874, 0.1618, 0.2312, 0.2399, 0.2431, 0.1986, 0.2685, 0.1277, 0.1973, 0.3211, 0.1665, 0.1523, 0.1780, 0.2289, 0.2274, 0.1585, 0.3443, 0.3543, 0.3244, 0.3250, 0.2387, 0.2710, 0.2789, 0.2508, 0.1486, 0.1317, 0.3062, 0.2026, 0.1753, 0.1865, 0.3658, 0.1786, 0.4204, 0.1277, 0.2652, 0.2149, 0.4710, 0.2191, 0.2477, 0.1475, 0.4264, 0.1856, 0.2007, 0.2617, 0.1563, 0.2193, 0.2592, 0.2770, 0.1360, 0.4159, 0.2182, 0.2671, 0.3304, 0.2343, 0.1856, 0.2093, 0.2119, 0.1616, 0.2942, 0.2551, 0.1430, 0.1455, 0.2193, 0.2709, 0.1884, 0.1458, 0.2454, 0.1839, 0.1989, 0.1535, 0.1150, 0.4088, 0.1555, 0.2239, 0.3035, 0.2634, 0.1771], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.2.conv2.weight&#39;, tensor([[[[-3.9995e-02, -4.6165e-02, -1.5743e-02], [-1.7209e-02, 6.0568e-03, -1.2915e-02], [ 2.4909e-02, -3.5575e-04, -7.7453e-03]], [[-1.8513e-02, 2.5283e-03, 4.2579e-03], [-8.3380e-03, 1.5853e-02, -8.6132e-03], [-7.0587e-03, 6.7672e-03, -2.7751e-02]], [[-2.6728e-02, 3.6861e-03, 3.0185e-02], [-3.2100e-03, 4.5866e-02, 2.6970e-02], [-1.6056e-02, -4.8650e-03, 2.6375e-03]], ..., [[-4.3434e-03, -2.5736e-03, -1.8232e-03], [-1.5467e-02, -8.9516e-03, -1.1082e-02], [-3.5550e-02, -1.4034e-02, -1.2311e-02]], [[-3.0505e-03, -1.2273e-02, 1.4102e-02], [ 1.3151e-02, -1.4299e-02, 1.4828e-02], [ 3.1453e-03, 1.6020e-02, 4.9694e-03]], [[-1.8329e-02, -3.9296e-02, 4.3626e-02], [-2.1907e-02, -2.3225e-02, 2.8689e-02], [-4.7951e-03, -2.6989e-02, -1.8354e-02]]], [[[-2.9282e-02, -2.4261e-02, -2.7182e-02], [ 3.7572e-03, -2.0615e-03, -9.0770e-03], [-7.9063e-03, -7.7937e-03, -5.8646e-03]], [[-7.1607e-04, 9.8027e-04, -1.3048e-02], [-8.3347e-03, -2.2477e-02, -1.8661e-02], [-6.2205e-04, -4.1640e-03, 3.2566e-03]], [[-2.2121e-02, -1.6181e-02, 5.9328e-04], [-9.4255e-04, -6.9601e-03, 7.5651e-03], [ 1.7942e-02, 2.5323e-02, -2.0444e-02]], ..., [[-3.2344e-02, -3.8154e-02, -8.7232e-03], [-3.2053e-02, -4.1700e-03, 1.3099e-02], [-1.7938e-02, 1.5256e-02, 9.8592e-03]], [[-1.4598e-02, 5.6684e-02, 3.5320e-02], [-3.9847e-03, 4.5506e-02, 1.9097e-02], [-9.1100e-04, 2.6303e-02, 1.1739e-02]], [[-1.7203e-02, -4.8339e-03, -6.1416e-04], [-2.4976e-03, 9.7630e-03, 1.4093e-02], [-1.8860e-02, -1.9765e-02, -2.4599e-02]]], [[[-2.8010e-03, -2.3788e-02, -4.1223e-02], [ 3.4411e-02, -2.2868e-02, -4.2478e-02], [-2.3338e-02, -1.1755e-02, 2.7992e-02]], [[ 2.5260e-02, -1.9523e-02, 1.6248e-02], [-3.1036e-03, -2.9535e-02, 7.4877e-03], [-1.5707e-04, 2.5735e-02, 2.3725e-03]], [[-1.1053e-02, -4.7540e-03, -1.7730e-02], [ 1.0705e-02, 1.0291e-02, 5.1608e-03], [-1.1923e-02, -1.8045e-02, -3.2509e-02]], ..., [[ 4.9325e-03, -1.3340e-02, -2.4615e-02], [ 3.5560e-03, -1.5448e-02, -1.3710e-02], [-1.8722e-02, -1.1277e-03, -1.4531e-02]], [[ 1.8670e-02, 9.7537e-04, -6.1955e-03], [ 8.4769e-05, -2.3975e-02, -1.0198e-02], [-2.3915e-02, 5.6737e-04, -1.6674e-02]], [[ 4.4266e-03, 1.3278e-02, 2.7426e-02], [-2.3993e-02, -3.2575e-02, 6.6241e-03], [-3.5905e-02, -1.7264e-02, -1.5124e-02]]], ..., [[[ 1.8986e-02, 1.0681e-02, 4.6214e-03], [ 2.4590e-02, 5.5611e-02, 1.3802e-02], [ 1.8853e-02, 2.6110e-02, 1.1119e-02]], [[-5.0175e-02, -6.3467e-02, -1.9031e-02], [-3.9787e-03, 6.7482e-02, 7.8803e-02], [ 4.2257e-02, 1.0622e-01, 7.3138e-02]], [[ 5.2407e-03, -3.6852e-03, -8.6709e-03], [ 2.0730e-02, 1.4902e-02, 1.0197e-02], [ 1.3733e-03, 1.5938e-02, 8.5281e-03]], ..., [[ 8.6644e-03, 1.9630e-02, 3.8432e-02], [-3.1050e-02, -1.4623e-02, 3.7383e-02], [-2.4496e-03, -1.7097e-02, 4.1954e-02]], [[-1.7752e-02, 1.3695e-03, -1.7022e-02], [-1.0060e-02, 2.5673e-02, -5.9569e-03], [-2.0064e-02, 8.2016e-03, -9.5517e-03]], [[-1.4105e-02, 1.9151e-02, -1.3824e-02], [-3.1841e-02, -1.2734e-02, -7.6762e-04], [-5.9525e-03, -1.8225e-03, -8.0477e-03]]], [[[-3.1609e-02, 1.4933e-03, -3.0344e-02], [-1.7398e-02, 1.7254e-02, 1.6547e-02], [ 2.4680e-03, 2.8069e-02, 1.5319e-02]], [[-3.4980e-02, -4.6070e-02, -3.2813e-02], [-6.1726e-03, 1.8082e-02, -2.0178e-03], [-2.4896e-02, -3.0343e-02, -3.6734e-02]], [[ 1.2812e-02, -1.9017e-02, -3.1647e-02], [-1.3776e-03, -2.8989e-02, -3.3842e-02], [ 2.3589e-03, -1.2835e-02, -3.0366e-02]], ..., [[ 2.7212e-02, 2.1994e-02, 4.1790e-03], [ 5.6663e-03, -7.4175e-03, 1.2078e-02], [ 3.4419e-02, 4.3749e-02, 1.8199e-02]], [[ 3.1817e-02, 5.1574e-02, 2.6096e-02], [ 2.0946e-02, 4.6283e-02, 3.0637e-02], [ 3.2959e-02, 5.1468e-02, 2.2671e-02]], [[-4.1308e-02, -2.9503e-02, 5.7831e-03], [-9.5501e-03, -5.0758e-02, -4.6711e-02], [ 1.7047e-03, -1.8961e-02, -3.5022e-02]]], [[[-2.4149e-02, -1.5464e-04, -1.9964e-02], [ 8.8839e-03, 1.7890e-02, 3.3511e-03], [ 1.4627e-02, 2.3181e-02, -9.9772e-03]], [[-2.8819e-03, -1.0663e-02, 2.1506e-02], [-7.2196e-03, -6.6775e-03, 2.2589e-03], [-1.5120e-03, 3.6940e-03, 1.8853e-02]], [[-3.8860e-04, -2.5017e-02, 1.4404e-02], [ 2.4872e-03, 2.9249e-02, 2.3444e-02], [ 2.2812e-02, 2.3183e-03, -3.8342e-03]], ..., [[-8.1954e-03, 9.2276e-04, -1.3156e-02], [ 7.0602e-03, 3.8410e-02, -2.0833e-02], [ 5.9952e-03, 1.2888e-02, 1.4169e-03]], [[-2.5385e-02, -1.1391e-02, -3.1116e-02], [-2.6253e-02, -2.8104e-02, -2.3450e-02], [-2.7116e-02, 1.7011e-03, -1.0630e-02]], [[-1.5205e-02, 2.6851e-02, 2.2985e-02], [-8.3381e-03, 2.2706e-02, 1.4909e-02], [-2.2606e-02, -4.7597e-02, -3.8261e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn2.weight&#39;, tensor([0.2520, 0.0993, 0.1360, 0.3167, 0.1459, 0.2206, 0.0744, 0.2048, 0.0882, 0.1725, 0.0702, 0.1339, 0.0802, 0.0988, 0.0687, 0.1469, 0.2149, 0.1695, 0.1259, 0.2408, 0.1919, 0.2131, 0.1519, 0.1523, 0.1819, 0.1634, 0.1468, 0.2551, 0.2388, 0.1041, 0.1077, 0.1467, 0.1123, 0.0942, 0.2258, 0.1590, 0.2044, 0.1602, 0.1318, 0.2078, 0.2609, 0.1047, 0.1237, 0.1179, 0.3248, 0.2566, 0.2365, 0.2005, 0.2675, 0.2143, 0.2376, 0.0878, 0.1136, 0.1776, 0.1013, 0.1641, 0.2572, 0.1838, 0.0680, 0.1457, 0.1996, 0.1350, 0.1945, 0.1107, 0.0983, 0.1657, 0.1410, 0.2885, 0.1086, 0.2669, 0.2127, 0.1720, 0.1293, 0.1412, 0.1385, 0.1243, 0.2193, 0.1998, 0.1953, 0.1848, 0.2013, 0.1094, 0.1348, 0.2253, 0.2195, 0.2768, 0.2987, 0.2306, 0.1520, 0.2175, 0.1726, 0.1633, 0.1713, 0.1966, 0.1523, 0.1395, 0.3638, 0.2134, 0.2951, 0.0909, 0.1880, 0.1661, 0.2073, 0.2845, 0.0479, 0.1554, 0.1030, 0.2569, 0.1624, 0.1400, 0.1595, 0.1531, 0.1761, 0.1260, 0.4207, 0.3161, 0.1150, 0.0796, 0.1983, 0.0987, 0.0610, 0.1064, 0.1751, 0.2156, 0.1340, 0.1603, 0.2576, 0.0911], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn2.bias&#39;, tensor([-5.1280e-02, 8.2907e-03, 5.2041e-03, -1.4729e-01, 3.4962e-02, -1.3753e-01, -6.1975e-02, -7.4457e-03, 4.7232e-02, -9.2748e-02, 6.3449e-02, -1.5725e-01, -4.9655e-02, -1.3931e-01, -5.1287e-02, -8.6246e-02, -6.3142e-02, -6.9364e-02, -6.0032e-02, 3.0137e-02, -1.4547e-01, -5.1498e-02, 2.1805e-02, -2.9583e-01, -8.8354e-02, -1.3404e-01, -4.4695e-02, 6.9386e-02, -1.0396e-01, -1.0179e-01, -6.6067e-02, -1.4375e-01, -7.0253e-02, -8.7827e-02, -2.6114e-02, -2.4703e-01, -3.9168e-02, -4.9375e-02, -7.9529e-02, -3.1389e-01, -2.5722e-02, -1.4965e-01, 4.7373e-02, 5.5034e-02, -6.3091e-03, -2.6511e-01, 5.7305e-02, 3.5086e-02, -7.7176e-02, -8.7912e-02, -1.3341e-02, -6.1635e-02, -1.0221e-01, -3.2308e-01, 5.4261e-02, -8.1667e-02, -9.1540e-02, 4.2581e-02, 1.5584e-02, -8.7389e-02, -1.6390e-01, 3.0659e-02, 2.1383e-02, -8.5332e-02, -7.2008e-02, -7.8333e-02, -1.1607e-01, -6.5605e-02, -7.5001e-02, -1.8509e-01, 4.3329e-02, -1.2456e-01, 5.2819e-02, -8.0131e-02, 1.0947e-01, -7.7137e-02, -3.3026e-01, -3.0330e-01, -3.3389e-01, 3.6790e-02, -1.0902e-01, -1.5859e-01, 2.2926e-02, -5.9308e-02, 2.8441e-02, -6.9185e-02, -2.5017e-01, -3.9985e-01, 1.1016e-01, -1.7515e-01, -2.3685e-01, 4.2754e-02, 4.9455e-02, 2.8467e-04, 1.1335e-02, 7.4058e-02, -1.0965e-01, 3.7157e-02, 4.5054e-02, 9.9731e-03, 3.1144e-02, -1.5854e-01, -7.2886e-02, 1.0116e-01, -3.7501e-02, -1.0657e-01, 1.0057e-01, -1.6545e-01, 4.9648e-02, 9.0330e-02, 2.6487e-02, -2.6957e-01, -3.8557e-03, -3.9641e-02, -9.1169e-02, -1.2422e-01, -5.7579e-02, 1.7837e-02, 2.6092e-02, 8.0176e-02, 1.0449e-02, -2.7536e-02, -1.4786e-02, -7.7440e-02, 4.2955e-02, -3.1471e-02, -1.0600e-01, 1.5671e-02], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn2.running_mean&#39;, tensor([-2.3427e-02, 1.1078e-02, -4.2378e-02, -2.3636e-01, -3.7333e-02, -1.3344e-02, -5.1825e-02, 1.8286e-01, 4.3670e-02, -9.0998e-02, 8.0857e-03, 6.8403e-02, -8.7030e-02, 5.4668e-02, -1.2134e-02, -2.9451e-02, -9.0406e-02, -1.6758e-03, -5.0796e-02, -3.7877e-02, -8.2286e-02, -1.0359e-01, -1.4275e-02, 2.4621e-04, -6.0379e-02, -1.6793e-02, -1.0459e-01, 1.1389e-02, -1.1149e-01, 4.8854e-02, -4.8520e-02, 2.2235e-02, 1.8612e-02, 3.6892e-02, -4.5824e-02, 8.7091e-03, -4.4091e-02, 1.3279e-02, 2.2768e-02, -3.7752e-02, -2.1413e-01, 2.6856e-02, -2.9311e-03, -3.4869e-02, -1.4288e-01, -2.2884e-02, -7.6180e-02, -6.5868e-02, -9.1597e-02, -6.3165e-02, -1.4802e-02, 2.1361e-02, 5.1802e-02, -2.8737e-02, -9.7425e-03, -1.3013e-01, -9.4493e-02, -7.8744e-02, 2.8497e-02, 1.3406e-04, -2.5478e-02, -7.8573e-02, -1.6229e-02, 2.7523e-02, -8.0135e-02, 1.2486e-01, -1.9602e-04, -2.1195e-01, 1.0310e-01, -1.4512e-01, -2.6279e-02, -8.5900e-02, -1.2547e-01, -9.5244e-03, 7.2856e-02, 2.8114e-03, 4.6685e-02, -1.4123e-02, -3.1107e-02, -6.6401e-02, 6.3293e-02, -2.8517e-02, -2.2327e-02, -8.9438e-03, -3.5342e-02, -3.6119e-02, 1.5021e-03, -5.5366e-02, -7.2072e-02, -2.2696e-02, -1.2867e-02, 9.4138e-02, 1.2938e-02, -9.5093e-02, 3.6476e-02, -3.4576e-02, -1.1474e-01, -1.7310e-01, -1.7404e-02, -7.9239e-02, -6.2853e-02, -1.5056e-01, -5.3323e-02, -1.8002e-02, -1.5025e-02, 1.8399e-03, 4.4869e-02, -2.4100e-02, -4.2432e-02, -3.4831e-02, -6.5673e-02, 1.2140e-02, -5.8608e-02, -1.0280e-01, -1.8481e-01, -5.0667e-02, -2.5014e-02, -4.5705e-02, -7.8262e-02, -7.3167e-02, 3.4593e-02, 2.1250e-01, 9.1374e-03, -8.6182e-02, -2.1845e-02, 6.1624e-02, -3.0811e-01, -1.0479e-02], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn2.running_var&#39;, tensor([0.0156, 0.0078, 0.0063, 0.0251, 0.0143, 0.0077, 0.0046, 0.0098, 0.0089, 0.0065, 0.0089, 0.0113, 0.0044, 0.0053, 0.0054, 0.0082, 0.0125, 0.0081, 0.0051, 0.0092, 0.0059, 0.0103, 0.0061, 0.0065, 0.0066, 0.0062, 0.0117, 0.0106, 0.0168, 0.0048, 0.0075, 0.0063, 0.0077, 0.0046, 0.0151, 0.0051, 0.0121, 0.0065, 0.0070, 0.0055, 0.0199, 0.0060, 0.0062, 0.0076, 0.0133, 0.0146, 0.0151, 0.0098, 0.0117, 0.0082, 0.0135, 0.0060, 0.0061, 0.0089, 0.0091, 0.0074, 0.0150, 0.0075, 0.0046, 0.0055, 0.0081, 0.0088, 0.0100, 0.0056, 0.0059, 0.0082, 0.0054, 0.0158, 0.0057, 0.0088, 0.0099, 0.0055, 0.0086, 0.0059, 0.0117, 0.0046, 0.0093, 0.0072, 0.0071, 0.0110, 0.0076, 0.0068, 0.0084, 0.0073, 0.0137, 0.0108, 0.0082, 0.0066, 0.0092, 0.0066, 0.0069, 0.0092, 0.0078, 0.0076, 0.0109, 0.0133, 0.0174, 0.0111, 0.0174, 0.0066, 0.0097, 0.0063, 0.0067, 0.0174, 0.0037, 0.0063, 0.0079, 0.0106, 0.0085, 0.0109, 0.0096, 0.0073, 0.0104, 0.0058, 0.0169, 0.0124, 0.0054, 0.0068, 0.0101, 0.0096, 0.0065, 0.0102, 0.0091, 0.0114, 0.0088, 0.0078, 0.0150, 0.0049], device=&#39;cuda:0&#39;)), (&#39;0.5.2.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.3.conv1.weight&#39;, tensor([[[[-1.5617e-02, -3.2604e-02, 1.1045e-02], [-9.0399e-04, -3.8520e-02, 1.3295e-02], [-2.7214e-02, 1.9976e-02, 1.5753e-02]], [[-1.6309e-03, 3.4294e-03, -3.0290e-03], [-3.4988e-03, 1.3627e-03, -8.5092e-03], [ 9.3788e-03, -7.9902e-03, -1.3708e-02]], [[-1.6914e-03, -4.8165e-02, -5.2886e-03], [-2.1392e-02, -8.3270e-02, 5.1337e-02], [-4.2921e-02, -2.0457e-02, 1.0042e-01]], ..., [[-8.6394e-03, 8.3989e-03, 2.6167e-03], [ 2.4763e-03, 5.3620e-03, -1.3539e-02], [ 1.5163e-02, 6.1190e-03, -3.8435e-02]], [[ 2.7796e-02, 1.2091e-02, -3.1232e-02], [ 2.1629e-02, 1.3078e-02, -3.5167e-02], [ 9.8189e-03, -2.7725e-02, -6.0622e-02]], [[ 1.2130e-02, 1.2087e-03, -3.6403e-02], [-5.7391e-03, -6.4468e-03, -9.4103e-03], [-1.9140e-02, 1.2589e-02, -4.5525e-03]]], [[[ 2.8053e-02, 9.6086e-03, 1.6120e-03], [ 3.0318e-02, -5.7979e-03, -1.4257e-02], [ 1.2342e-02, -2.6603e-02, -3.1414e-02]], [[ 2.0611e-02, 1.4699e-02, 1.9055e-02], [ 5.1145e-03, -4.7347e-03, 5.3655e-03], [ 2.3171e-02, 1.4879e-03, -7.4018e-03]], [[-1.1914e-03, -4.9278e-02, -2.9319e-02], [-1.1345e-03, -3.7703e-02, -3.1555e-02], [ 1.0876e-02, -4.3809e-03, 7.3419e-03]], ..., [[-2.9172e-02, -1.8316e-02, -2.3335e-02], [-9.0564e-03, -1.3611e-03, -2.0494e-02], [ 1.7147e-02, 3.0329e-02, 1.6439e-02]], [[ 3.4037e-02, -3.6049e-02, -3.6345e-02], [ 8.1737e-02, -1.3219e-02, -4.8404e-02], [ 1.8573e-02, -1.6745e-02, -4.6934e-02]], [[ 8.2864e-03, 1.2659e-02, 6.2293e-03], [-3.4715e-02, -1.5978e-02, 1.6371e-02], [-1.1291e-02, -3.3375e-03, 1.5934e-02]]], [[[ 5.3992e-03, 2.0696e-02, 1.0515e-02], [-1.5571e-02, -2.7444e-03, 4.4771e-03], [-9.6753e-03, -3.0910e-03, -2.4641e-03]], [[ 5.9771e-03, 1.0645e-02, 1.1832e-02], [-1.3091e-02, -3.1011e-05, -5.5544e-03], [ 9.2038e-03, 2.1006e-02, 5.6477e-03]], [[ 9.0582e-03, 3.6551e-02, -1.7651e-02], [-4.5111e-03, -2.5058e-03, -1.9577e-02], [-2.2760e-02, -2.7879e-02, 1.1610e-02]], ..., [[-3.4857e-03, -5.4363e-03, -1.6783e-02], [-1.0268e-02, 3.2857e-02, 7.3439e-03], [-7.2453e-03, 2.2729e-03, -8.2704e-03]], [[ 3.9219e-03, 3.1187e-03, 2.9867e-03], [ 2.4755e-02, 6.5436e-03, 1.0297e-02], [ 1.3066e-02, 7.2964e-03, 9.9367e-03]], [[ 4.6930e-03, -1.3212e-02, -1.8425e-02], [ 1.5639e-02, -3.7880e-02, -1.1915e-02], [ 2.6370e-02, 4.7839e-02, 1.0435e-02]]], ..., [[[-1.5421e-03, 1.8016e-02, -5.0344e-02], [ 8.0031e-03, 2.7786e-02, -5.7100e-02], [-8.3015e-03, 4.7799e-02, 1.0308e-02]], [[ 4.1608e-03, -1.2346e-02, 1.1311e-02], [ 3.2363e-03, 1.3588e-02, 3.8268e-03], [ 1.9291e-03, 6.3585e-03, 1.0513e-03]], [[-2.9477e-02, 3.4305e-02, 6.7658e-03], [-8.5945e-02, -3.2396e-03, 5.1179e-02], [-8.1657e-02, -1.7510e-02, 3.3621e-02]], ..., [[-4.9753e-03, 3.1922e-02, 6.3949e-03], [-2.9353e-02, 2.8108e-02, 5.4001e-03], [-1.4783e-03, -3.4994e-03, -1.7613e-02]], [[ 1.7022e-03, 9.7621e-03, -8.0651e-03], [-2.4657e-02, 1.3090e-02, -3.3843e-03], [-3.9693e-02, -3.0274e-02, -2.7683e-02]], [[ 2.6174e-02, -6.5257e-03, 2.1702e-03], [ 3.3254e-03, -1.4936e-02, -1.8737e-02], [-5.8002e-03, -1.3640e-04, -1.1451e-02]]], [[[-2.9849e-02, -1.3355e-03, 1.8042e-02], [-5.4357e-02, 4.8455e-02, 1.0006e-01], [-6.6672e-02, -3.2875e-02, 5.4112e-02]], [[-4.9209e-03, 5.9043e-03, -7.1907e-03], [ 2.1514e-02, 1.6443e-02, -1.4322e-02], [ 1.5491e-02, 2.3736e-02, -2.0303e-03]], [[ 5.8090e-03, 1.2195e-02, -9.5016e-03], [-4.1070e-02, -3.3886e-02, 9.1195e-02], [-4.7512e-03, -3.3223e-02, 1.3081e-02]], ..., [[-1.9657e-02, -1.8904e-02, -8.5175e-03], [ 3.7001e-02, 2.6838e-02, -7.5257e-02], [-1.8414e-02, 1.0077e-02, -1.8046e-02]], [[ 1.3722e-02, -4.3000e-03, -1.5600e-02], [ 2.6842e-02, 2.1244e-02, 1.9208e-02], [-5.6920e-03, -5.3493e-04, 4.3128e-02]], [[-8.2609e-03, -9.3935e-03, -1.9161e-02], [ 5.3998e-02, 7.3858e-03, -1.2647e-01], [ 4.5538e-02, 2.1894e-02, -7.5230e-02]]], [[[ 8.5511e-04, -4.5995e-02, -3.8483e-02], [-4.5871e-03, -3.5581e-02, -4.9378e-03], [-7.0746e-02, -3.4883e-02, 1.4131e-02]], [[-1.1197e-02, 9.9421e-04, -5.3754e-03], [-5.7305e-03, 2.0827e-03, -1.7589e-02], [ 2.7146e-03, -1.4136e-02, 3.0502e-03]], [[ 2.4290e-02, 2.3807e-02, -9.0319e-03], [ 1.1745e-02, -1.1177e-02, -4.1703e-03], [ 1.1531e-02, -2.0726e-02, 1.9704e-02]], ..., [[-2.4446e-02, -2.0438e-02, 9.9492e-03], [ 1.0165e-02, -3.2898e-02, -2.4592e-02], [ 2.4979e-02, 1.9249e-02, -5.6537e-02]], [[-2.8426e-02, 1.0347e-02, 6.0221e-03], [ 1.4722e-02, -3.3314e-02, 6.5556e-03], [-2.7919e-02, -4.7769e-02, 2.0952e-02]], [[ 1.1774e-02, -1.3617e-02, -2.6165e-02], [ 1.2074e-02, -1.6081e-02, -4.3611e-02], [ 2.5751e-02, -1.2181e-02, -1.0717e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn1.weight&#39;, tensor([0.2140, 0.1821, 0.2298, 0.2057, 0.2431, 0.2375, 0.2651, 0.2937, 0.2423, 0.2300, 0.2850, 0.2258, 0.2393, 0.2055, 0.2349, 0.2440, 0.2563, 0.2159, 0.2655, 0.1931, 0.2188, 0.2654, 0.2624, 0.2698, 0.2070, 0.2323, 0.2957, 0.2681, 0.2498, 0.2046, 0.2615, 0.2535, 0.2394, 0.2417, 0.2365, 0.2680, 0.2470, 0.2078, 0.2124, 0.2564, 0.2978, 0.2031, 0.2257, 0.2497, 0.2934, 0.2318, 0.2381, 0.2254, 0.2427, 0.2369, 0.2212, 0.2049, 0.2179, 0.2371, 0.2299, 0.2606, 0.2888, 0.2944, 0.2616, 0.2862, 0.2187, 0.2207, 0.2533, 0.2619, 0.2638, 0.2951, 0.3098, 0.2074, 0.2315, 0.2357, 0.2393, 0.2451, 0.2843, 0.2748, 0.2458, 0.2203, 0.2678, 0.2370, 0.2895, 0.2187, 0.2454, 0.2546, 0.2583, 0.2489, 0.2211, 0.2439, 0.2269, 0.2645, 0.2726, 0.3394, 0.2260, 0.2566, 0.2024, 0.2199, 0.2669, 0.2506, 0.2093, 0.1894, 0.2945, 0.2427, 0.2411, 0.2629, 0.2211, 0.2810, 0.2264, 0.2782, 0.2277, 0.2631, 0.2209, 0.2755, 0.2543, 0.2432, 0.2678, 0.3053, 0.2177, 0.2416, 0.2152, 0.2048, 0.2233, 0.2869, 0.2263, 0.2470, 0.2305, 0.1974, 0.2805, 0.2237, 0.2415, 0.2944], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn1.bias&#39;, tensor([-0.1808, -0.1416, -0.1692, -0.1883, -0.1970, -0.1779, -0.2329, -0.3051, -0.3061, -0.2024, -0.2963, -0.2081, -0.2125, -0.2108, -0.1868, -0.1624, -0.3298, -0.1464, -0.1852, -0.1582, -0.1798, -0.2051, -0.3768, -0.2868, -0.2174, -0.1856, -0.3601, -0.3371, -0.2381, -0.1495, -0.3148, -0.2128, -0.2493, -0.1970, -0.1931, -0.3615, -0.1697, -0.1683, -0.1884, -0.2685, -0.3586, -0.1762, -0.1853, -0.2982, -0.3301, -0.2417, -0.2369, -0.2130, -0.1675, -0.2548, -0.1928, -0.1404, -0.1013, -0.1732, -0.2181, -0.2882, -0.3663, -0.3328, -0.2364, -0.2596, -0.1537, -0.1808, -0.3045, -0.2921, -0.2742, -0.3579, -0.3981, -0.2238, -0.1767, -0.2513, -0.2807, -0.2641, -0.2821, -0.2750, -0.2856, -0.1904, -0.3200, -0.2005, -0.2582, -0.3719, -0.2833, -0.2017, -0.3998, -0.2322, -0.1593, -0.1868, -0.1432, -0.1835, -0.2619, -0.4143, -0.1780, -0.2310, -0.1578, -0.1876, -0.2399, -0.3029, -0.1160, -0.1092, -0.3174, -0.2733, -0.2479, -0.3730, -0.1764, -0.2874, -0.1707, -0.2825, -0.1773, -0.2434, -0.1160, -0.3716, -0.3052, -0.2441, -0.2673, -0.3987, -0.1776, -0.2551, -0.1884, -0.1466, -0.1712, -0.3062, -0.2157, -0.1680, -0.1668, -0.1661, -0.2599, -0.1379, -0.1699, -0.3754], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn1.running_mean&#39;, tensor([-4.6237e-01, -3.3836e-01, -1.6498e-01, -6.3935e-01, -5.6377e-01, -4.8095e-01, -4.6761e-01, -7.0336e-02, -4.3554e-01, 3.3164e-01, -6.7571e-01, 3.1151e-02, -1.7634e-01, -1.4605e-01, -3.5666e-01, -3.2730e-01, -1.2838e+00, 7.2431e-01, -2.7827e-01, -3.2880e-01, -9.9301e-02, -5.1605e-01, -1.3111e+00, -3.6045e-01, -1.2114e-03, -1.1248e-01, -7.8718e-01, -7.1356e-01, -3.0933e-01, -3.6793e-01, -9.5678e-01, -7.3750e-01, -1.7957e-01, -1.3706e-01, -6.7883e-01, -8.7097e-01, -8.1025e-01, 1.3002e-01, -1.8426e-01, -7.1286e-01, -5.3245e-01, 7.6318e-03, -1.7132e-01, -5.1827e-01, -3.8842e-01, -7.0008e-01, -4.5477e-01, -5.2915e-01, -9.7552e-02, -2.5177e-01, 2.5930e-01, -5.9323e-01, 1.8473e-01, -2.0705e-01, -1.9961e-02, -1.9060e-01, -4.0952e-01, -4.7632e-01, -2.1798e-01, -7.1053e-01, -3.1274e-02, -1.0741e+00, -5.8214e-01, -1.0356e-01, -9.5939e-02, -3.7373e-01, -3.3696e-01, -2.7774e-01, -6.9751e-01, -7.9876e-01, -1.0754e+00, -5.6256e-01, -7.6081e-01, -9.8479e-01, -4.7927e-01, -2.7215e-01, -6.4556e-01, -6.4718e-01, -3.1285e-01, 7.1649e-01, 3.8382e-01, -1.9852e-01, -3.4109e-01, -4.0788e-01, -5.0191e-01, -1.6837e-01, -7.0886e-01, -3.5917e-01, -4.6697e-01, -1.6682e+00, -3.2699e-01, -3.0116e-01, -5.8179e-02, -4.3914e-01, -6.3341e-01, -9.8734e-01, -2.3145e-01, -4.3829e-01, -3.5347e-01, -5.9675e-01, -4.0666e-01, -2.3289e-01, 9.3297e-02, -3.8842e-01, -3.6373e-01, -3.7566e-01, -2.3537e-01, -5.3134e-01, -5.0628e-03, -4.5982e-01, -3.3641e-01, -8.5904e-01, -2.9584e-02, -3.3867e-01, -3.0838e-01, -2.4203e-01, -2.2063e-01, 2.6169e-02, -3.5006e-01, -2.3900e-01, -6.5157e-01, -3.9907e-01, 2.6453e-01, -2.0263e-01, -1.9099e-01, -3.3446e-01, -4.8136e-01, -7.3905e-01], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn1.running_var&#39;, tensor([0.2082, 0.1329, 0.2574, 0.1743, 0.2554, 0.3093, 0.3506, 0.3690, 0.1787, 0.1546, 0.2057, 0.2181, 0.3074, 0.1616, 0.2807, 0.3381, 0.1652, 0.2274, 0.3859, 0.1353, 0.2656, 0.3747, 0.1721, 0.2235, 0.1214, 0.3150, 0.1981, 0.2145, 0.1695, 0.2314, 0.1689, 0.3411, 0.1831, 0.2097, 0.2315, 0.1865, 0.2603, 0.2431, 0.2125, 0.1262, 0.2465, 0.1818, 0.2949, 0.1925, 0.1289, 0.1930, 0.2377, 0.1764, 0.3483, 0.1667, 0.2005, 0.3493, 0.3305, 0.2122, 0.1816, 0.2725, 0.1668, 0.2067, 0.3026, 0.2387, 0.3503, 0.2204, 0.1555, 0.1562, 0.1753, 0.2144, 0.2694, 0.1157, 0.2228, 0.2210, 0.1865, 0.1652, 0.1860, 0.1437, 0.2031, 0.1853, 0.2762, 0.2138, 0.4588, 0.1161, 0.2562, 0.2158, 0.1193, 0.2233, 0.2867, 0.3456, 0.2879, 0.4582, 0.2894, 0.2066, 0.2330, 0.2594, 0.2552, 0.1550, 0.2409, 0.1703, 0.2662, 0.1918, 0.2839, 0.1800, 0.1529, 0.1165, 0.2115, 0.2983, 0.2619, 0.1887, 0.3480, 0.1670, 0.3027, 0.1165, 0.1263, 0.2310, 0.2252, 0.1496, 0.2584, 0.1939, 0.2075, 0.1828, 0.2873, 0.3055, 0.1729, 0.3942, 0.2340, 0.2093, 0.3906, 0.4161, 0.2951, 0.1893], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.5.3.conv2.weight&#39;, tensor([[[[ 1.1843e-02, -2.5679e-02, -2.6965e-02], [-2.3676e-03, -2.9066e-02, -3.4709e-02], [-2.8728e-02, -2.7014e-02, -3.3606e-02]], [[ 4.5731e-03, -4.8728e-03, -1.6497e-02], [ 1.1019e-03, -2.3193e-02, -3.3842e-02], [ 5.5824e-03, -8.4752e-03, -1.4598e-02]], [[-3.4985e-03, 1.1874e-02, 9.5346e-03], [ 1.1386e-02, 1.3910e-02, 5.2167e-03], [ 2.2746e-02, 9.2491e-03, 2.6363e-03]], ..., [[ 1.0915e-02, -1.6664e-02, -1.5840e-02], [ 4.3960e-02, -1.2500e-02, 6.8155e-03], [ 2.5211e-02, 2.7093e-02, 2.9178e-02]], [[ 1.5511e-02, 5.1650e-03, -3.3800e-04], [ 1.1269e-02, 1.7214e-02, -1.7115e-02], [-5.3995e-03, 1.3489e-03, -1.7782e-02]], [[-2.9740e-03, -2.7153e-02, 1.5628e-02], [-3.1797e-02, -4.5191e-02, -7.9639e-03], [-4.2232e-02, -5.4558e-03, 5.3113e-03]]], [[[-4.5012e-04, -6.0519e-03, 2.6662e-03], [ 5.1869e-03, -1.4114e-03, 5.4687e-04], [ 2.3347e-03, -5.9871e-03, -2.0220e-03]], [[-1.2966e-04, 2.7313e-03, 6.8611e-03], [ 2.3201e-03, 5.4599e-03, 9.1707e-03], [ 3.0454e-03, 2.2074e-03, 4.7181e-03]], [[-8.4983e-03, -8.6639e-03, -7.4807e-03], [-4.7336e-03, -8.7627e-03, -1.2335e-02], [-6.9252e-03, -5.0420e-03, -1.1261e-02]], ..., [[ 2.8816e-05, -1.0331e-02, 8.1146e-03], [ 1.2226e-02, -1.0268e-02, -1.2434e-03], [ 1.0232e-02, -1.2035e-02, -7.6940e-03]], [[ 8.3309e-03, 4.7625e-03, 1.3223e-02], [ 1.1264e-02, 6.5385e-03, 1.3176e-02], [ 9.1790e-03, 3.5862e-03, 7.1030e-03]], [[ 2.6480e-03, -8.5327e-03, 7.1561e-03], [ 1.0430e-02, -1.7621e-02, 9.3444e-03], [ 1.2031e-02, -1.3264e-02, 5.6481e-03]]], [[[-6.3416e-04, 1.3692e-02, 1.0484e-02], [ 9.5728e-03, 2.6087e-02, -1.4107e-02], [ 1.1338e-02, -2.6775e-03, -2.6540e-02]], [[ 3.1690e-02, 3.0584e-02, 9.8333e-03], [ 1.9590e-02, 6.5667e-03, -1.0711e-02], [-2.5801e-03, -2.6240e-02, -2.6087e-03]], [[ 2.3534e-03, 2.2989e-03, 4.5396e-03], [ 2.2572e-02, 2.9108e-02, -2.4524e-05], [ 5.6685e-03, 1.3423e-02, 4.4948e-03]], ..., [[-7.5765e-04, -3.5698e-02, -8.0223e-03], [ 2.3901e-02, 6.2955e-03, -2.9569e-03], [ 3.8649e-02, 3.1712e-02, 3.8184e-02]], [[-2.9383e-02, 1.9290e-03, 4.8806e-03], [-2.4420e-02, -8.2977e-03, 6.7083e-03], [-1.5026e-02, -2.7257e-02, -1.9920e-02]], [[-2.8976e-02, -1.3708e-02, 3.4641e-02], [-5.0623e-02, -3.3536e-02, 8.2251e-03], [-2.3133e-02, -1.2112e-03, -1.5752e-03]]], ..., [[[ 6.5853e-03, 1.4549e-02, -2.7697e-03], [ 1.3346e-02, 8.0936e-03, 1.0788e-02], [ 9.9067e-03, -1.5807e-03, -7.5640e-03]], [[ 1.5055e-02, 6.6618e-03, -5.1482e-03], [ 9.4142e-03, -1.5147e-02, -1.2440e-02], [-7.0248e-03, -2.7922e-02, -2.5433e-02]], [[-1.1858e-02, 1.1590e-02, -2.1547e-03], [ 2.5267e-02, 2.1830e-02, 1.7778e-02], [ 3.2160e-02, 6.0134e-02, 3.2808e-02]], ..., [[-3.5610e-03, 1.1166e-02, -1.0090e-02], [ 7.4727e-03, 2.7479e-02, 1.8550e-02], [ 1.4070e-03, 7.5979e-03, 1.1309e-02]], [[-2.6824e-02, -1.5958e-02, 5.8058e-03], [-6.3279e-03, 4.9610e-02, 1.2578e-02], [-3.2301e-03, 2.1416e-02, -1.1331e-02]], [[ 8.8167e-04, 3.5932e-03, 2.4224e-02], [-1.6510e-02, -4.0222e-03, 5.8149e-02], [ 7.3225e-03, -2.0440e-02, 1.8228e-02]]], [[[ 2.5161e-03, 7.7839e-03, 2.3850e-03], [ 2.7559e-02, 5.3909e-05, 9.8183e-03], [ 3.7488e-02, -1.2231e-02, 1.2639e-02]], [[-1.9681e-02, 8.5449e-03, -7.7686e-03], [-5.5327e-04, 1.8629e-02, 1.3140e-02], [-9.8407e-03, 4.3280e-03, -4.0685e-03]], [[-1.5768e-02, -4.0933e-02, 6.2664e-04], [-2.5469e-02, -2.4969e-02, -7.0801e-03], [-2.9922e-02, -2.4988e-02, -2.3782e-02]], ..., [[ 2.3682e-02, 2.1562e-02, -3.9411e-03], [ 7.4769e-03, 3.7049e-02, 1.0300e-02], [-3.0136e-03, 1.6803e-02, -3.5224e-03]], [[-1.4304e-02, 9.0648e-03, 3.3021e-02], [ 7.7988e-04, 1.7471e-02, 1.1083e-03], [-2.6188e-02, -6.2560e-03, -1.3010e-02]], [[ 6.8547e-03, -1.1494e-02, 3.6359e-02], [ 7.2755e-03, -3.7338e-02, 3.5073e-02], [ 1.4621e-02, -4.1675e-02, 1.5016e-02]]], [[[ 2.4317e-02, 1.6776e-02, 7.0358e-03], [ 1.5558e-02, 7.8799e-03, 3.4101e-02], [ 8.1472e-03, 8.6370e-04, 3.3463e-02]], [[ 5.9459e-03, -1.5557e-02, -1.0026e-02], [-3.5682e-03, -1.8913e-02, -2.2661e-02], [ 9.7083e-03, -1.8419e-02, -1.5624e-02]], [[ 4.9046e-03, -8.3920e-03, -1.0850e-02], [ 9.1874e-03, 1.0139e-02, 8.9079e-03], [ 2.1061e-02, 9.4002e-03, 1.2127e-02]], ..., [[ 1.4936e-02, 7.6929e-03, 1.3801e-02], [ 1.8190e-02, -2.7161e-03, 3.2868e-02], [ 2.3413e-02, -6.2507e-03, 1.1826e-02]], [[-1.0661e-02, 1.4447e-02, 6.2958e-03], [-1.8844e-02, 4.1015e-03, 2.7843e-02], [ 2.6216e-03, -8.0022e-03, -6.2411e-03]], [[-1.4113e-02, 3.8708e-03, 1.3187e-02], [-2.6732e-02, 1.1314e-02, 3.4841e-02], [-1.1020e-02, -5.5434e-03, 3.7466e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn2.weight&#39;, tensor([ 0.1934, -0.0172, 0.1622, 0.2806, 0.1522, 0.3499, 0.1178, 0.2181, 0.0007, 0.3093, 0.0566, 0.0468, 0.0720, 0.0831, 0.0570, 0.2041, 0.0565, 0.2177, 0.0838, 0.1817, 0.2861, 0.2107, 0.2701, 0.0723, 0.2045, 0.2402, 0.1369, 0.3154, 0.1986, 0.1219, 0.1017, 0.0974, 0.0876, 0.1218, 0.1879, 0.0561, 0.2167, 0.1575, 0.2092, 0.2065, 0.1948, 0.1124, 0.0799, 0.1111, 0.3870, 0.1413, 0.2067, 0.3093, 0.2910, 0.1668, 0.3557, 0.1457, 0.0986, 0.1069, 0.1935, 0.2058, 0.2841, 0.2971, 0.0752, 0.0686, 0.0316, 0.1371, 0.2442, 0.1750, 0.0962, 0.1226, 0.0481, 0.2486, 0.0886, 0.4060, 0.2735, 0.2137, 0.2164, 0.1203, 0.1612, 0.1646, 0.0645, 0.0987, 0.0872, 0.1616, 0.1981, 0.1356, 0.1790, 0.3354, 0.2607, 0.1953, 0.5024, 0.2158, 0.1938, 0.3418, 0.0661, 0.2342, 0.2092, 0.2880, 0.1553, 0.1220, 0.2980, 0.2573, 0.2060, 0.1583, 0.2668, 0.2351, 0.3493, 0.1942, 0.0115, 0.2036, 0.1108, 0.2810, 0.0828, 0.1535, 0.2053, 0.0749, 0.1545, 0.1162, 0.2904, 0.3165, 0.0447, 0.0827, 0.2040, 0.0949, 0.0867, 0.0294, 0.1816, 0.3151, 0.1330, 0.1712, 0.2373, 0.0977], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn2.bias&#39;, tensor([ 0.1157, 0.0327, -0.2611, -0.1265, -0.0853, -0.1342, 0.1093, 0.2671, 0.0032, -0.2671, 0.0267, 0.0468, 0.0504, -0.0806, 0.0746, -0.0158, 0.0115, -0.1735, -0.0596, 0.1925, -0.1353, 0.0211, -0.1271, 0.0555, -0.3222, 0.2304, -0.0490, 0.1410, -0.2019, 0.1049, -0.0268, 0.0019, -0.0024, -0.1806, 0.0903, 0.0798, 0.0777, -0.2361, 0.0059, -0.1334, -0.1510, 0.1148, 0.0478, 0.0593, -0.4909, -0.0340, -0.1863, 0.0489, -0.1256, 0.1324, -0.1025, -0.0504, -0.0182, -0.1037, 0.0992, -0.1924, -0.0161, -0.2653, -0.0295, 0.0540, 0.0230, -0.0122, 0.0141, 0.0199, -0.0969, -0.1080, 0.0167, -0.1108, 0.0710, -0.1532, -0.0682, -0.3386, 0.0180, -0.1053, 0.0148, -0.0312, -0.0555, -0.1126, -0.1160, 0.0525, 0.0725, -0.1202, -0.2046, -0.3375, -0.1687, -0.0772, -0.1293, -0.1293, 0.0721, -0.1200, 0.0035, 0.0753, 0.0957, 0.0273, -0.0102, -0.0083, -0.1244, 0.1630, 0.0266, 0.0950, -0.0181, -0.1987, -0.3728, -0.2098, 0.0264, -0.1631, 0.0525, 0.0269, 0.0579, 0.0532, 0.0851, 0.0619, 0.0413, -0.0643, -0.0821, -0.2052, 0.0395, 0.0649, 0.0169, 0.0636, 0.0120, 0.0350, -0.0232, -0.3964, -0.0896, -0.1213, -0.1217, -0.1504], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn2.running_mean&#39;, tensor([-0.0527, 0.0033, 0.0099, -0.1463, -0.0068, -0.0273, -0.1198, 0.0354, 0.0007, -0.0438, -0.0377, 0.0161, -0.0195, -0.0221, 0.0080, 0.0686, -0.0356, -0.0338, -0.0437, -0.0317, -0.0125, -0.0024, 0.0220, -0.0355, -0.0092, -0.0359, -0.0220, -0.0954, -0.0069, -0.0423, 0.0101, 0.0117, 0.0078, -0.0004, 0.1258, -0.0009, -0.0274, -0.0049, 0.0258, -0.0420, -0.1206, -0.0382, 0.0117, -0.0171, -0.0683, -0.0088, -0.0083, 0.0256, 0.0323, 0.0080, -0.0687, -0.0190, -0.0135, -0.0309, -0.0332, -0.0163, -0.0358, -0.0142, -0.0056, -0.0268, -0.0190, 0.0322, -0.0378, -0.0116, -0.0272, 0.0216, -0.0168, -0.1206, -0.0778, -0.0226, 0.0057, -0.0129, -0.1161, -0.0147, -0.0591, -0.0285, -0.0150, -0.0373, -0.0047, -0.0185, 0.0681, 0.0244, 0.0477, -0.0155, -0.0007, -0.0377, 0.0119, -0.0228, -0.0509, -0.0322, -0.0212, -0.0832, -0.0247, 0.0272, -0.0257, -0.0748, -0.1503, -0.0555, 0.0117, 0.0099, 0.0233, 0.0091, -0.0040, 0.0445, 0.0075, -0.0534, -0.0106, 0.0126, -0.0463, 0.0016, -0.0693, -0.0689, -0.0163, -0.0601, -0.1330, -0.0139, -0.0050, -0.0110, -0.0048, -0.0186, -0.0322, -0.0103, -0.0381, 0.0116, 0.0002, 0.0430, -0.1373, 0.0305], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn2.running_var&#39;, tensor([0.0066, 0.0013, 0.0036, 0.0117, 0.0077, 0.0107, 0.0065, 0.0088, 0.0013, 0.0076, 0.0045, 0.0027, 0.0031, 0.0027, 0.0040, 0.0075, 0.0017, 0.0067, 0.0019, 0.0044, 0.0061, 0.0066, 0.0090, 0.0020, 0.0028, 0.0087, 0.0071, 0.0107, 0.0075, 0.0050, 0.0040, 0.0028, 0.0033, 0.0030, 0.0077, 0.0019, 0.0084, 0.0038, 0.0086, 0.0037, 0.0065, 0.0047, 0.0024, 0.0040, 0.0100, 0.0043, 0.0061, 0.0087, 0.0083, 0.0050, 0.0112, 0.0058, 0.0035, 0.0033, 0.0113, 0.0038, 0.0087, 0.0075, 0.0023, 0.0020, 0.0012, 0.0045, 0.0080, 0.0053, 0.0028, 0.0033, 0.0012, 0.0105, 0.0040, 0.0103, 0.0081, 0.0038, 0.0093, 0.0024, 0.0092, 0.0050, 0.0012, 0.0018, 0.0016, 0.0057, 0.0058, 0.0039, 0.0051, 0.0060, 0.0084, 0.0046, 0.0124, 0.0052, 0.0075, 0.0090, 0.0017, 0.0077, 0.0067, 0.0076, 0.0059, 0.0075, 0.0085, 0.0101, 0.0074, 0.0075, 0.0089, 0.0044, 0.0053, 0.0056, 0.0017, 0.0047, 0.0035, 0.0096, 0.0030, 0.0070, 0.0094, 0.0025, 0.0055, 0.0033, 0.0078, 0.0077, 0.0014, 0.0042, 0.0065, 0.0044, 0.0060, 0.0021, 0.0056, 0.0080, 0.0042, 0.0043, 0.0108, 0.0037], device=&#39;cuda:0&#39;)), (&#39;0.5.3.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.0.conv1.weight&#39;, tensor([[[[ 6.6109e-03, -1.3299e-02, 8.6275e-03], [-1.7965e-02, -6.3021e-03, 9.0845e-03], [-1.9155e-04, -1.0701e-02, -1.2373e-03]], [[-2.6217e-03, 6.5241e-03, 1.9525e-03], [ 1.4993e-02, 1.2690e-02, 1.1199e-02], [ 4.2096e-02, 3.0960e-02, 3.0644e-02]], [[ 4.7585e-03, 1.6088e-02, 4.1983e-03], [ 8.5781e-03, -1.4843e-02, -1.3070e-02], [ 1.9816e-02, 1.5508e-02, 5.4721e-03]], ..., [[ 3.3447e-02, 4.4460e-02, 3.6716e-02], [ 3.4864e-02, 3.2608e-02, 2.6890e-02], [-3.2505e-04, -4.9649e-03, 1.0761e-02]], [[ 5.5313e-04, -1.5167e-02, 4.7782e-03], [-1.0902e-02, -1.3533e-02, 1.6479e-02], [-8.8005e-03, -3.2810e-02, 8.9990e-03]], [[ 4.8716e-03, 2.5381e-02, 1.7304e-02], [-3.3535e-04, 1.7003e-02, 1.9357e-02], [ 7.5769e-03, 2.5346e-02, 2.1581e-02]]], [[[-7.0132e-03, -2.1172e-02, -3.3235e-02], [-2.5436e-02, -4.2977e-02, -5.1920e-02], [ 1.6750e-02, -8.4644e-03, -2.4523e-02]], [[ 3.8344e-03, -1.0929e-02, -4.4663e-03], [ 3.0129e-02, 2.1013e-02, -9.5880e-03], [ 2.4018e-02, 2.9145e-02, 1.5949e-02]], [[ 8.1271e-03, -1.1290e-03, -1.0909e-02], [ 1.2264e-02, -1.7098e-02, -1.4711e-02], [ 4.4155e-02, 4.8080e-02, -1.1814e-02]], ..., [[-2.3475e-02, -1.5185e-02, -1.9456e-02], [-1.8997e-02, 8.8524e-03, -1.1642e-02], [-3.4719e-03, 2.3206e-02, 3.2755e-03]], [[-5.4288e-03, 3.4537e-03, 3.6808e-02], [-2.7957e-02, -1.7777e-02, 1.2919e-02], [-9.3243e-03, -3.4596e-02, -1.5422e-02]], [[ 6.3900e-03, 2.1197e-02, 1.0627e-02], [ 3.6595e-02, 2.4659e-02, 1.7735e-02], [ 4.9746e-02, 4.9714e-02, 7.7462e-03]]], [[[ 9.5160e-04, -1.0291e-02, -6.4031e-03], [-5.3253e-04, 7.1770e-03, 1.6731e-02], [-2.4513e-02, -9.9339e-03, -2.5744e-03]], [[-5.3610e-03, -9.4371e-03, -1.9478e-02], [ 1.9811e-02, 3.3162e-02, 9.3813e-03], [ 8.3431e-03, 9.6411e-03, -1.1136e-02]], [[-1.5033e-02, -2.4073e-02, -1.1188e-02], [-9.6051e-03, -2.9975e-02, -1.8388e-02], [-2.8814e-02, -2.0567e-02, -2.9539e-02]], ..., [[ 1.3768e-02, 6.8695e-03, 1.0092e-04], [ 4.6377e-03, 7.3056e-03, -1.6965e-02], [-2.8140e-03, 1.3107e-03, -8.2863e-04]], [[-8.5893e-03, -1.0864e-02, 1.4404e-02], [-1.9063e-02, -2.4667e-02, 2.6556e-02], [ 1.9939e-03, -2.3064e-04, 2.8823e-02]], [[-4.0676e-02, -3.8527e-02, -6.3050e-02], [-3.3925e-02, -3.6206e-02, -3.5452e-02], [-4.0446e-02, -2.3586e-02, -2.3641e-02]]], ..., [[[-4.5676e-03, -1.3168e-03, -6.1511e-03], [ 7.6469e-03, -2.2492e-03, -2.4221e-02], [-7.0810e-03, -2.1280e-02, -1.4707e-03]], [[-5.2071e-03, -8.7771e-03, 4.9827e-04], [-3.5195e-03, 3.2939e-03, -1.9391e-04], [-1.2102e-02, -1.3261e-02, 1.4222e-03]], [[ 1.0574e-03, 1.3863e-02, 2.1545e-02], [ 3.1164e-05, -3.3536e-03, 1.7010e-02], [ 3.5936e-03, -1.8888e-03, -5.1162e-03]], ..., [[-3.8650e-03, 1.9200e-02, 3.2984e-02], [-2.9472e-02, -4.4206e-02, -5.3473e-03], [-1.7947e-02, -1.2298e-02, -2.3744e-02]], [[-2.7184e-02, -2.9584e-02, -2.2998e-02], [-2.8310e-02, 6.9042e-03, -3.0280e-02], [-1.6728e-02, -4.4315e-03, -1.7848e-02]], [[ 5.0397e-02, 7.9196e-02, 7.4724e-02], [-3.0312e-03, 2.8207e-02, 5.7979e-02], [-4.9528e-02, -7.5423e-02, -1.9020e-02]]], [[[ 3.9468e-03, -1.0106e-02, -2.2502e-02], [-1.9310e-02, -2.8040e-03, -3.8387e-03], [ 5.0177e-04, -8.3332e-03, -1.0375e-02]], [[ 1.7979e-02, 4.9135e-04, 1.1470e-02], [-1.9619e-02, -3.6646e-03, -2.2917e-02], [-4.5315e-02, -6.4362e-02, -7.2031e-02]], [[ 1.9039e-02, 7.4341e-03, 1.8125e-04], [-1.7592e-04, -1.4867e-02, 1.3638e-02], [-1.6740e-02, -9.8956e-03, 1.7611e-02]], ..., [[ 2.1424e-02, 3.0108e-02, 1.8489e-02], [-9.9056e-03, 1.0211e-03, -3.3603e-03], [-2.1860e-02, -2.3398e-02, -3.0131e-02]], [[-7.3199e-03, -2.0454e-02, -2.4112e-02], [-3.3615e-03, -9.5811e-04, -8.7689e-03], [-3.5764e-03, 5.0149e-03, 8.5776e-03]], [[ 2.0772e-02, 3.3597e-02, 1.8268e-02], [ 4.9538e-03, 3.6910e-02, 4.1788e-02], [ 6.4905e-03, 1.4578e-02, 5.3638e-03]]], [[[ 2.1300e-03, 5.2275e-03, -4.9303e-03], [ 1.7066e-02, -1.5742e-02, -5.8042e-03], [ 1.5735e-02, 2.7913e-03, -8.7123e-03]], [[-4.9270e-03, -1.8101e-03, -8.0144e-03], [-1.6154e-02, 2.9270e-03, 6.6523e-03], [-6.6405e-03, -9.7688e-03, 1.1817e-02]], [[-1.0076e-02, -1.4711e-03, 6.7257e-04], [-2.1898e-02, -3.9397e-02, -1.9297e-02], [ 8.5592e-03, -2.5251e-02, -4.0020e-03]], ..., [[-1.8084e-03, -1.4765e-03, 1.1403e-03], [ 2.4767e-03, 9.7364e-03, -6.4798e-03], [ 6.0502e-04, -1.3738e-02, -3.6374e-04]], [[ 1.1940e-02, 7.9112e-03, -9.4564e-03], [ 3.3729e-02, 2.4387e-02, 1.3065e-02], [ 3.3178e-02, 7.4084e-02, 4.4261e-02]], [[-1.8657e-02, -2.6523e-02, -8.8459e-03], [ 6.0013e-03, -1.8259e-03, -2.9057e-02], [-5.6993e-03, -7.6659e-03, -3.0689e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn1.weight&#39;, tensor([0.2744, 0.2669, 0.2692, 0.2340, 0.2358, 0.2811, 0.2309, 0.2419, 0.2581, 0.2293, 0.2315, 0.2248, 0.2226, 0.2821, 0.2021, 0.2370, 0.2681, 0.3076, 0.2963, 0.2716, 0.2413, 0.2637, 0.2637, 0.2773, 0.3137, 0.3355, 0.1925, 0.2757, 0.2785, 0.2586, 0.2874, 0.3110, 0.2714, 0.2677, 0.2763, 0.2341, 0.2519, 0.2593, 0.2531, 0.2892, 0.2904, 0.2815, 0.3075, 0.2483, 0.2580, 0.2837, 0.2898, 0.3023, 0.2720, 0.3012, 0.2804, 0.2958, 0.3038, 0.3167, 0.2809, 0.2815, 0.2762, 0.2998, 0.2605, 0.2921, 0.2714, 0.3087, 0.2961, 0.2697, 0.2170, 0.2348, 0.2921, 0.2882, 0.2835, 0.2517, 0.2961, 0.2279, 0.2701, 0.2474, 0.2558, 0.3045, 0.2660, 0.2678, 0.2527, 0.2390, 0.3393, 0.2815, 0.2457, 0.2826, 0.2559, 0.2135, 0.2918, 0.3547, 0.2357, 0.2472, 0.2871, 0.2964, 0.2860, 0.2801, 0.2645, 0.2895, 0.3193, 0.2915, 0.2221, 0.2512, 0.2655, 0.2688, 0.2930, 0.2915, 0.2516, 0.2502, 0.2915, 0.2671, 0.2752, 0.2868, 0.2829, 0.2956, 0.2570, 0.2672, 0.2795, 0.3113, 0.2806, 0.1998, 0.2665, 0.2790, 0.2538, 0.2625, 0.3020, 0.3005, 0.3036, 0.2974, 0.2769, 0.2661, 0.2630, 0.2796, 0.2897, 0.3627, 0.4800, 0.2014, 0.2696, 0.2811, 0.2814, 0.2569, 0.2612, 0.2407, 0.2830, 0.2031, 0.2789, 0.2504, 0.1914, 0.2710, 0.3060, 0.2571, 0.2898, 0.2493, 0.2972, 0.2717, 0.2504, 0.2756, 0.2561, 0.3123, 0.2695, 0.2635, 0.3083, 0.2491, 0.2627, 0.3099, 0.2677, 0.2847, 0.2238, 0.3269, 0.2259, 0.2730, 0.2343, 0.2882, 0.2939, 0.2755, 0.2960, 0.2404, 0.2624, 0.2588, 0.2628, 0.2662, 0.2455, 0.2525, 0.2873, 0.2378, 0.2705, 0.2650, 0.2067, 0.2930, 0.2402, 0.3138, 0.2377, 0.2333, 0.2574, 0.3070, 0.2899, 0.2603, 0.3144, 0.2190, 0.2902, 0.2521, 0.3292, 0.2682, 0.2683, 0.2719, 0.2685, 0.2600, 0.2983, 0.3015, 0.2854, 0.2847, 0.2838, 0.2635, 0.3042, 0.2841, 0.2967, 0.2849, 0.2738, 0.3336, 0.2673, 0.2911, 0.2124, 0.2689, 0.2580, 0.2714, 0.2332, 0.3383, 0.2631, 0.3093, 0.2931, 0.2608, 0.2501, 0.2707, 0.2714, 0.2835, 0.2937, 0.2249, 0.3311, 0.2919, 0.2511, 0.2581, 0.3271, 0.2739, 0.2631, 0.2795, 0.2627, 0.2388, 0.3033, 0.2581, 0.2709, 0.2763, 0.2938, 0.3044, 0.3250, 0.2498, 0.2844, 0.2679, 0.2943, 0.2935], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn1.bias&#39;, tensor([-0.0581, -0.0801, -0.0912, 0.0655, 0.0370, -0.1125, -0.0234, -0.0663, -0.0905, -0.0253, -0.0079, -0.0102, 0.0669, -0.0860, 0.0498, -0.0104, -0.1190, -0.1183, -0.1025, -0.0288, -0.0423, -0.1052, -0.0447, -0.0587, -0.1650, -0.1957, 0.0866, -0.0872, -0.1052, -0.0734, -0.1190, -0.0184, -0.0964, -0.0377, -0.0988, -0.0166, -0.0901, -0.0279, -0.1358, -0.0060, -0.1838, -0.0636, -0.1669, -0.0233, -0.0374, -0.1215, -0.0920, -0.1353, -0.1277, -0.2070, -0.0806, -0.0800, -0.1637, -0.1708, -0.1196, -0.0763, -0.1578, -0.1796, -0.0763, -0.0650, -0.0597, -0.2395, -0.0963, -0.0657, -0.0380, -0.0392, -0.1153, -0.1374, -0.1092, -0.0090, -0.1041, 0.0103, -0.1048, -0.0918, -0.0198, -0.1381, -0.0635, -0.0563, -0.0424, -0.0450, -0.1610, -0.1162, -0.0158, -0.1166, -0.0677, 0.1412, -0.0857, -0.3354, 0.0272, 0.0895, -0.1867, -0.0515, -0.1808, -0.1606, -0.1067, -0.1199, -0.1605, -0.0590, -0.0280, -0.0266, -0.1322, -0.0166, -0.0836, -0.1355, -0.0403, -0.0111, -0.0547, -0.0886, -0.0745, -0.1438, -0.1257, -0.1430, -0.0472, -0.1151, -0.0750, -0.2240, -0.1238, 0.0263, -0.1176, -0.1137, 0.0086, -0.1449, -0.1805, -0.1608, -0.1509, -0.0827, -0.1110, -0.1031, -0.0985, -0.1034, -0.1522, -0.1414, -0.3195, 0.0587, -0.1255, -0.1173, -0.1392, -0.0859, -0.0822, -0.0359, -0.1376, 0.0796, -0.1446, -0.0698, 0.1326, -0.0712, -0.0929, 0.0081, -0.0847, -0.0816, -0.2004, -0.0697, -0.0157, -0.0827, -0.0316, -0.1885, -0.1349, 0.0274, -0.1743, -0.1186, -0.1589, -0.1095, -0.0650, -0.0854, 0.0140, -0.1400, 0.0257, -0.1477, -0.0508, -0.1263, -0.1285, -0.0474, -0.0856, -0.0259, -0.0945, -0.0724, -0.0920, -0.1177, 0.0299, -0.0684, -0.1488, -0.0435, -0.0144, -0.0983, 0.0927, -0.1732, -0.0094, -0.1021, 0.0013, -0.0284, -0.1058, -0.1071, -0.0682, -0.0870, -0.2049, 0.0738, -0.1560, -0.0733, -0.1605, -0.0633, -0.1649, -0.0969, -0.1005, -0.0708, -0.1217, -0.0116, -0.0211, -0.1424, -0.0420, -0.0327, -0.1051, -0.1169, -0.1415, -0.1262, -0.0983, -0.1453, -0.1252, -0.0900, 0.1118, -0.1713, -0.0434, -0.0433, -0.0523, -0.1438, -0.1230, -0.1846, -0.1810, -0.0543, -0.0716, -0.0977, -0.0338, -0.1266, -0.1055, 0.0014, -0.1269, -0.0977, -0.0383, -0.1364, -0.1190, -0.0639, -0.1549, -0.0825, -0.0920, -0.0029, -0.1246, -0.0507, -0.1417, -0.0801, -0.1314, -0.0333, -0.2590, 0.0208, -0.0629, -0.1088, -0.1997, -0.1170], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn1.running_mean&#39;, tensor([ 0.4259, -0.3764, 0.0106, -0.9425, -0.1464, 0.0400, -0.8487, -0.2204, -0.2188, 0.1269, 0.3344, -0.3263, -0.6044, -0.1703, -1.1184, -0.3461, -0.4306, -0.8800, -0.4125, -0.2825, -0.3599, -0.3299, 0.0972, -0.7524, -1.1028, 0.0296, -0.6989, -0.5204, -0.4044, -0.2032, -0.6452, 0.0258, -0.7161, 0.0500, -0.0426, 0.8192, -0.3940, -1.0993, -0.4242, -0.0205, 0.0982, -0.3769, 0.1146, -0.1426, -0.4406, -0.7413, -1.3808, -0.3255, -0.5390, 0.0083, -0.8968, -0.5929, -0.3873, 0.1369, -0.5527, -0.5459, -0.7315, -0.4624, -0.4283, -0.7773, -0.7892, 0.0791, -0.4361, -0.0589, 0.0371, -0.7312, 0.1176, -0.3004, -0.3347, -0.6999, -0.3667, -0.1879, -0.2489, -0.4736, 0.4722, -0.1813, -0.0964, -0.7900, 0.2280, -0.0302, -0.3638, -0.7443, 0.3252, -0.0118, -0.7519, -0.2930, -0.2394, 0.6701, -0.0198, -0.3186, -0.5538, -0.0546, -0.3179, -0.8766, -0.6446, -0.0880, -0.3094, -0.8768, -0.0488, -0.2388, -0.6696, -0.8291, -0.1043, -0.3747, -0.0423, -1.2415, 0.1356, -0.7426, -0.4304, -0.6245, -0.2212, 0.5913, -0.2995, 0.2136, -0.0240, -0.0852, 0.1324, -0.4129, -0.0600, -0.7155, -0.8702, -0.7482, -0.5348, -0.4481, 0.1094, -0.8359, -0.0209, -0.6252, 0.1232, -0.9598, -0.4878, -0.0693, -0.3257, 0.6165, 0.2737, 0.0904, -0.4202, -0.2801, -0.2778, 0.1288, -0.2170, -0.3695, -0.3142, -0.2923, -0.5949, -0.2081, -0.8397, -0.8560, -0.7993, -0.4856, -0.3332, -0.2851, 0.1384, -0.6865, -0.4130, 0.0263, 0.1416, -0.3932, -0.0627, -0.1074, -0.0992, -0.3912, -0.5845, -0.0081, 0.0873, -0.2668, -0.7459, 0.3346, 0.5652, -0.5307, -0.1238, 0.3829, -0.4614, -0.1633, -0.3623, 0.2253, -0.6800, -0.3270, -0.9597, -0.1287, -0.3019, 0.2609, -0.2430, 0.1997, -0.3417, -0.0868, -0.3190, -0.5117, -0.1283, -0.2293, 0.4088, -0.1599, 0.2754, 0.2328, -1.5134, -0.2561, 0.5116, 0.1174, -0.0015, -0.0156, -0.2603, -0.0274, -0.8927, -0.1934, -0.3952, -0.0113, -0.8150, 0.0379, -0.1315, 0.0174, -0.2090, -0.7169, -0.6166, -0.6490, -0.5258, -0.2577, 0.0902, -0.5927, -0.1279, -0.0867, -0.6901, -0.0480, -0.8969, -1.1152, -0.4095, -0.9314, -0.1528, -0.2377, -0.5111, -0.4419, 0.2596, -0.0877, -0.3757, -0.5723, -0.6841, -0.0156, 0.0940, -0.0654, -0.8220, -0.5527, -0.6698, -0.5509, -0.5755, -0.3848, -0.6792, -1.1892, 0.7061, 0.2667, -0.0432, -0.3319, 0.6751, -0.0781, -0.0286, -0.1100, 0.1268, -0.6517], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn1.running_var&#39;, tensor([0.2439, 0.2062, 0.2977, 0.4733, 0.3945, 0.2214, 0.1935, 0.1796, 0.2134, 0.2249, 0.2437, 0.2417, 0.3113, 0.2188, 0.3361, 0.2691, 0.1791, 0.3884, 0.2031, 0.2518, 0.1853, 0.2116, 0.2838, 0.2440, 0.1934, 0.2398, 0.2648, 0.2311, 0.2139, 0.2552, 0.1975, 0.5911, 0.1672, 0.4211, 0.2091, 0.2867, 0.1593, 0.3114, 0.1641, 0.8027, 0.2124, 0.3278, 0.2292, 0.2889, 0.2214, 0.2984, 0.2635, 0.1734, 0.2208, 0.2148, 0.3435, 0.4181, 0.2557, 0.2772, 0.2202, 0.2508, 0.1943, 0.2062, 0.2190, 0.4655, 0.2728, 0.1725, 0.2208, 0.3139, 0.2674, 0.2223, 0.2110, 0.2018, 0.2827, 0.3167, 0.2876, 0.2445, 0.2222, 0.1711, 0.3854, 0.2312, 0.1762, 0.2291, 0.2557, 0.2512, 0.3644, 0.2596, 0.2317, 0.2207, 0.2304, 0.4316, 0.2729, 0.2305, 0.2228, 0.8163, 0.2047, 0.2865, 0.1554, 0.1668, 0.2079, 0.1958, 0.1877, 0.3121, 0.2132, 0.3012, 0.2295, 0.2323, 0.2298, 0.2198, 0.2081, 0.3367, 0.3055, 0.2645, 0.2296, 0.2166, 0.2758, 0.2264, 0.2996, 0.1710, 0.2151, 0.1973, 0.2201, 0.2636, 0.1852, 0.2275, 0.3219, 0.2307, 0.1743, 0.2260, 0.2551, 0.2612, 0.2286, 0.1733, 0.2069, 0.3450, 0.1767, 0.3563, 0.4284, 0.4924, 0.1808, 0.2043, 0.2469, 0.1827, 0.1755, 0.2747, 0.2379, 0.3854, 0.1911, 0.1981, 0.3117, 0.2450, 0.3017, 0.2443, 0.2456, 0.2094, 0.2154, 0.2993, 0.3102, 0.2337, 0.2670, 0.2022, 0.2445, 0.3683, 0.2629, 0.1562, 0.2348, 0.3441, 0.2147, 0.2413, 0.2669, 0.3409, 0.3266, 0.2681, 0.1782, 0.2162, 0.2239, 0.3446, 0.2908, 0.2821, 0.2086, 0.2581, 0.2006, 0.2049, 0.2723, 0.2409, 0.2684, 0.2109, 0.5235, 0.2244, 0.3246, 0.1892, 0.3056, 0.3853, 0.2774, 0.2451, 0.1776, 0.2367, 0.2355, 0.2277, 0.2227, 0.3206, 0.1709, 0.1715, 0.2776, 0.2496, 0.1852, 0.2168, 0.2413, 0.2157, 0.2345, 1.1288, 0.2742, 0.2177, 0.6974, 0.4935, 0.3238, 0.2294, 0.2197, 0.2697, 0.2422, 0.3965, 0.1859, 0.3352, 0.4367, 0.1965, 0.2998, 0.3142, 0.2275, 0.2414, 0.1697, 0.2711, 0.2225, 0.1960, 0.2026, 0.2408, 0.2508, 0.2940, 0.2392, 0.2821, 0.2687, 0.2655, 0.1824, 0.1946, 0.3082, 0.2250, 0.2081, 0.1770, 0.1813, 0.2219, 0.3490, 0.3400, 0.2114, 0.2033, 0.1871, 0.5585, 0.1979, 0.2806, 0.4286, 0.2713, 0.1642, 0.3002], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.0.conv2.weight&#39;, tensor([[[[ 0.0062, 0.0029, -0.0135], [-0.0098, -0.0031, -0.0188], [ 0.0091, -0.0277, 0.0045]], [[ 0.0102, 0.0212, -0.0002], [ 0.0059, 0.0543, 0.0396], [ 0.0028, -0.0301, -0.0090]], [[ 0.0294, 0.0257, 0.0224], [ 0.0143, 0.0053, 0.0151], [-0.0124, -0.0106, 0.0023]], ..., [[-0.0072, -0.0095, -0.0038], [-0.0101, 0.0172, -0.0362], [-0.0236, -0.0092, -0.0297]], [[-0.0018, 0.0092, 0.0216], [-0.0082, -0.0053, 0.0012], [-0.0051, -0.0077, -0.0087]], [[-0.0025, 0.0019, 0.0107], [-0.0094, -0.0328, -0.0059], [-0.0175, -0.0312, 0.0222]]], [[[-0.0014, -0.0316, 0.0041], [-0.0255, -0.0258, -0.0091], [-0.0160, -0.0257, -0.0129]], [[-0.0176, 0.0224, -0.0031], [-0.0089, 0.0109, 0.0268], [-0.0028, -0.0252, 0.0139]], [[-0.0015, 0.0038, 0.0074], [ 0.0003, 0.0157, 0.0083], [ 0.0298, 0.0249, 0.0090]], ..., [[ 0.0253, -0.0017, 0.0219], [ 0.0019, -0.0314, -0.0011], [-0.0102, 0.0069, -0.0064]], [[-0.0189, -0.0175, 0.0032], [ 0.0114, 0.0067, -0.0014], [ 0.0111, 0.0250, 0.0128]], [[ 0.0061, 0.0196, -0.0007], [-0.0151, -0.0204, -0.0168], [ 0.0160, -0.0086, -0.0239]]], [[[ 0.0023, 0.0032, 0.0006], [ 0.0112, 0.0387, 0.0013], [ 0.0064, 0.0082, -0.0186]], [[ 0.0117, 0.0187, -0.0128], [-0.0158, -0.0104, 0.0174], [-0.0106, -0.0087, 0.0067]], [[-0.0180, -0.0182, -0.0338], [-0.0212, 0.0110, -0.0281], [-0.0365, -0.0212, -0.0216]], ..., [[ 0.0244, 0.0265, 0.0228], [ 0.0263, -0.0121, 0.0091], [ 0.0277, 0.0253, 0.0138]], [[ 0.0032, -0.0125, -0.0039], [-0.0001, 0.0081, -0.0033], [ 0.0109, 0.0106, -0.0042]], [[ 0.0302, 0.0358, 0.0239], [ 0.0181, 0.0065, 0.0004], [ 0.0075, -0.0099, -0.0065]]], ..., [[[ 0.0165, 0.0201, -0.0011], [ 0.0137, 0.0103, 0.0055], [-0.0058, -0.0077, 0.0005]], [[ 0.0047, 0.0160, 0.0159], [-0.0201, 0.0089, 0.0009], [ 0.0137, -0.0085, -0.0049]], [[ 0.0089, 0.0298, 0.0117], [-0.0105, -0.0056, 0.0128], [-0.0110, -0.0009, 0.0090]], ..., [[-0.0017, 0.0282, 0.0019], [ 0.0080, 0.0151, 0.0080], [ 0.0022, -0.0046, -0.0003]], [[ 0.0039, 0.0022, -0.0127], [ 0.0129, 0.0842, 0.0025], [ 0.0120, 0.0679, 0.0077]], [[ 0.0031, -0.0004, 0.0176], [ 0.0139, -0.0092, 0.0033], [-0.0062, -0.0063, 0.0002]]], [[[-0.0165, -0.0325, -0.0201], [-0.0198, -0.0113, 0.0065], [-0.0078, 0.0219, 0.0017]], [[-0.0117, 0.0009, -0.0141], [-0.0323, -0.0293, 0.0056], [-0.0254, -0.0342, -0.0123]], [[-0.0143, -0.0089, -0.0264], [-0.0171, 0.0006, 0.0016], [-0.0106, 0.0091, -0.0090]], ..., [[-0.0068, -0.0271, -0.0031], [ 0.0269, -0.0145, -0.0104], [-0.0057, 0.0002, 0.0104]], [[-0.0027, -0.0079, 0.0057], [ 0.0077, -0.0194, -0.0161], [-0.0001, 0.0059, -0.0080]], [[ 0.0422, 0.0317, 0.0150], [ 0.0491, 0.0113, -0.0214], [ 0.0037, 0.0187, -0.0038]]], [[[ 0.0186, 0.0288, 0.0125], [ 0.0266, 0.0179, 0.0193], [ 0.0263, -0.0030, -0.0075]], [[ 0.0016, 0.0201, 0.0247], [-0.0134, 0.0303, 0.0363], [-0.0113, 0.0181, 0.0245]], [[-0.0060, -0.0022, 0.0189], [-0.0004, -0.0027, 0.0188], [ 0.0185, 0.0105, 0.0329]], ..., [[-0.0020, 0.0167, -0.0168], [-0.0119, 0.0301, 0.0129], [-0.0272, -0.0227, -0.0184]], [[ 0.0279, 0.0508, 0.0394], [ 0.0369, 0.0427, 0.0364], [ 0.0384, 0.0245, 0.0358]], [[ 0.0014, 0.0155, 0.0005], [ 0.0021, 0.0057, 0.0180], [ 0.0031, 0.0262, 0.0246]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn2.weight&#39;, tensor([0.3501, 0.3299, 0.2563, 0.2175, 0.3553, 0.2753, 0.3996, 0.2776, 0.3040, 0.2684, 0.3725, 0.2578, 0.3208, 0.2315, 0.2892, 0.4029, 0.3310, 0.2932, 0.3528, 0.2760, 0.2604, 0.2649, 0.2693, 0.2533, 0.3268, 0.2765, 0.2098, 0.3322, 0.2186, 0.2827, 0.2567, 0.2592, 0.2886, 0.2706, 0.2949, 0.3126, 0.2103, 0.2263, 0.2665, 0.3344, 0.2658, 0.2561, 0.1693, 0.2410, 0.3150, 0.2509, 0.2850, 0.3239, 0.2388, 0.2396, 0.2335, 0.3118, 0.2581, 0.2364, 0.3439, 0.2524, 0.2923, 0.2592, 0.3545, 0.2913, 0.2434, 0.3014, 0.2662, 0.3593, 0.4229, 0.1941, 0.2956, 0.2442, 0.3120, 0.2757, 0.2954, 0.2465, 0.2739, 0.3475, 0.2875, 0.2939, 0.2630, 0.2682, 0.1979, 0.2849, 0.2733, 0.2772, 0.2798, 0.2520, 0.2388, 0.2524, 0.3409, 0.3068, 0.2541, 0.2965, 0.2962, 0.2995, 0.2410, 0.2195, 0.2517, 0.2982, 0.2828, 0.3574, 0.2241, 0.2375, 0.2520, 0.3555, 0.2816, 0.2829, 0.2465, 0.2907, 0.2269, 0.2643, 0.2504, 0.2823, 0.3227, 0.3543, 0.2593, 0.3162, 0.2714, 0.2904, 0.2093, 0.3259, 0.3752, 0.3730, 0.2388, 0.2216, 0.3420, 0.3083, 0.2824, 0.2253, 0.3420, 0.2929, 0.3083, 0.2507, 0.3194, 0.3221, 0.3573, 0.2981, 0.3851, 0.2265, 0.3070, 0.2836, 0.1698, 0.2976, 0.2819, 0.3193, 0.3081, 0.2336, 0.5297, 0.3250, 0.3178, 0.3970, 0.2830, 0.2843, 0.3050, 0.4548, 0.3065, 0.2687, 0.3244, 0.2809, 0.3082, 0.2503, 0.3244, 0.2758, 0.2988, 0.3368, 0.4293, 0.2526, 0.3089, 0.3625, 0.3226, 0.2961, 0.3064, 0.2685, 0.3010, 0.2909, 0.2860, 0.2600, 0.3153, 0.3005, 0.3360, 0.2740, 0.3165, 0.3734, 0.2532, 0.2760, 0.2070, 0.2804, 0.3125, 0.2501, 0.3257, 0.3621, 0.2990, 0.2978, 0.2797, 0.2799, 0.1998, 0.3119, 0.2464, 0.3057, 0.3371, 0.1544, 0.4006, 0.2867, 0.2766, 0.2479, 0.1994, 0.2697, 0.2366, 0.2908, 0.2619, 0.3092, 0.3258, 0.2903, 0.2912, 0.2926, 0.2969, 0.2880, 0.2973, 0.3208, 0.2574, 0.3107, 0.2627, 0.2624, 0.3198, 0.3566, 0.2144, 0.3178, 0.2528, 0.3122, 0.2735, 0.2218, 0.3089, 0.2576, 0.2616, 0.2345, 0.2721, 0.2109, 0.2761, 0.2470, 0.2809, 0.3131, 0.2847, 0.3031, 0.2319, 0.2276, 0.2672, 0.3254, 0.3044, 0.3912, 0.3219, 0.3525, 0.2490, 0.2301, 0.2711, 0.3305, 0.2587, 0.2951, 0.2862, 0.1890], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn2.bias&#39;, tensor([-9.5210e-02, -8.8614e-02, 7.2007e-02, 1.5496e-01, -4.3829e-02, 7.1644e-02, 4.5879e-02, 6.1296e-02, 2.9980e-03, 6.2667e-02, 7.1406e-02, 1.0899e-02, -4.9686e-02, 1.2245e-01, -1.7379e-02, -6.3080e-02, 3.2873e-02, 6.1932e-02, -2.8987e-02, 7.6469e-03, 8.6522e-02, 1.5470e-01, -8.0009e-02, 2.2444e-02, -2.4845e-03, 5.3083e-02, 3.0500e-02, 1.2233e-01, 7.2893e-02, -1.4050e-02, 8.5264e-02, 4.9967e-03, 7.5069e-02, 1.9359e-02, 1.0294e-02, 8.0978e-02, 4.1430e-02, 1.1003e-01, 6.2591e-02, 1.1813e-01, 2.6407e-03, 1.8978e-01, 1.7040e-01, -3.2738e-03, 3.0278e-04, 8.9130e-02, 2.3079e-02, -1.2642e-01, 1.0107e-01, 9.3514e-02, 4.6423e-02, -1.2396e-02, 1.6601e-02, 1.5171e-02, -6.1362e-02, 3.7999e-02, -2.5844e-02, 3.2384e-02, 4.3836e-02, 3.0919e-02, 6.3754e-02, 5.6602e-02, 3.6406e-02, -3.7567e-02, -1.1658e-01, 6.6457e-02, 1.6641e-02, 2.3393e-02, -4.6464e-02, 3.6467e-02, 7.4723e-02, 7.4195e-02, 3.7201e-02, -1.6857e-02, -4.1621e-02, 7.8824e-03, 8.2109e-03, 6.0147e-02, 1.2314e-01, -5.1386e-02, 7.6756e-02, -3.7888e-02, 9.9299e-02, 3.3179e-02, 2.3634e-02, 4.2518e-02, 8.7419e-03, -3.4629e-02, 1.5909e-02, 1.7814e-02, -2.5696e-02, 3.7010e-02, 9.9028e-02, 9.7764e-02, 1.9132e-02, -5.4726e-02, 5.4363e-02, -4.7345e-02, 1.2872e-01, 1.2967e-01, 5.4707e-02, -6.8381e-02, 1.4233e-02, -2.2017e-02, 2.7501e-02, -9.0084e-03, 1.8488e-02, 3.8337e-03, 1.0740e-01, 5.9008e-02, -1.4508e-02, 3.8742e-02, -8.0746e-03, 2.4529e-02, 5.4633e-02, 3.6213e-02, 1.2372e-01, 2.7165e-03, -7.1425e-02, 9.2435e-02, 7.3817e-02, -2.1876e-02, 2.4091e-02, -2.8522e-05, 8.1116e-02, 1.1553e-01, -8.0997e-02, 1.8980e-01, 1.1186e-01, 5.0752e-03, 4.7557e-02, 9.7735e-03, -2.0131e-02, 1.4637e-02, -2.5161e-02, 6.6859e-02, 1.4730e-01, 3.2393e-02, 1.9006e-01, -4.8734e-02, -3.3426e-02, -2.0864e-02, -6.2018e-02, 1.0122e-01, -1.7099e-01, 1.1032e-03, -1.6510e-02, 1.6839e-02, -7.6155e-03, 1.5993e-01, -1.8175e-02, -7.8702e-02, 1.8195e-03, 1.1118e-01, 4.9544e-02, 1.4335e-02, -3.1984e-02, 1.1524e-01, -5.5781e-02, -6.3836e-03, -1.9729e-02, -8.2754e-02, -1.6427e-01, 6.2011e-02, 2.4288e-03, -9.6157e-02, -1.0367e-01, 3.7747e-02, 6.2926e-03, -2.9690e-02, 1.8861e-03, 4.6156e-02, -5.9207e-02, 1.6357e-01, 1.4420e-03, 5.4189e-02, 1.9143e-02, -2.9430e-02, 9.4992e-02, -8.4534e-02, -2.8230e-02, 1.1855e-01, 1.0588e-01, 1.2860e-02, 1.3080e-02, 2.8202e-02, -1.0184e-01, -1.8938e-01, -1.8498e-02, -4.3245e-02, 2.8679e-02, 1.2224e-02, 5.0145e-02, 1.8207e-01, 9.2523e-02, 7.1675e-02, -6.3111e-02, 1.9584e-02, 6.2803e-02, 9.8829e-02, -6.9107e-03, 7.0620e-02, 8.3198e-02, 8.2006e-02, 2.5877e-02, 7.6428e-02, -1.1958e-03, -1.9849e-02, 7.0046e-02, -2.3804e-02, -1.0487e-03, -2.4274e-03, 9.1995e-02, 2.5725e-02, 1.1297e-01, -2.6147e-02, 3.1027e-02, -2.4317e-03, 1.0703e-01, 1.4656e-01, -1.4403e-02, -1.1442e-01, 1.3528e-01, 4.6812e-02, 3.9328e-03, -2.1507e-02, 3.2046e-03, 2.9092e-02, -3.8465e-02, -1.4885e-03, 2.0828e-02, 1.5821e-02, 1.5249e-02, 7.3995e-02, -8.6869e-02, 7.0519e-02, 1.2072e-01, 8.2959e-02, -6.0999e-04, 8.1955e-02, 9.0241e-02, -5.3697e-02, 3.1972e-02, 7.0329e-03, -2.3718e-02, -4.5950e-02, 4.2948e-02, -6.6444e-02, 1.7060e-01, 9.8622e-02, 5.5091e-02, -8.5910e-02, 6.7664e-02, 7.9097e-02, 3.9202e-02, 8.9132e-02], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn2.running_mean&#39;, tensor([-2.2264e-01, -2.1112e-01, -1.9337e-01, -2.5862e-01, -1.0681e-01, -3.7190e-02, -3.1079e-01, 1.8714e-02, 8.9086e-02, -1.1459e-01, -1.3621e-01, -1.4202e-01, -1.4100e-01, -1.5338e-01, 1.1900e-01, -9.9917e-02, -1.7817e-01, 3.0571e-01, -2.8166e-01, 1.2279e-01, 4.1170e-01, -1.0869e-01, 1.3657e-01, 6.6559e-03, -4.4335e-02, 1.9682e-01, -2.6282e-01, -9.1805e-02, 8.7109e-02, -2.8614e-02, -1.9154e-01, -1.4300e-01, -1.4047e-01, -9.1181e-02, -6.5915e-02, 5.6360e-02, 1.2517e-02, 2.1825e-01, 4.0415e-01, 3.7775e-02, 1.0948e-01, -2.8525e-02, 1.1206e-01, -1.2766e-01, -7.0573e-02, -1.7184e-01, 2.2385e-02, -2.6977e-01, -9.3712e-02, 1.5972e-01, -5.0518e-02, 8.2161e-02, -1.5836e-01, -6.4456e-02, -5.0439e-02, 6.9653e-02, -3.1182e-02, -7.0153e-02, -8.0941e-02, 1.9101e-03, 7.7454e-03, -1.3582e-01, -7.2729e-02, 8.1604e-02, 3.4307e-02, -1.1464e-01, -1.4979e-01, 8.9896e-02, -1.2431e-01, 9.3659e-02, -1.9546e-01, -2.7910e-01, -1.8006e-01, 4.0776e-02, 7.2593e-02, -6.0452e-02, 8.6174e-03, -1.1212e-01, -4.0143e-02, -3.4150e-01, -1.3727e-01, -1.9524e-01, -1.5010e-01, -6.7187e-02, -7.6648e-02, 3.0672e-02, -8.4449e-02, -1.1792e-01, -1.0657e-01, -2.4914e-01, 8.3135e-02, -3.2372e-01, 2.8050e-02, -8.9763e-02, -8.3202e-02, -3.8409e-02, -4.7697e-02, -1.2434e-01, -6.4758e-02, -7.9994e-02, -6.8586e-02, -1.8280e-01, -1.0457e-01, -3.3628e-01, -3.1909e-02, 5.5824e-03, -5.7494e-02, -6.4018e-02, -1.8121e-01, 1.3571e-02, -1.0026e-01, -1.3311e-01, -2.5235e-01, -1.7143e-01, -1.5048e-01, 1.1602e-02, 1.3871e-01, -5.6454e-02, -2.7874e-01, -3.9419e-01, -1.9880e-01, 2.7371e-02, -2.8168e-01, -1.9306e-01, -1.3981e-02, 8.9895e-02, -1.7088e-01, -2.0369e-02, -7.9453e-02, 1.8065e-01, 1.3115e-01, -5.7281e-02, -1.5367e-01, -1.4598e-01, -4.4312e-02, -2.5800e-01, -1.0729e-01, 6.9524e-02, -1.9043e-01, 3.2690e-01, 2.3349e-01, -1.2621e-01, -1.4035e-01, -5.4581e-02, -3.3737e-02, -4.4048e-02, 1.5248e-01, 2.1045e-02, -1.9686e-01, -5.6021e-02, 1.1550e-01, -3.4986e-02, 1.6108e-02, 1.7844e-02, -1.4955e-01, -6.4810e-02, -1.5181e-01, -1.7581e-01, -3.1389e-02, -1.5801e-01, -7.7833e-03, 7.5319e-02, 1.6146e-01, -4.6601e-02, -1.3676e-01, -8.4484e-02, -8.5848e-03, 1.0820e-01, -1.7595e-02, 8.0963e-02, 6.0654e-02, 5.5633e-02, -8.1564e-02, -5.4522e-02, -2.3461e-02, -5.5963e-02, -1.6572e-01, -9.2861e-02, -2.8888e-01, 8.8238e-02, -7.7875e-03, -3.4975e-02, 9.6843e-02, -1.4656e-02, -2.0951e-04, -7.0368e-03, -2.0759e-01, -1.9616e-01, -3.6338e-01, -1.3269e-01, 5.4388e-02, -1.7984e-01, -3.5530e-01, -4.1766e-02, 1.6841e-01, -7.8687e-02, -1.9107e-02, 2.2040e-01, -2.2828e-01, 9.4543e-02, -8.7686e-02, 1.4423e-01, 1.0121e-01, -3.5404e-01, -2.7988e-02, -1.4486e-01, 4.5699e-02, -1.0753e-01, -3.1988e-01, -6.0376e-02, 9.8236e-02, -2.0558e-01, -1.3486e-02, 1.1575e-03, -5.5455e-02, -1.0991e-01, -1.2697e-01, 5.3121e-02, -2.1151e-01, -4.9874e-02, -7.5767e-02, -3.7295e-02, -3.7717e-01, 6.9548e-02, -1.4920e-01, -1.2121e-01, -1.5463e-01, -4.6836e-02, -3.6627e-01, -1.0847e-01, -2.5204e-01, -2.0685e-01, 1.0762e-01, -2.0232e-01, -3.5256e-02, -8.6502e-02, -1.4052e-01, 2.4355e-02, -1.6197e-01, -7.9814e-02, -1.4723e-01, 1.9301e-02, -3.0558e-01, -1.4650e-01, -6.2433e-02, -5.7190e-02, -7.9190e-02, -2.5845e-01, -1.3523e-01, -4.6787e-01, 2.0165e-01, -1.7750e-01, -4.8964e-01, 1.8574e-02, -1.1926e-01, 2.5863e-01], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn2.running_var&#39;, tensor([0.0415, 0.0339, 0.0749, 0.0674, 0.0485, 0.0839, 0.2196, 0.0773, 0.0537, 0.0629, 0.0674, 0.0430, 0.0333, 0.0513, 0.0383, 0.0695, 0.0692, 0.0949, 0.0781, 0.0487, 0.0623, 0.0981, 0.0250, 0.0577, 0.0703, 0.0740, 0.0583, 0.1374, 0.0512, 0.0501, 0.0676, 0.0399, 0.0888, 0.0550, 0.0581, 0.1554, 0.0593, 0.0590, 0.0941, 0.0799, 0.0530, 0.0795, 0.0717, 0.0441, 0.0616, 0.0557, 0.0599, 0.0324, 0.1136, 0.0722, 0.0570, 0.0530, 0.0458, 0.0389, 0.0538, 0.1022, 0.0445, 0.0498, 0.1339, 0.0664, 0.0784, 0.0728, 0.0485, 0.0283, 0.0528, 0.0500, 0.0767, 0.0403, 0.0500, 0.0513, 0.0975, 0.0876, 0.0726, 0.0456, 0.0403, 0.0435, 0.0488, 0.0748, 0.0588, 0.0340, 0.0487, 0.0340, 0.1107, 0.0349, 0.0483, 0.0421, 0.0721, 0.0514, 0.0336, 0.0568, 0.0436, 0.0775, 0.0483, 0.0763, 0.0520, 0.0432, 0.0737, 0.0793, 0.0686, 0.0851, 0.0435, 0.0410, 0.0697, 0.0517, 0.0524, 0.0566, 0.0441, 0.0634, 0.0571, 0.0557, 0.0627, 0.0830, 0.0470, 0.0706, 0.0648, 0.0742, 0.1042, 0.0466, 0.0592, 0.1269, 0.0402, 0.0368, 0.1093, 0.0553, 0.0605, 0.0905, 0.0530, 0.0795, 0.0631, 0.0619, 0.0530, 0.0501, 0.0471, 0.1072, 0.1357, 0.0477, 0.1032, 0.0549, 0.0548, 0.0408, 0.0415, 0.0500, 0.0381, 0.0860, 0.0463, 0.0652, 0.0516, 0.0585, 0.0407, 0.1157, 0.0488, 0.0489, 0.0631, 0.0599, 0.1300, 0.0639, 0.0499, 0.1054, 0.0394, 0.0435, 0.0489, 0.0335, 0.0369, 0.0807, 0.0633, 0.0590, 0.0294, 0.0776, 0.0645, 0.0480, 0.0558, 0.0572, 0.0360, 0.0696, 0.0595, 0.1072, 0.0782, 0.0615, 0.1163, 0.0446, 0.0312, 0.1267, 0.0337, 0.0416, 0.0570, 0.0572, 0.0376, 0.0332, 0.0510, 0.0569, 0.0613, 0.0595, 0.0393, 0.1342, 0.0561, 0.0930, 0.0539, 0.0237, 0.0782, 0.0501, 0.0298, 0.0655, 0.0450, 0.0757, 0.0738, 0.1469, 0.0354, 0.0463, 0.1069, 0.0363, 0.0465, 0.0530, 0.0683, 0.0600, 0.0702, 0.0672, 0.0389, 0.0538, 0.0937, 0.1219, 0.0754, 0.0369, 0.0646, 0.0852, 0.0567, 0.0515, 0.0713, 0.0569, 0.0745, 0.0453, 0.0577, 0.0440, 0.0771, 0.0553, 0.0271, 0.0549, 0.1365, 0.0823, 0.0669, 0.1711, 0.0478, 0.0242, 0.0583, 0.0955, 0.0487, 0.0920, 0.1031, 0.0428, 0.1436, 0.0827, 0.0436, 0.0334, 0.0892, 0.0630, 0.0703, 0.0657], device=&#39;cuda:0&#39;)), (&#39;0.6.0.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.0.downsample.0.weight&#39;, tensor([[[[-0.0217]], [[ 0.0233]], [[ 0.0028]], ..., [[-0.0599]], [[-0.0641]], [[ 0.0326]]], [[[ 0.0184]], [[-0.0114]], [[ 0.0196]], ..., [[ 0.0622]], [[-0.0255]], [[-0.0248]]], [[[ 0.0270]], [[ 0.0004]], [[ 0.0061]], ..., [[-0.0015]], [[ 0.0571]], [[ 0.0236]]], ..., [[[ 0.0125]], [[ 0.1253]], [[ 0.0049]], ..., [[ 0.0336]], [[-0.0239]], [[-0.0290]]], [[[ 0.0037]], [[ 0.0048]], [[ 0.0108]], ..., [[ 0.0829]], [[-0.0030]], [[-0.0438]]], [[[-0.0314]], [[ 0.1354]], [[ 0.0040]], ..., [[-0.0112]], [[-0.0326]], [[-0.0601]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.0.downsample.1.weight&#39;, tensor([0.1441, 0.1598, 0.0716, 0.0844, 0.1153, 0.1330, 0.1849, 0.1400, 0.1340, 0.1745, 0.0909, 0.2910, 0.2004, 0.1307, 0.1894, 0.2040, 0.0902, 0.1439, 0.2241, 0.1669, 0.1799, 0.0687, 0.0948, 0.1850, 0.0640, 0.2019, 0.0910, 0.1013, 0.0270, 0.2002, 0.1537, 0.2020, 0.1006, 0.1882, 0.1076, 0.1669, 0.0404, 0.0948, 0.0949, 0.1019, 0.1745, 0.0163, 0.0653, 0.0813, 0.0823, 0.1237, 0.1248, 0.1484, 0.0743, 0.1504, 0.0980, 0.1868, 0.1184, 0.2603, 0.2127, 0.0783, 0.2070, 0.1704, 0.0234, 0.1706, 0.0193, 0.1878, 0.0715, 0.1870, 0.3348, 0.0405, 0.2019, 0.1762, 0.1129, 0.2099, 0.0960, 0.1513, 0.1401, 0.2256, 0.2033, 0.1498, 0.1822, 0.1479, 0.0642, 0.0936, 0.0780, 0.1519, 0.0662, 0.2396, 0.0488, 0.2485, 0.1538, 0.1149, 0.1024, 0.1788, 0.1177, 0.1112, 0.0952, 0.1694, 0.2014, 0.1288, 0.1624, 0.1067, 0.1155, 0.0932, 0.1636, 0.2296, 0.1049, 0.1002, 0.0359, 0.0587, 0.1164, 0.2078, 0.0801, 0.2587, 0.1336, 0.1052, 0.1004, 0.0867, 0.0819, 0.1046, 0.0811, 0.1852, 0.2387, 0.0865, 0.1842, 0.0398, 0.1426, 0.1342, 0.1756, 0.0723, 0.1552, 0.0544, 0.0809, 0.1114, 0.2342, 0.1963, 0.1759, 0.0835, 0.1634, 0.1103, 0.0701, 0.2111, 0.0815, 0.1802, 0.1388, 0.1964, 0.2253, 0.0840, 0.2575, 0.0739, 0.1191, 0.2031, 0.1383, 0.0330, 0.1453, 0.1942, 0.1775, 0.1723, 0.0211, 0.1452, 0.0733, 0.1351, 0.0969, 0.0552, 0.1865, 0.1975, 0.2008, 0.1015, 0.0927, 0.0923, 0.1197, 0.0865, 0.1286, 0.2181, 0.1444, 0.1711, 0.1275, 0.0624, 0.1224, 0.1490, 0.1154, 0.1569, 0.0782, 0.1518, 0.0937, 0.0171, 0.0879, 0.2058, 0.1725, 0.0866, 0.1248, 0.1753, 0.1919, 0.1891, 0.1334, 0.1333, 0.2089, 0.0927, 0.1203, 0.0110, 0.1521, 0.0584, 0.1727, 0.0733, 0.1382, 0.1725, 0.0812, 0.1122, 0.1821, 0.0618, 0.1470, 0.1112, 0.1419, 0.1183, 0.1609, 0.0963, 0.1480, 0.1228, 0.1543, 0.1200, 0.0413, 0.1878, 0.1482, 0.0506, 0.1023, 0.1826, 0.1212, 0.1670, 0.1306, 0.2137, 0.1700, 0.0765, 0.1039, 0.0752, 0.1342, 0.0682, 0.1808, 0.1000, 0.1155, 0.1239, 0.0713, 0.1601, 0.0681, 0.1208, 0.1503, 0.0644, 0.1033, 0.0387, 0.2242, 0.1504, 0.1380, 0.2428, 0.1275, 0.1212, 0.1452, 0.1127, 0.1871, 0.1727, 0.2291, 0.0652], device=&#39;cuda:0&#39;)), (&#39;0.6.0.downsample.1.bias&#39;, tensor([-9.5210e-02, -8.8614e-02, 7.2007e-02, 1.5496e-01, -4.3829e-02, 7.1644e-02, 4.5879e-02, 6.1296e-02, 2.9980e-03, 6.2667e-02, 7.1406e-02, 1.0899e-02, -4.9686e-02, 1.2245e-01, -1.7379e-02, -6.3080e-02, 3.2873e-02, 6.1932e-02, -2.8987e-02, 7.6469e-03, 8.6522e-02, 1.5470e-01, -8.0009e-02, 2.2444e-02, -2.4845e-03, 5.3083e-02, 3.0500e-02, 1.2233e-01, 7.2893e-02, -1.4050e-02, 8.5264e-02, 4.9967e-03, 7.5069e-02, 1.9359e-02, 1.0294e-02, 8.0978e-02, 4.1430e-02, 1.1003e-01, 6.2591e-02, 1.1813e-01, 2.6407e-03, 1.8978e-01, 1.7040e-01, -3.2738e-03, 3.0278e-04, 8.9130e-02, 2.3079e-02, -1.2642e-01, 1.0107e-01, 9.3514e-02, 4.6423e-02, -1.2396e-02, 1.6601e-02, 1.5171e-02, -6.1362e-02, 3.7999e-02, -2.5844e-02, 3.2384e-02, 4.3836e-02, 3.0919e-02, 6.3754e-02, 5.6602e-02, 3.6406e-02, -3.7567e-02, -1.1658e-01, 6.6457e-02, 1.6641e-02, 2.3393e-02, -4.6464e-02, 3.6467e-02, 7.4723e-02, 7.4195e-02, 3.7201e-02, -1.6857e-02, -4.1621e-02, 7.8824e-03, 8.2109e-03, 6.0147e-02, 1.2314e-01, -5.1386e-02, 7.6756e-02, -3.7888e-02, 9.9299e-02, 3.3179e-02, 2.3634e-02, 4.2518e-02, 8.7419e-03, -3.4629e-02, 1.5909e-02, 1.7814e-02, -2.5696e-02, 3.7010e-02, 9.9028e-02, 9.7764e-02, 1.9132e-02, -5.4726e-02, 5.4363e-02, -4.7345e-02, 1.2872e-01, 1.2967e-01, 5.4707e-02, -6.8381e-02, 1.4233e-02, -2.2017e-02, 2.7501e-02, -9.0084e-03, 1.8488e-02, 3.8337e-03, 1.0740e-01, 5.9008e-02, -1.4508e-02, 3.8742e-02, -8.0746e-03, 2.4529e-02, 5.4633e-02, 3.6213e-02, 1.2372e-01, 2.7165e-03, -7.1425e-02, 9.2435e-02, 7.3817e-02, -2.1876e-02, 2.4091e-02, -2.8522e-05, 8.1116e-02, 1.1553e-01, -8.0997e-02, 1.8980e-01, 1.1186e-01, 5.0752e-03, 4.7557e-02, 9.7735e-03, -2.0131e-02, 1.4637e-02, -2.5161e-02, 6.6859e-02, 1.4730e-01, 3.2393e-02, 1.9006e-01, -4.8734e-02, -3.3426e-02, -2.0864e-02, -6.2018e-02, 1.0122e-01, -1.7099e-01, 1.1032e-03, -1.6510e-02, 1.6839e-02, -7.6155e-03, 1.5993e-01, -1.8175e-02, -7.8702e-02, 1.8195e-03, 1.1118e-01, 4.9544e-02, 1.4335e-02, -3.1984e-02, 1.1524e-01, -5.5781e-02, -6.3836e-03, -1.9729e-02, -8.2754e-02, -1.6427e-01, 6.2011e-02, 2.4288e-03, -9.6157e-02, -1.0367e-01, 3.7747e-02, 6.2926e-03, -2.9690e-02, 1.8861e-03, 4.6156e-02, -5.9207e-02, 1.6357e-01, 1.4420e-03, 5.4189e-02, 1.9143e-02, -2.9430e-02, 9.4992e-02, -8.4534e-02, -2.8230e-02, 1.1855e-01, 1.0588e-01, 1.2860e-02, 1.3080e-02, 2.8202e-02, -1.0184e-01, -1.8938e-01, -1.8498e-02, -4.3245e-02, 2.8679e-02, 1.2224e-02, 5.0145e-02, 1.8207e-01, 9.2523e-02, 7.1675e-02, -6.3111e-02, 1.9584e-02, 6.2803e-02, 9.8829e-02, -6.9107e-03, 7.0620e-02, 8.3198e-02, 8.2006e-02, 2.5877e-02, 7.6428e-02, -1.1958e-03, -1.9849e-02, 7.0046e-02, -2.3804e-02, -1.0487e-03, -2.4274e-03, 9.1995e-02, 2.5725e-02, 1.1297e-01, -2.6147e-02, 3.1027e-02, -2.4317e-03, 1.0703e-01, 1.4656e-01, -1.4403e-02, -1.1442e-01, 1.3528e-01, 4.6812e-02, 3.9328e-03, -2.1507e-02, 3.2046e-03, 2.9092e-02, -3.8465e-02, -1.4885e-03, 2.0828e-02, 1.5821e-02, 1.5249e-02, 7.3995e-02, -8.6869e-02, 7.0519e-02, 1.2072e-01, 8.2959e-02, -6.0999e-04, 8.1955e-02, 9.0241e-02, -5.3697e-02, 3.1972e-02, 7.0329e-03, -2.3718e-02, -4.5950e-02, 4.2948e-02, -6.6444e-02, 1.7060e-01, 9.8622e-02, 5.5091e-02, -8.5910e-02, 6.7664e-02, 7.9097e-02, 3.9202e-02, 8.9132e-02], device=&#39;cuda:0&#39;)), (&#39;0.6.0.downsample.1.running_mean&#39;, tensor([-5.1959e-02, -3.4988e-02, -2.9165e-01, 4.8383e-02, -2.6681e-02, 3.8756e-02, 5.4721e-02, -6.3739e-02, -1.6643e-01, -1.3302e-01, -2.9154e-02, 3.3129e-01, 7.1504e-02, 3.3351e-02, 2.8416e-01, -8.1232e-03, 2.9227e-02, 3.1635e-01, -1.8206e-01, 3.8943e-02, 2.2111e-01, -1.9707e-01, 4.0832e-02, 2.7906e-01, -1.4487e-01, -8.4787e-02, -2.9416e-01, -1.3486e-01, -1.4306e-02, -6.2417e-02, 1.3536e-02, -2.3485e-01, -7.0030e-02, 2.3724e-01, -3.0824e-02, -8.1896e-02, -3.9986e-02, -4.1800e-02, 5.2980e-02, 1.2276e-01, 1.6192e-01, -7.9759e-02, 1.2898e-01, 1.0029e-01, -4.1151e-02, 1.2791e-01, 1.9419e-01, 9.7897e-02, 5.9410e-02, 1.3230e-01, 1.0098e-01, 4.8113e-02, 1.0885e-02, 7.2936e-02, -5.8635e-02, -5.5531e-02, -1.6967e-01, 7.4010e-02, -6.5422e-02, -1.0181e-01, 6.4429e-02, 2.7891e-01, -4.6382e-02, 1.7433e-01, -6.7062e-01, 1.5466e-02, 8.7367e-02, -1.3878e-01, -5.1654e-02, -1.3402e-01, 2.3538e-02, -2.0732e-01, -1.1348e-01, -1.5690e-01, -1.1275e-01, 1.9376e-01, -1.7830e-01, 1.3662e-02, -1.6587e-01, -6.2067e-02, -2.5695e-01, -1.4896e-01, -1.0857e-02, -3.3154e-02, 4.8324e-02, -2.2084e-01, -2.2051e-01, 2.0865e-02, 2.2696e-01, -9.5310e-02, -3.6222e-02, -1.0131e-01, -4.6911e-05, 6.8797e-02, -1.6572e-01, -8.1337e-02, -3.2580e-01, -5.0204e-02, 1.7972e-01, -4.6663e-02, -1.4107e-01, 8.5983e-03, 1.7525e-01, -1.2345e-01, -4.9132e-02, -6.4711e-02, -5.5203e-02, 5.5354e-02, -1.4205e-01, -7.9480e-02, -1.1953e-01, -2.7778e-01, 6.0472e-02, -3.6556e-02, 2.1178e-01, -2.7942e-01, -4.0927e-02, 9.4876e-02, -1.9738e-01, -2.6695e-02, 7.1666e-02, 1.2704e-01, 6.8148e-02, -9.8329e-02, -6.2445e-03, 5.9289e-02, -1.7952e-01, -4.6084e-02, 1.1361e-01, -1.2764e-01, -2.1655e-01, -1.3886e-01, -1.0849e-01, -3.1808e-01, 1.8763e-02, -7.1781e-02, -7.9415e-02, -1.7026e-01, -1.8755e-01, -1.1909e-01, -6.0982e-02, 6.8053e-02, 2.0689e-02, 6.9132e-02, 8.9884e-02, 2.7751e-02, 2.3047e-01, -1.9452e-01, 6.4703e-02, 9.0712e-02, 9.7709e-02, -2.0878e-01, -2.9458e-01, 5.1044e-02, -1.2514e-02, -8.4487e-02, -6.1002e-04, -8.9554e-03, 4.7845e-02, -9.2165e-02, -1.5590e-01, -2.6714e-01, -2.4450e-01, 8.3304e-02, -1.3703e-01, 7.8511e-02, -3.9713e-02, 8.8072e-02, 2.3125e-02, -9.6586e-02, -5.2862e-03, -1.0619e-01, 1.3221e-01, -9.9999e-02, -1.3239e-02, 6.1566e-02, 8.0960e-02, 2.9535e-03, -7.2015e-02, -5.3411e-02, -3.2573e-02, 1.9411e-01, 2.2692e-02, -1.8060e-01, -3.1208e-02, -4.8618e-02, -2.2548e-01, -6.6295e-02, -1.0977e-01, -2.7202e-01, 6.1780e-02, 5.7372e-02, 5.4912e-01, 3.8468e-02, 2.3076e-01, -9.9897e-02, -1.3402e-01, 2.4367e-01, 9.4731e-02, 5.5378e-02, -1.8048e-01, 1.5886e-01, 1.2892e-01, -4.6510e-02, -5.8017e-02, -7.6252e-03, -1.5720e-01, 9.0957e-03, -1.4793e-01, -3.1521e-02, -2.2511e-01, -4.5250e-02, 2.1807e-02, -1.2594e-01, 1.3210e-01, 9.8018e-02, 1.8139e-02, -3.3174e-02, 5.9436e-02, 1.4467e-02, -5.5408e-02, -3.1208e-02, -2.9624e-01, -5.5891e-02, 5.9009e-03, 1.2255e-01, -1.7158e-01, -5.9529e-02, 4.3901e-02, 3.1140e-02, -1.7558e-02, -1.1671e-01, -3.1937e-01, -9.4161e-02, 5.8440e-02, 1.1103e-01, -1.8122e-01, -1.9192e-02, 3.4113e-03, -6.6954e-02, -1.2680e-01, -2.8234e-01, 7.7790e-02, 2.1728e-02, -2.5475e-01, -5.6313e-02, -4.1170e-02, -3.3603e-01, -3.3406e-01, -4.0524e-02, -1.0713e-01, 5.8077e-02, -1.7812e-01, -7.0898e-02, -1.8544e-01, 8.6807e-02], device=&#39;cuda:0&#39;)), (&#39;0.6.0.downsample.1.running_var&#39;, tensor([0.0195, 0.0166, 0.0210, 0.0248, 0.0143, 0.0378, 0.0788, 0.0434, 0.0244, 0.0495, 0.0102, 0.0722, 0.0253, 0.0292, 0.0273, 0.0309, 0.0165, 0.0491, 0.0426, 0.0258, 0.0572, 0.0165, 0.0133, 0.0421, 0.0107, 0.0528, 0.0253, 0.0275, 0.0082, 0.0363, 0.0442, 0.0410, 0.0254, 0.0363, 0.0188, 0.0531, 0.0070, 0.0235, 0.0279, 0.0189, 0.0366, 0.0047, 0.0179, 0.0130, 0.0146, 0.0265, 0.0244, 0.0143, 0.0248, 0.0304, 0.0197, 0.0384, 0.0244, 0.0667, 0.0337, 0.0228, 0.0406, 0.0286, 0.0036, 0.0489, 0.0033, 0.0471, 0.0116, 0.0181, 0.0492, 0.0127, 0.0454, 0.0324, 0.0205, 0.0402, 0.0292, 0.0459, 0.0314, 0.0333, 0.0318, 0.0228, 0.0420, 0.0473, 0.0156, 0.0139, 0.0150, 0.0246, 0.0159, 0.0388, 0.0091, 0.0507, 0.0273, 0.0190, 0.0173, 0.0338, 0.0185, 0.0217, 0.0209, 0.0514, 0.0462, 0.0230, 0.0324, 0.0206, 0.0358, 0.0281, 0.0283, 0.0226, 0.0208, 0.0128, 0.0065, 0.0116, 0.0213, 0.0415, 0.0186, 0.0691, 0.0257, 0.0165, 0.0203, 0.0192, 0.0168, 0.0245, 0.0240, 0.0304, 0.0386, 0.0309, 0.0286, 0.0049, 0.0268, 0.0231, 0.0397, 0.0180, 0.0298, 0.0107, 0.0113, 0.0243, 0.0543, 0.0270, 0.0249, 0.0215, 0.0518, 0.0192, 0.0153, 0.0500, 0.0252, 0.0269, 0.0199, 0.0394, 0.0348, 0.0298, 0.0227, 0.0170, 0.0194, 0.0256, 0.0226, 0.0062, 0.0255, 0.0295, 0.0324, 0.0338, 0.0052, 0.0328, 0.0106, 0.0469, 0.0145, 0.0057, 0.0407, 0.0184, 0.0170, 0.0243, 0.0193, 0.0176, 0.0136, 0.0182, 0.0254, 0.0481, 0.0332, 0.0346, 0.0179, 0.0093, 0.0248, 0.0473, 0.0195, 0.0293, 0.0221, 0.0203, 0.0085, 0.0071, 0.0121, 0.0367, 0.0316, 0.0172, 0.0144, 0.0184, 0.0321, 0.0351, 0.0279, 0.0272, 0.0417, 0.0262, 0.0337, 0.0029, 0.0228, 0.0099, 0.0367, 0.0111, 0.0186, 0.0467, 0.0158, 0.0211, 0.0697, 0.0258, 0.0301, 0.0169, 0.0410, 0.0151, 0.0272, 0.0196, 0.0313, 0.0290, 0.0393, 0.0196, 0.0093, 0.0381, 0.0455, 0.0191, 0.0239, 0.0211, 0.0452, 0.0421, 0.0239, 0.0485, 0.0465, 0.0189, 0.0166, 0.0109, 0.0292, 0.0074, 0.0442, 0.0230, 0.0107, 0.0219, 0.0215, 0.0290, 0.0150, 0.0517, 0.0337, 0.0071, 0.0191, 0.0052, 0.0537, 0.0306, 0.0354, 0.0406, 0.0440, 0.0350, 0.0258, 0.0118, 0.0476, 0.0352, 0.0697, 0.0159], device=&#39;cuda:0&#39;)), (&#39;0.6.0.downsample.1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.1.conv1.weight&#39;, tensor([[[[-4.8129e-04, -1.0373e-02, -1.3342e-02], [-8.3155e-04, -2.8667e-03, -7.4972e-03], [-7.8877e-03, 3.2861e-03, -4.7709e-03]], [[-3.4027e-03, -5.7099e-03, 9.6548e-03], [ 1.1932e-03, 7.7894e-03, 1.0022e-02], [ 7.3609e-03, 8.8640e-03, 1.0649e-02]], [[-1.4766e-02, -8.9229e-03, -1.2052e-02], [-4.6921e-03, -4.0756e-04, -1.5468e-03], [-5.4031e-03, -3.4443e-03, -7.8866e-03]], ..., [[-2.7118e-03, 4.1342e-03, -5.6860e-03], [ 5.6318e-03, 3.7407e-02, 1.1698e-02], [ 4.4204e-03, 3.1365e-02, 2.0941e-02]], [[-1.0707e-02, -7.3025e-03, 2.4136e-03], [-1.8679e-02, -1.6351e-02, -9.6019e-03], [-1.4294e-02, -4.5874e-03, -8.2492e-03]], [[-6.3601e-03, 1.6564e-04, -4.1337e-03], [-1.0581e-03, 3.9295e-03, 5.8444e-03], [-6.6297e-03, -5.1825e-03, 5.1680e-03]]], [[[-2.7554e-03, 2.8182e-03, 1.4754e-02], [-9.5774e-03, 1.6528e-02, 3.5340e-02], [-2.3807e-03, -8.8870e-03, -2.1466e-03]], [[ 1.1063e-02, 1.8641e-03, -3.5531e-03], [-1.1981e-02, -1.4583e-02, -7.6847e-03], [ 5.8844e-04, 1.7496e-03, 6.9127e-03]], [[-1.1028e-03, 4.6749e-03, -5.2272e-03], [ 2.2023e-03, -1.7598e-04, -1.1778e-02], [-1.6782e-02, -2.0603e-02, -2.3411e-02]], ..., [[-2.2781e-02, -5.4916e-03, 1.0297e-03], [-2.5929e-02, 1.6866e-03, -1.3875e-02], [-6.8988e-03, 6.0945e-03, -9.3022e-03]], [[-2.3235e-03, 3.0138e-02, 1.4066e-02], [ 9.5652e-03, 2.5286e-02, -2.0476e-03], [ 1.1635e-02, 2.6670e-02, 6.7604e-03]], [[ 5.4938e-02, 4.9162e-02, 4.7984e-02], [ 5.1911e-02, 4.2197e-02, 4.0147e-02], [ 6.6544e-02, 5.5805e-02, 5.9332e-02]]], [[[-9.9804e-04, 9.9468e-03, 2.0248e-02], [-2.5757e-03, -4.3311e-03, -2.6099e-03], [-7.4460e-03, -7.9217e-03, -2.1894e-03]], [[ 1.6875e-03, 3.3221e-03, -1.4376e-03], [-4.3268e-03, -1.2477e-03, -1.0618e-02], [ 8.3597e-03, 4.9798e-03, -4.3021e-03]], [[ 2.7992e-03, -8.5851e-03, 2.0740e-03], [ 1.3970e-02, -3.0610e-04, 4.1830e-03], [ 9.9576e-03, 3.3479e-03, -1.1848e-03]], ..., [[-2.0972e-02, -1.5968e-02, 9.1774e-03], [-4.3184e-04, -8.0638e-03, -1.1509e-02], [ 1.3328e-02, 4.4881e-02, 2.3691e-02]], [[-8.2144e-04, 2.1743e-02, -1.4994e-03], [ 2.2660e-05, 2.7159e-03, -5.3772e-04], [-3.2414e-02, -4.8758e-02, -3.3669e-02]], [[ 5.1253e-03, 1.3519e-02, -4.1132e-03], [-1.9714e-03, 2.2109e-03, -1.2121e-02], [ 6.2308e-03, 6.5681e-03, -4.4125e-04]]], ..., [[[-3.9350e-03, -1.3344e-02, -1.9838e-02], [ 4.1928e-03, -4.3661e-03, -1.5626e-02], [ 7.6201e-03, 7.3744e-04, 1.3412e-03]], [[ 1.8854e-02, 7.2359e-03, 7.9408e-03], [ 3.3475e-02, 2.4783e-02, 2.6516e-02], [ 2.1376e-02, 2.5004e-02, 3.3022e-02]], [[ 1.7534e-02, 1.8566e-02, 2.1415e-02], [ 7.3168e-03, 1.7405e-03, 1.4065e-02], [ 1.3569e-02, 1.4295e-02, 1.7313e-02]], ..., [[ 2.4946e-02, 1.2775e-02, -7.3923e-03], [ 9.5992e-03, 1.6041e-02, 1.2037e-02], [-7.8111e-03, -1.9595e-04, 1.1802e-02]], [[ 3.3061e-02, 1.1688e-02, 2.0825e-02], [ 6.2062e-03, -1.3843e-02, 8.3372e-03], [ 1.8576e-02, 7.4494e-03, -2.0503e-03]], [[-7.6212e-03, -1.8480e-02, -1.6214e-02], [-1.3235e-02, -1.2299e-02, -9.6563e-03], [-1.2679e-02, -9.5824e-03, -8.5893e-03]]], [[[-8.8301e-03, -9.8618e-03, 7.2982e-03], [-1.0352e-02, -1.4839e-02, -4.0774e-03], [ 2.4464e-02, 2.6211e-02, -4.8498e-04]], [[-2.9798e-03, -1.4768e-02, -1.9926e-02], [-1.0322e-02, -1.9770e-02, -2.2050e-02], [-1.3027e-02, -1.0479e-02, -2.2686e-02]], [[ 1.2092e-02, 1.8366e-02, 8.1255e-03], [-3.7127e-03, 3.5571e-03, 5.8483e-03], [-3.1678e-02, -2.8265e-02, -1.1738e-02]], ..., [[-3.7563e-03, -1.0222e-02, -8.3849e-03], [-5.8985e-03, 2.3793e-03, 8.3814e-03], [ 2.3545e-04, 8.9837e-03, 2.7306e-03]], [[ 1.0591e-02, 1.6997e-02, 4.8171e-03], [-2.0710e-02, 1.4617e-02, 1.2428e-02], [-3.0658e-02, -1.8636e-02, -6.1039e-03]], [[ 1.0958e-02, 3.9745e-03, 1.0412e-02], [-2.0313e-03, -2.4161e-03, 1.3000e-02], [-1.2374e-02, -8.2478e-03, 1.2751e-02]]], [[[-7.6026e-04, -1.2636e-02, -2.9894e-03], [ 1.8039e-02, 3.4513e-03, 1.6121e-02], [-1.4382e-04, -1.7330e-02, -1.2979e-02]], [[ 6.0692e-03, 9.0016e-03, 4.1092e-03], [-1.0560e-02, 7.3867e-05, 1.0852e-03], [ 7.1372e-03, 3.9112e-03, -1.6314e-02]], [[ 3.8651e-03, -2.2949e-03, -7.3548e-03], [ 2.8019e-02, -1.5837e-03, -1.7805e-02], [ 2.3252e-02, -8.8322e-03, -1.8903e-02]], ..., [[ 3.8174e-03, -2.8551e-03, 4.5594e-03], [ 1.2992e-02, 1.1298e-02, -1.5984e-02], [ 2.3669e-02, -1.3221e-03, 5.8271e-03]], [[-1.0224e-02, 6.7845e-03, 1.2307e-02], [-1.5828e-02, 9.5654e-03, 9.6473e-03], [-1.7813e-02, 1.0691e-02, 2.2185e-02]], [[-9.4309e-04, -7.2804e-03, -2.0305e-02], [ 2.7322e-03, 1.8434e-03, -2.4139e-03], [-1.7434e-02, -1.3984e-02, -4.7864e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn1.weight&#39;, tensor([0.2213, 0.2061, 0.2003, 0.2207, 0.2161, 0.2270, 0.2186, 0.2425, 0.2097, 0.2322, 0.2212, 0.2255, 0.2101, 0.2401, 0.2241, 0.2785, 0.2466, 0.2145, 0.1979, 0.2425, 0.2370, 0.2137, 0.2910, 0.2864, 0.2025, 0.2330, 0.1888, 0.1363, 0.2469, 0.2530, 0.2034, 0.2686, 0.2515, 0.2339, 0.3019, 0.2489, 0.2111, 0.2365, 0.2695, 0.2317, 0.2228, 0.1836, 0.2460, 0.2243, 0.2026, 0.2545, 0.2545, 0.2881, 0.2021, 0.2380, 0.2180, 0.2112, 0.2470, 0.2594, 0.2075, 0.2603, 0.3019, 0.2579, 0.2049, 0.2143, 0.2382, 0.2618, 0.1768, 0.2637, 0.2835, 0.2249, 0.2221, 0.2366, 0.2369, 0.2130, 0.2345, 0.2219, 0.2040, 0.2345, 0.2174, 0.2654, 0.3041, 0.2744, 0.2368, 0.1775, 0.2059, 0.2203, 0.1996, 0.2063, 0.1878, 0.2248, 0.2532, 0.2526, 0.2635, 0.1955, 0.2170, 0.2179, 0.2718, 0.2421, 0.2319, 0.2303, 0.2781, 0.2732, 0.1797, 0.2067, 0.2479, 0.1866, 0.2027, 0.2278, 0.1937, 0.2404, 0.2652, 0.2899, 0.2433, 0.2149, 0.2132, 0.2353, 0.2731, 0.1919, 0.2854, 0.2583, 0.3634, 0.2195, 0.1956, 0.2219, 0.1924, 0.2203, 0.2744, 0.2521, 0.2499, 0.2405, 0.2637, 0.2547, 0.2507, 0.1711, 0.2192, 0.2783, 0.2296, 0.2366, 0.2808, 0.2422, 0.2079, 0.2335, 0.2240, 0.2792, 0.2402, 0.2141, 0.2783, 0.2879, 0.2071, 0.2075, 0.2793, 0.1972, 0.1909, 0.2263, 0.2042, 0.2395, 0.2392, 0.2593, 0.2396, 0.2398, 0.2398, 0.2003, 0.2282, 0.3216, 0.2639, 0.2029, 0.2280, 0.2332, 0.2689, 0.2330, 0.2251, 0.2298, 0.3042, 0.2371, 0.2056, 0.2708, 0.2140, 0.1956, 0.2588, 0.2508, 0.3410, 0.2417, 0.2667, 0.2262, 0.2230, 0.2541, 0.1953, 0.2074, 0.2359, 0.2473, 0.2588, 0.2353, 0.2186, 0.2259, 0.2071, 0.2678, 0.2773, 0.2134, 0.2058, 0.2031, 0.2229, 0.1866, 0.2602, 0.1698, 0.1892, 0.2335, 0.2275, 0.2419, 0.2169, 0.2345, 0.2684, 0.2241, 0.1945, 0.2477, 0.2326, 0.1893, 0.2381, 0.2494, 0.2126, 0.1834, 0.2364, 0.2249, 0.2028, 0.1987, 0.3028, 0.1970, 0.2143, 0.2132, 0.1893, 0.2578, 0.2651, 0.2420, 0.2692, 0.2367, 0.2075, 0.2151, 0.1961, 0.2296, 0.2399, 0.2283, 0.1928, 0.2143, 0.2572, 0.2098, 0.2172, 0.2199, 0.1905, 0.2741, 0.2674, 0.2309, 0.1965, 0.2643, 0.2295, 0.2180, 0.2319, 0.2147, 0.2094, 0.2133, 0.2724, 0.1972], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn1.bias&#39;, tensor([-0.1840, -0.1689, -0.1688, -0.1779, -0.0668, -0.1879, -0.2003, -0.1592, -0.0910, -0.1764, -0.1444, -0.0971, -0.1277, -0.1523, -0.1825, -0.2168, -0.1692, -0.0897, -0.1545, -0.2086, -0.2373, -0.1813, -0.2273, -0.1985, -0.0802, -0.1440, -0.0397, 0.0870, -0.1678, -0.2122, -0.0938, -0.2210, -0.1722, -0.3403, -0.2965, -0.0788, -0.1429, -0.1377, -0.2343, -0.1434, -0.2059, -0.0795, -0.1756, -0.1129, -0.1827, -0.1266, -0.1857, -0.2176, -0.0898, -0.1262, -0.1935, -0.2549, -0.1833, -0.1710, -0.1416, -0.2353, -0.2675, -0.1905, -0.1218, -0.1633, -0.1765, -0.1820, -0.0589, -0.2536, -0.2880, -0.2419, -0.1979, -0.1326, -0.2167, -0.0939, -0.1817, -0.2067, -0.0967, -0.1886, -0.1963, -0.1853, -0.1814, -0.1972, -0.2783, -0.1480, -0.2194, -0.0915, -0.1047, -0.2731, -0.0601, -0.1151, -0.2039, -0.2097, -0.2871, -0.1162, -0.1429, -0.1643, -0.2650, -0.1313, -0.2354, -0.1487, -0.2909, -0.2724, -0.1752, -0.1733, -0.1669, -0.0763, -0.1136, -0.1141, -0.1387, -0.1263, -0.2033, -0.2849, -0.1307, -0.2058, -0.1463, -0.1070, -0.3914, -0.0783, -0.3547, -0.2239, -0.3448, -0.1291, -0.1033, -0.2729, -0.1065, -0.1548, -0.1933, -0.1912, -0.2389, -0.1284, -0.1740, -0.2119, -0.1557, -0.1285, -0.2208, -0.2927, -0.2323, -0.2692, -0.2546, -0.2254, -0.1224, -0.0743, -0.2135, -0.1854, -0.1436, -0.1207, -0.2548, -0.2060, -0.0798, -0.1005, -0.1860, -0.1890, -0.1179, -0.1192, -0.1179, -0.1547, -0.1929, -0.2188, -0.1636, -0.2403, -0.2011, -0.1257, -0.1927, -0.2917, -0.1854, -0.1776, -0.1218, -0.2471, -0.2082, -0.3238, -0.1623, -0.1270, -0.3209, -0.1713, -0.1757, -0.1849, -0.1764, -0.1266, -0.2166, -0.1810, -0.2673, -0.1506, -0.2833, -0.2309, -0.1667, -0.1672, -0.1196, -0.1126, -0.1911, -0.2306, -0.1895, -0.1565, -0.1205, -0.2075, -0.1050, -0.1635, -0.2354, -0.2080, -0.0921, -0.0765, -0.2026, -0.0815, -0.1927, -0.0700, -0.1173, -0.1627, -0.1591, -0.1348, -0.1474, -0.1429, -0.2237, -0.1044, -0.0867, -0.1494, -0.2288, -0.1238, -0.2553, -0.2343, -0.1109, -0.0345, -0.1766, -0.2095, -0.1321, -0.1313, -0.2301, -0.0587, -0.1017, -0.1344, -0.1592, -0.1667, -0.1660, -0.1563, -0.2402, -0.2665, -0.1078, -0.0967, -0.1471, -0.1781, -0.2117, -0.1064, -0.1535, -0.1332, -0.1590, -0.1867, -0.1076, -0.1144, -0.1071, -0.3031, -0.2972, -0.1959, -0.1660, -0.2014, -0.0904, -0.1272, -0.1671, -0.1233, -0.1104, -0.1464, -0.2427, -0.0815], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn1.running_mean&#39;, tensor([ 1.8481e-01, -6.4460e-01, 8.6565e-02, -6.9226e-01, 2.6334e-01, -9.2178e-01, -1.8190e-01, -3.7544e-01, -5.3769e-01, 2.5675e-01, -1.9478e-01, -9.0748e-02, 1.9878e-02, -1.0929e-01, -2.6985e-01, -1.5106e-01, -3.3795e-01, -1.6685e-01, -9.9037e-02, 2.1880e-02, -7.7525e-02, 1.2807e-01, -1.4094e-02, -5.2714e-03, 2.6075e-01, -5.0344e-01, -8.7877e-01, -2.7245e+00, -3.5843e-01, -3.7060e-01, 1.4251e-01, -3.2260e-01, -3.5071e-01, 9.5893e-01, -4.1027e-01, -3.2693e-01, -2.7253e-01, 3.4066e-01, -3.7521e-01, -3.2509e-01, -1.2841e-01, -2.6477e-01, -6.4088e-01, -3.4103e-01, -2.2963e-01, -2.1158e-01, 1.9072e-01, -2.4622e-01, -1.1220e-01, -3.0358e-02, -4.2920e-01, 8.5264e-02, -6.1554e-01, -6.2485e-01, -2.6037e-01, -4.1042e-01, -8.7389e-01, -6.1835e-01, 1.7011e-01, -5.4685e-02, -2.6794e-01, -4.5430e-01, -1.3872e-01, 8.7585e-01, -2.4175e-01, -2.4810e-01, -3.7917e-01, -4.3717e-01, -5.8045e-01, -3.9282e-01, -3.5072e-01, 2.0330e-01, -3.2337e-01, -4.4175e-01, -1.4647e-01, 8.7075e-02, -1.3624e+00, -4.2310e-01, 3.9864e-01, -5.3952e-01, 1.6551e-01, -8.5393e-01, -1.4485e-01, -1.1755e-01, -1.1784e-01, -1.5521e-01, -3.3537e-01, -3.4222e-01, 3.2088e-01, -3.2016e-01, -9.2728e-01, 2.5952e-02, -4.2717e-01, -2.2382e-01, 9.3286e-01, -2.4046e-01, -2.6057e-01, -7.8426e-01, -1.3634e-01, -1.3757e-01, -3.7636e-01, 5.4666e-02, -2.4193e-01, -3.5047e-02, -4.4301e-01, -6.3833e-01, -5.0007e-01, -3.5578e-01, -1.7295e-01, 7.9332e-01, -1.0042e+00, -6.4052e-01, -7.0671e-01, 3.8339e-01, -9.2329e-01, -2.9036e-01, -1.9124e-01, -3.2156e-02, -5.8999e-01, -3.7286e-01, -7.3340e-01, -8.0150e-01, -1.3697e-01, -9.7501e-01, -2.3510e-01, 5.2665e-01, -1.6432e-01, -3.6736e-02, -3.2850e-02, 1.6820e-01, -5.1292e-01, -3.9650e-01, -1.6325e-01, -5.8615e-01, -6.0133e-01, -9.9477e-02, -2.7503e-01, -3.8728e-01, 3.1889e-01, -2.8910e-01, -4.1908e-01, -4.5104e-01, -8.1542e-01, -4.8189e-01, 3.2806e-02, 2.4973e-02, -2.8556e-01, 1.5877e-01, -3.9015e-01, -6.2168e-01, -1.4287e-01, -4.5294e-01, -2.0590e-01, -9.3673e-01, -2.9698e-01, -2.7361e-01, 2.0611e-03, -1.4999e-01, -7.2694e-04, -1.5365e+00, -4.7158e-01, -4.6586e-01, -3.5499e-01, -3.7779e-01, -6.4302e-01, 2.1327e-01, -1.6016e-01, -1.1751e-01, -2.2186e-01, -1.8926e-01, -3.2383e-01, 1.8158e-01, -2.2330e-01, -1.7144e-01, -5.1831e-01, -7.9110e-01, -1.5830e+00, 4.1648e-02, -9.1180e-01, 2.8094e-01, -3.5053e-01, -2.7486e-01, -5.5529e-01, 7.5911e-03, -7.4575e-01, -1.8624e-01, -1.8350e-02, -3.9468e-01, -3.4073e-01, -4.6578e-01, -4.1042e-01, -6.1734e-01, -7.4591e-01, -3.9020e-02, -5.9493e-01, -2.7871e-01, -3.0801e-01, -2.1260e-01, -9.3168e-01, -2.7867e-01, -4.6217e-01, -9.7180e-01, -1.5807e-01, -3.5050e-02, -3.9859e-01, -2.1187e-01, -9.0605e-01, -1.1501e+00, 4.9290e-02, -8.4744e-02, -4.7210e-01, -2.8001e-01, -3.3429e-01, -1.0234e+00, -1.2445e-01, -4.4437e-01, -7.1452e-02, -3.3984e-01, 5.9562e-01, 1.5747e-01, -5.8649e-01, -6.9698e-01, -2.9345e-01, -9.3145e-02, 6.9986e-02, -4.7230e-02, -2.3668e-01, -4.4133e-01, -2.3268e-01, -4.9843e-01, -5.2189e-01, 3.3914e-01, -6.6523e-01, 1.8750e-02, -4.1480e-01, -5.1213e-01, -2.1290e-02, -3.8363e-01, -1.4563e-01, -3.9992e-01, -3.8991e-01, -4.1262e-01, -3.7700e-01, -1.0015e+00, -9.7845e-01, -3.6494e-01, 5.3820e-02, -1.0632e+00, -1.4921e-02, -2.4896e-01, -3.5288e-01, -2.8775e-01, -8.3518e-02, -5.9053e-01, -4.0963e-01, -3.5211e-01], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn1.running_var&#39;, tensor([0.1619, 0.0977, 0.0935, 0.1380, 0.2262, 0.1764, 0.1373, 0.1693, 0.2568, 0.1744, 0.2580, 0.2531, 0.2799, 0.2139, 0.1036, 0.1783, 0.1434, 0.1622, 0.1318, 0.1285, 0.0916, 0.0968, 0.2414, 0.2178, 0.2886, 0.1724, 0.2192, 0.1270, 0.1914, 0.1609, 0.2622, 0.1826, 0.2216, 0.1087, 0.1045, 0.1955, 0.1227, 0.2447, 0.1636, 0.1636, 0.1254, 0.1726, 0.1558, 0.2479, 0.1139, 0.3274, 0.2420, 0.2077, 0.2049, 0.3090, 0.1012, 0.0782, 0.1388, 0.1667, 0.1222, 0.1251, 0.1460, 0.1793, 0.1977, 0.1967, 0.1591, 0.2100, 0.2454, 0.1723, 0.2347, 0.1072, 0.1517, 0.3949, 0.1268, 0.2021, 0.1526, 0.1000, 0.1866, 0.1549, 0.1570, 0.1445, 0.2912, 0.1815, 0.1326, 0.1626, 0.1415, 0.1579, 0.1415, 0.1128, 0.2085, 0.2326, 0.1202, 0.1342, 0.1745, 0.1103, 0.1777, 0.1617, 0.2119, 0.2058, 0.1258, 0.1622, 0.1660, 0.1859, 0.0957, 0.1143, 0.1283, 0.1813, 0.1440, 0.2469, 0.1628, 0.2297, 0.1720, 0.2108, 0.2270, 0.1121, 0.1220, 0.4164, 0.0652, 0.2267, 0.1052, 0.1872, 0.2746, 0.1336, 0.1603, 0.1016, 0.1575, 0.1054, 0.2833, 0.1749, 0.1536, 0.1419, 0.2554, 0.1522, 0.2312, 0.0945, 0.1703, 0.1202, 0.1364, 0.1720, 0.1647, 0.1332, 0.1615, 0.2780, 0.1487, 0.2259, 0.1501, 0.2128, 0.1685, 0.1498, 0.1756, 0.1916, 0.2117, 0.0870, 0.1198, 0.1760, 0.1626, 0.1728, 0.2020, 0.2031, 0.1341, 0.1172, 0.1528, 0.1991, 0.1542, 0.1750, 0.2505, 0.1565, 0.1893, 0.0978, 0.1420, 0.1387, 0.1064, 0.1699, 0.2530, 0.1177, 0.1303, 0.2336, 0.1355, 0.1784, 0.2061, 0.1951, 0.2207, 0.2193, 0.1304, 0.1265, 0.1203, 0.3161, 0.1276, 0.1892, 0.1275, 0.1094, 0.2197, 0.1686, 0.2954, 0.1568, 0.1512, 0.1723, 0.2998, 0.1135, 0.2139, 0.2533, 0.1940, 0.1683, 0.1634, 0.1410, 0.1697, 0.1599, 0.2401, 0.2762, 0.1709, 0.2247, 0.1974, 0.2106, 0.2422, 0.1636, 0.1002, 0.1704, 0.1060, 0.1291, 0.1707, 0.2293, 0.1614, 0.1626, 0.1610, 0.1204, 0.3113, 0.2200, 0.2442, 0.1656, 0.1142, 0.2584, 0.2017, 0.1996, 0.1116, 0.1272, 0.1262, 0.1968, 0.1513, 0.1316, 0.1267, 0.2199, 0.1933, 0.1537, 0.2576, 0.1246, 0.2524, 0.2615, 0.2077, 0.2352, 0.1087, 0.1108, 0.1760, 0.1582, 0.2096, 0.2840, 0.3091, 0.1753, 0.1887, 0.1537, 0.2011, 0.2076], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.1.conv2.weight&#39;, tensor([[[[ 5.6907e-03, 5.8225e-03, 1.7534e-02], [-5.5851e-03, -8.7479e-03, -7.1566e-03], [ 4.3293e-03, 6.6804e-03, -4.8764e-04]], [[-7.1795e-03, -2.1409e-02, -1.1750e-02], [ 3.8749e-03, -3.1264e-03, 6.9788e-04], [ 1.9015e-02, 2.1802e-02, 2.9767e-02]], [[-4.9520e-03, 2.0993e-03, 5.2340e-03], [ 7.3509e-03, -4.9191e-03, -1.6944e-03], [-1.5886e-02, -1.6039e-02, -4.6744e-03]], ..., [[ 8.3316e-05, 1.5402e-03, 5.9288e-03], [ 3.7834e-03, -4.9404e-03, 6.4901e-03], [-1.1693e-02, -9.7283e-03, -5.0388e-03]], [[ 7.2561e-03, 1.3566e-02, 1.7533e-02], [-2.7303e-02, 7.4880e-03, 1.9648e-02], [-1.2228e-02, -1.0821e-02, -2.7943e-03]], [[-1.7638e-02, -5.2468e-03, -2.8329e-02], [-3.1460e-02, -1.4487e-02, 9.4464e-03], [ 1.2097e-03, 1.5592e-02, 3.5665e-02]]], [[[-2.5017e-02, -1.1472e-02, -6.2185e-03], [-2.8255e-02, -1.8164e-02, -1.3886e-02], [-1.3709e-02, -1.5846e-02, -8.9273e-03]], [[-7.5799e-03, -1.4686e-03, 8.7684e-03], [-6.1850e-03, -5.9629e-03, -1.2186e-03], [-2.0525e-02, 1.6152e-03, 5.2805e-03]], [[-3.4167e-03, -5.4719e-04, 2.6141e-03], [-1.1230e-02, -7.1177e-03, 5.3042e-03], [-1.8444e-02, -1.7026e-03, 1.1061e-02]], ..., [[ 1.1407e-02, 3.3355e-02, 1.9418e-02], [ 3.4196e-02, 3.1605e-02, 1.8496e-02], [ 1.5543e-02, 1.6638e-02, 1.1603e-02]], [[ 2.5242e-03, -5.7512e-03, -3.6166e-03], [ 2.1745e-02, -6.0735e-03, -9.0827e-03], [ 8.5451e-03, -3.2756e-03, -5.8972e-03]], [[-1.0816e-02, -9.7696e-03, -1.5534e-02], [-1.0297e-02, -8.8593e-03, -1.7205e-02], [ 9.7055e-03, -1.9984e-02, -2.5292e-02]]], [[[ 1.4956e-03, -7.2236e-03, -2.5088e-03], [ 1.8793e-02, 1.6076e-02, 1.2774e-02], [ 1.5455e-03, -2.0161e-03, -4.5312e-03]], [[-1.1616e-02, -1.0077e-02, -1.6645e-02], [-4.2908e-03, -4.4042e-03, -9.6191e-03], [ 2.5495e-03, 9.4948e-03, 1.5478e-03]], [[-2.0695e-02, -1.5572e-02, -1.5075e-02], [-3.3889e-03, 1.0722e-02, 1.3115e-02], [ 5.7305e-03, 8.2226e-03, -2.6639e-03]], ..., [[-5.7730e-03, 3.8045e-03, -1.9265e-03], [-1.5654e-02, -1.2679e-03, 1.4239e-02], [-6.9670e-03, -7.4661e-03, 9.6046e-03]], [[ 1.4247e-02, 1.7810e-02, 8.2137e-03], [ 2.1926e-03, -7.9149e-03, 6.6295e-04], [-1.3229e-02, -2.8368e-02, -4.9897e-03]], [[-3.8290e-03, -8.1333e-04, 8.0571e-03], [ 9.4420e-03, 2.8201e-03, 1.1035e-02], [ 1.7512e-02, 6.0421e-03, 2.0693e-03]]], ..., [[[ 6.6993e-03, 3.9957e-03, -6.1107e-03], [ 1.6014e-02, 6.1932e-03, -6.4037e-03], [ 2.2590e-02, 2.0491e-02, 1.8812e-02]], [[-7.1467e-03, 2.7827e-03, 1.6263e-02], [-1.2863e-02, -1.2000e-02, 1.9693e-02], [ 2.1610e-02, 2.2343e-02, 3.7790e-02]], [[ 2.2652e-02, 1.9100e-02, -1.0759e-02], [-9.3817e-03, -1.7729e-02, -9.8533e-03], [-2.5167e-02, -3.1655e-02, -1.1629e-02]], ..., [[ 2.7768e-03, 6.6173e-03, 2.6231e-03], [ 2.5194e-02, 1.0523e-02, 1.2528e-03], [-4.1938e-03, -8.4747e-03, 2.7473e-03]], [[-1.1031e-02, 4.4490e-04, 2.1860e-03], [ 5.5323e-03, 2.7640e-03, -2.4762e-03], [ 3.4116e-03, 1.1310e-02, 1.1838e-02]], [[ 2.5998e-02, 2.8890e-03, 2.1287e-04], [ 1.9927e-02, -1.0277e-02, 9.3093e-03], [ 3.0529e-02, 1.2679e-02, -9.5888e-03]]], [[[-9.1468e-03, -1.8257e-03, -1.7668e-03], [-2.4484e-02, -2.6765e-02, -6.6899e-03], [-3.1944e-02, -2.8530e-02, -1.2699e-02]], [[ 2.6649e-03, -1.0292e-03, -3.4199e-03], [ 4.9930e-03, -1.6165e-03, -1.0704e-02], [ 6.2584e-03, 9.9979e-03, -6.2336e-03]], [[-2.3030e-02, -2.2894e-02, -6.7662e-03], [-6.3552e-03, 1.4139e-02, 9.6072e-03], [-4.9203e-03, 2.7315e-02, 1.3216e-02]], ..., [[-4.9133e-03, -9.2397e-03, 1.0011e-02], [-4.2765e-03, -3.5853e-03, 1.0896e-02], [-3.7703e-05, -9.9187e-03, -9.2086e-04]], [[ 7.0112e-04, 2.0867e-03, 1.9641e-02], [-3.2464e-04, 6.0922e-03, 1.8564e-02], [-1.9042e-02, -1.4035e-02, 2.6225e-03]], [[-4.7820e-03, -7.6307e-04, 2.6985e-02], [ 1.0019e-02, 1.3277e-02, 2.8636e-02], [ 2.9455e-02, 1.2880e-02, 3.5050e-03]]], [[[ 1.9484e-02, 2.5036e-02, 2.3092e-02], [ 1.9837e-02, 2.6937e-02, 2.2046e-02], [ 1.7311e-02, 2.7804e-02, 2.4911e-02]], [[-5.8495e-03, -1.2449e-03, -3.6594e-03], [-3.1197e-03, -3.4043e-03, -3.8815e-04], [ 3.8225e-03, 6.4260e-03, 1.9369e-03]], [[-2.8269e-03, -6.1547e-03, -9.6351e-03], [-1.5779e-02, -9.2813e-03, -7.5136e-03], [-1.5303e-02, -8.4985e-03, 1.7663e-03]], ..., [[ 1.4187e-02, 5.5714e-03, 1.5749e-02], [ 2.4548e-02, 1.6061e-02, 2.1779e-02], [ 2.0244e-02, 1.6468e-02, 1.6746e-02]], [[ 8.9596e-04, -7.7995e-03, -1.7619e-02], [-2.7241e-04, -8.1050e-03, -1.7915e-02], [-6.5604e-04, -6.8301e-04, -1.1365e-02]], [[-7.3640e-03, -1.3847e-02, -1.6473e-03], [-1.5245e-02, -2.4448e-02, -2.2630e-02], [-7.7712e-03, -2.1104e-02, -2.3501e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn2.weight&#39;, tensor([0.2514, 0.2020, 0.1221, 0.0947, 0.1920, 0.0971, 0.1295, 0.1133, 0.1016, 0.1121, 0.1756, 0.1073, 0.1642, 0.0877, 0.1829, 0.1958, 0.1274, 0.1042, 0.1643, 0.1382, 0.1135, 0.1935, 0.1833, 0.1133, 0.1958, 0.1600, 0.2004, 0.1534, 0.0802, 0.1301, 0.1454, 0.1263, 0.1792, 0.1457, 0.1521, 0.1481, 0.1420, 0.1170, 0.0852, 0.1750, 0.1384, 0.1920, 0.0717, 0.1702, 0.1649, 0.1564, 0.1546, 0.2112, 0.1090, 0.0955, 0.1152, 0.1255, 0.1830, 0.1112, 0.1976, 0.1253, 0.1297, 0.0941, 0.1339, 0.1928, 0.1414, 0.1374, 0.1767, 0.1816, 0.1775, 0.1789, 0.1478, 0.1251, 0.1876, 0.1549, 0.1424, 0.0978, 0.1169, 0.1745, 0.1432, 0.1487, 0.1212, 0.1055, 0.1063, 0.6200, 0.1659, 0.2602, 0.1574, 0.1124, 0.1096, 0.1205, 0.1675, 0.2297, 0.1633, 0.1396, 0.1783, 0.0968, 0.1285, 0.1180, 0.0829, 0.2038, 0.1421, 0.1781, 0.1089, 0.1062, 0.1515, 0.1990, 0.2384, 0.1695, 0.2406, 0.2344, 0.1561, 0.1068, 0.1214, 0.1521, 0.1516, 0.1303, 0.2104, 0.1850, 0.1277, 0.1329, 0.0672, 0.1843, 0.1588, 0.1421, 0.0924, 0.1345, 0.1642, 0.1309, 0.1258, 0.0718, 0.2467, 0.1401, 0.1750, 0.1190, 0.1502, 0.1721, 0.2102, 0.1125, 0.1805, 0.1401, 0.1042, 0.1818, 0.0917, 0.1571, 0.1270, 0.1197, 0.1750, 0.1111, 0.2879, 0.1846, 0.1370, 0.1977, 0.1375, 0.1927, 0.1588, 0.2827, 0.1003, 0.1474, 0.1750, 0.1843, 0.3232, 0.0873, 0.2069, 0.2323, 0.1774, 0.2297, 0.2995, 0.1116, 0.2182, 0.2576, 0.2101, 0.1624, 0.1762, 0.1253, 0.1793, 0.1275, 0.1335, 0.1825, 0.2112, 0.1336, 0.1780, 0.1190, 0.1309, 0.1638, 0.2411, 0.2491, 0.2565, 0.1541, 0.1544, 0.1348, 0.1822, 0.2848, 0.1484, 0.0784, 0.1449, 0.1526, 0.1007, 0.1689, 0.0729, 0.1336, 0.2556, 0.1161, 0.1543, 0.5629, 0.2072, 0.1311, 0.2501, 0.1308, 0.1030, 0.1122, 0.1383, 0.1910, 0.1102, 0.2319, 0.1325, 0.1152, 0.1532, 0.1273, 0.1869, 0.2322, 0.2122, 0.1492, 0.0694, 0.0963, 0.1529, 0.2587, 0.1133, 0.2170, 0.1605, 0.1290, 0.0952, 0.1303, 0.1470, 0.1593, 0.1197, 0.2707, 0.1245, 0.1157, 0.2435, 0.0879, 0.1235, 0.1792, 0.1659, 0.1031, 0.1993, 0.2150, 0.1206, 0.1519, 0.1664, 0.2460, 0.1338, 0.1836, 0.0948, 0.0908, 0.1567, 0.2078, 0.0960, 0.1851, 0.1293, 0.0774], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn2.bias&#39;, tensor([-0.1350, -0.0840, -0.0527, -0.1422, -0.1089, -0.0418, -0.0181, -0.0300, 0.0185, -0.0849, -0.2626, -0.0507, -0.1676, -0.0850, -0.1153, -0.1771, -0.0851, -0.1058, -0.1817, -0.0795, -0.0822, -0.2196, -0.0082, -0.0315, 0.0137, 0.0184, 0.2067, -0.1708, 0.0582, -0.1039, -0.0844, -0.0576, 0.0406, -0.1439, -0.0538, -0.1102, 0.0600, 0.0050, -0.0879, -0.2660, -0.0765, -0.2913, 0.0089, 0.0845, -0.0571, -0.0164, -0.0194, -0.0502, -0.0416, 0.0048, 0.0163, -0.1031, -0.0382, 0.0071, -0.1075, -0.0018, -0.0348, 0.0323, 0.0449, -0.0762, -0.0546, -0.1137, -0.0750, -0.1379, -0.1809, 0.1275, -0.0999, -0.0016, -0.0610, -0.0567, -0.0568, -0.0430, -0.0698, -0.1633, -0.0803, -0.0984, -0.0308, -0.0327, -0.0590, 0.0085, -0.1011, -0.1154, -0.0243, -0.0431, 0.0252, -0.0751, -0.1160, -0.1344, 0.0017, -0.0932, 0.0176, -0.0714, -0.1239, -0.1168, -0.0449, 0.0684, -0.1186, -0.1058, -0.0132, -0.0186, -0.0799, -0.1612, 0.0802, -0.0479, 0.0106, -0.0785, -0.0401, -0.0670, 0.0312, -0.1042, -0.0988, -0.1747, 0.0499, -0.0926, -0.0313, 0.0505, -0.0687, -0.0806, -0.1580, -0.1017, -0.0846, 0.0925, -0.1534, -0.1287, -0.1131, -0.0295, -0.1675, -0.1299, -0.2316, 0.1362, -0.1123, -0.1225, -0.1648, 0.0245, 0.0195, -0.1033, -0.0761, -0.0858, 0.0130, -0.1273, 0.0542, -0.0966, -0.1439, -0.0903, -0.2912, -0.0603, -0.1205, -0.2144, -0.0366, -0.2314, -0.0742, -0.2944, -0.0342, -0.1944, 0.0036, -0.0572, -0.0542, -0.0156, 0.0315, -0.0917, -0.1401, -0.1337, -0.2870, 0.0406, -0.1283, -0.1137, -0.1127, -0.0335, -0.0736, -0.0269, -0.0691, -0.0937, -0.0564, -0.2180, -0.1531, -0.0986, -0.0972, -0.0586, 0.0252, -0.1339, -0.2088, -0.0215, -0.2274, -0.1134, -0.0833, 0.0015, -0.0158, -0.2434, -0.0739, 0.0342, -0.0146, -0.0379, -0.0614, -0.2295, -0.0187, -0.0027, -0.1144, -0.0767, -0.1470, -0.1413, -0.1512, -0.0712, 0.0050, -0.0761, -0.0022, -0.0841, 0.0371, 0.0482, -0.1036, -0.0737, -0.0608, 0.0070, -0.2062, -0.1154, -0.1900, -0.1271, 0.0307, -0.1280, -0.0095, -0.0659, 0.0409, -0.1858, -0.0337, -0.1854, -0.0453, -0.1082, -0.0417, 0.1035, 0.0213, -0.1561, -0.0755, -0.0963, 0.0098, 0.0550, 0.0906, -0.0633, -0.1857, -0.2301, 0.0478, -0.1201, -0.1571, -0.0615, 0.0033, 0.0519, -0.0146, -0.0223, -0.0834, -0.1547, -0.2107, -0.0123, -0.1246, -0.2060, -0.0454, -0.1765, -0.0723, 0.0859], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn2.running_mean&#39;, tensor([-6.4839e-02, -6.0641e-02, -1.6744e-01, 6.2712e-02, -6.6830e-02, -4.6574e-02, -7.7366e-02, -3.2571e-02, -6.5526e-03, 1.7025e-02, -3.4151e-02, -7.4200e-02, -6.9609e-02, -6.2735e-02, -4.2454e-02, -6.7262e-02, -1.8007e-02, 1.5067e-01, 1.3883e-02, -8.2109e-02, 6.4769e-02, -5.9819e-02, 3.8027e-02, -3.7426e-02, -1.4769e-02, 1.0514e-01, 1.7561e-01, -1.2351e-01, 1.0029e-01, -6.9397e-02, -5.3510e-02, -4.3958e-02, -3.2141e-02, -1.2728e-01, -1.8227e-02, -3.9632e-03, -8.8573e-02, -1.0423e-01, 9.7543e-02, -7.3316e-02, -9.9226e-02, -1.0187e-01, -4.1858e-02, -1.5644e-01, 1.0842e-02, 1.0959e-02, -9.5068e-02, -2.0633e-01, 6.3145e-02, -1.2543e-01, -4.3294e-02, -5.1098e-02, -3.9734e-02, -6.0182e-02, 1.1540e-01, -9.8251e-02, -8.5659e-02, -9.2908e-02, -6.8574e-02, -1.4444e-01, -3.7467e-02, -3.6237e-02, -1.7252e-02, -7.8520e-02, -5.7353e-03, 1.7202e-03, -8.1723e-02, 1.3208e-02, -1.6232e-01, -6.7403e-02, -3.3865e-02, -5.6147e-02, 6.1610e-02, -6.5747e-02, -8.6788e-02, 1.1720e-02, -9.7768e-02, -1.7514e-02, -6.8393e-03, -3.1095e-01, 3.7261e-02, -1.2093e-01, -7.7972e-02, -1.6199e-02, -5.2682e-02, 5.5201e-02, 3.8112e-02, -5.4788e-02, 2.0780e-01, -1.0994e-02, 6.7012e-03, -6.7884e-02, -3.3149e-02, 8.6694e-02, -4.3975e-02, -1.1575e-01, -6.1078e-02, -3.3276e-02, -1.0062e-02, -2.4505e-02, -6.8810e-03, 1.3103e-02, -8.4129e-02, -7.0942e-02, -1.7461e-01, -3.6238e-02, -1.6107e-01, -3.8098e-02, -4.2525e-03, -1.6915e-02, -7.3801e-02, -9.4429e-02, -1.1386e-01, -5.2297e-02, -1.3119e-01, -2.9606e-02, 1.4301e-02, -8.8203e-02, 1.0852e-02, -3.6399e-02, -5.1153e-02, -6.3402e-02, -3.0643e-02, -8.3919e-02, 2.6299e-04, -1.7936e-02, -4.3253e-02, -9.6126e-03, -3.0793e-02, -2.4943e-02, -1.1707e-01, -8.8117e-02, 6.5964e-03, -5.0035e-02, -1.1434e-01, -1.1046e-01, -8.9700e-02, -1.6400e-01, -6.7689e-02, -6.0526e-02, -9.2932e-02, -8.4583e-02, -6.4940e-02, 9.5319e-02, -3.3595e-02, -4.4598e-02, -8.3172e-02, -3.5411e-02, -7.5944e-02, -8.5537e-03, 1.2303e-01, -5.3389e-02, 3.7648e-02, -3.2204e-02, -1.0669e-01, -7.0022e-02, -3.7075e-01, -4.4515e-02, -2.7868e-02, -1.2971e-01, -9.2894e-02, -1.5838e-01, -1.1854e-01, -1.2648e-01, -1.2708e-01, -4.3092e-02, -1.9593e-02, -8.2202e-02, -6.2628e-02, 1.2338e-02, -8.8959e-03, -5.1542e-02, -1.7021e-02, -1.0142e-01, -6.0005e-02, -7.7803e-03, -3.3259e-02, -5.6633e-02, -1.3787e-01, 4.9822e-02, -2.4047e-03, -1.6406e-01, -1.6662e-02, -1.0787e-01, -4.0775e-02, 5.4073e-02, -5.5456e-02, -6.9889e-02, -1.3323e-02, -3.6906e-02, 3.4164e-02, -4.8423e-02, 5.9071e-02, -6.4726e-02, 6.9163e-03, -1.7858e-02, -6.9225e-02, -6.5742e-02, -6.4473e-03, -4.2818e-01, -1.0637e-01, -3.0440e-02, -3.0389e-01, -4.1894e-02, -3.2859e-02, 3.4759e-02, 2.4142e-02, -4.0452e-02, -4.0606e-02, -1.0699e-01, 3.1576e-02, -2.0580e-02, -8.5160e-02, 1.7651e-02, -3.8187e-02, -8.0363e-02, -1.3992e-01, -4.9539e-03, 3.5227e-03, -3.6230e-02, -8.9476e-02, -9.3631e-02, 4.3667e-02, -1.0084e-01, -8.7378e-02, -5.7676e-02, -6.3853e-02, 5.0774e-03, -1.6813e-01, 1.0744e-02, -7.1769e-02, -3.8036e-01, 4.7070e-02, 4.3288e-02, -1.2486e-01, -2.1872e-02, -1.8894e-02, -6.2855e-02, -8.7453e-02, -2.8929e-02, 2.2776e-02, 1.5949e-01, -7.3350e-02, 4.7881e-02, -6.7784e-02, -1.4545e-02, -7.2378e-02, -7.3324e-02, 4.8483e-02, -6.6702e-02, 1.5357e-01, 5.3072e-02, -8.3753e-02, -7.5560e-02, -2.0485e-02, -3.9240e-02], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn2.running_var&#39;, tensor([0.0092, 0.0069, 0.0110, 0.0105, 0.0064, 0.0068, 0.0092, 0.0095, 0.0074, 0.0094, 0.0080, 0.0071, 0.0062, 0.0073, 0.0119, 0.0086, 0.0061, 0.0090, 0.0089, 0.0075, 0.0109, 0.0148, 0.0090, 0.0086, 0.0115, 0.0260, 0.0189, 0.0087, 0.0069, 0.0059, 0.0079, 0.0055, 0.0139, 0.0068, 0.0076, 0.0234, 0.0146, 0.0070, 0.0101, 0.0067, 0.0085, 0.0100, 0.0072, 0.0181, 0.0089, 0.0115, 0.0103, 0.0087, 0.0130, 0.0085, 0.0129, 0.0061, 0.0098, 0.0071, 0.0094, 0.0126, 0.0055, 0.0056, 0.0106, 0.0106, 0.0081, 0.0094, 0.0079, 0.0060, 0.0066, 0.0146, 0.0066, 0.0068, 0.0084, 0.0088, 0.0095, 0.0093, 0.0083, 0.0066, 0.0070, 0.0080, 0.0059, 0.0066, 0.0116, 0.0388, 0.0087, 0.0087, 0.0117, 0.0055, 0.0093, 0.0107, 0.0103, 0.0087, 0.0094, 0.0086, 0.0098, 0.0073, 0.0098, 0.0139, 0.0042, 0.0118, 0.0171, 0.0093, 0.0115, 0.0113, 0.0101, 0.0072, 0.0184, 0.0079, 0.0159, 0.0124, 0.0117, 0.0064, 0.0096, 0.0081, 0.0063, 0.0085, 0.0140, 0.0104, 0.0093, 0.0080, 0.0077, 0.0085, 0.0076, 0.0151, 0.0065, 0.0105, 0.0119, 0.0047, 0.0077, 0.0063, 0.0096, 0.0081, 0.0067, 0.0144, 0.0093, 0.0087, 0.0084, 0.0097, 0.0158, 0.0084, 0.0091, 0.0082, 0.0122, 0.0087, 0.0098, 0.0053, 0.0055, 0.0099, 0.0105, 0.0096, 0.0105, 0.0062, 0.0057, 0.0198, 0.0109, 0.0081, 0.0060, 0.0066, 0.0119, 0.0111, 0.0244, 0.0073, 0.0116, 0.0086, 0.0065, 0.0090, 0.0076, 0.0079, 0.0156, 0.0156, 0.0065, 0.0131, 0.0091, 0.0082, 0.0106, 0.0081, 0.0063, 0.0085, 0.0074, 0.0082, 0.0080, 0.0064, 0.0107, 0.0068, 0.0087, 0.0269, 0.0114, 0.0074, 0.0074, 0.0087, 0.0061, 0.0083, 0.0093, 0.0048, 0.0097, 0.0105, 0.0063, 0.0096, 0.0065, 0.0078, 0.0145, 0.0058, 0.0119, 0.0475, 0.0059, 0.0108, 0.0252, 0.0087, 0.0126, 0.0201, 0.0077, 0.0095, 0.0125, 0.0074, 0.0075, 0.0066, 0.0070, 0.0086, 0.0115, 0.0136, 0.0136, 0.0069, 0.0055, 0.0084, 0.0103, 0.0097, 0.0140, 0.0108, 0.0094, 0.0083, 0.0060, 0.0110, 0.0143, 0.0068, 0.0071, 0.0167, 0.0092, 0.0080, 0.0128, 0.0059, 0.0180, 0.0080, 0.0136, 0.0147, 0.0140, 0.0119, 0.0082, 0.0128, 0.0078, 0.0168, 0.0092, 0.0073, 0.0116, 0.0064, 0.0079, 0.0069, 0.0091, 0.0095, 0.0098, 0.0077], device=&#39;cuda:0&#39;)), (&#39;0.6.1.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.2.conv1.weight&#39;, tensor([[[[ 3.8777e-02, -4.6173e-03, 2.8295e-03], [ 2.0172e-02, 1.8903e-02, -4.7124e-03], [-5.4879e-04, -1.4784e-02, 1.0743e-02]], [[-1.5130e-02, 4.0823e-03, 3.6439e-04], [-4.5789e-03, 9.0400e-03, 6.3227e-03], [-2.3086e-03, 1.7245e-02, -5.1820e-03]], [[ 1.4032e-02, 4.0040e-03, -1.2449e-03], [ 2.3970e-02, 4.6658e-03, -9.1289e-03], [ 9.3090e-03, -7.5088e-03, -1.6723e-02]], ..., [[-4.3259e-03, -1.8397e-03, -6.2876e-03], [ 1.1993e-03, 9.4596e-03, -5.4794e-03], [-2.0445e-02, 6.9183e-03, -8.2601e-03]], [[-1.7431e-02, -7.7771e-03, 1.2651e-03], [ 3.8768e-02, 4.5282e-02, -8.2648e-03], [-9.0703e-03, 2.3412e-02, -1.7650e-02]], [[-2.5285e-02, -1.1649e-02, 1.1804e-02], [-2.2088e-02, -1.4113e-02, 5.4029e-03], [-1.5356e-02, -5.9327e-03, -6.6593e-04]]], [[[ 6.0589e-03, 1.6058e-02, 9.3123e-03], [ 8.8123e-03, 1.7051e-03, -1.2776e-02], [-4.9419e-03, -3.3238e-03, -6.6741e-03]], [[-3.3087e-05, 8.5002e-03, 1.5487e-02], [-5.4799e-03, 9.8581e-03, 4.8207e-03], [-3.3750e-03, 2.5940e-03, -2.5682e-03]], [[-1.5381e-02, -1.6565e-02, -1.3706e-02], [-1.6665e-02, -1.1517e-02, -1.2142e-02], [-1.7026e-02, -1.1839e-02, -1.3081e-02]], ..., [[-1.4452e-03, -9.0065e-03, -1.7287e-03], [-1.1570e-02, -5.2668e-03, -1.8191e-02], [-1.3319e-02, 1.0167e-02, 6.0038e-03]], [[-1.2422e-02, -1.0495e-02, -1.9627e-02], [ 1.6594e-03, 1.3979e-02, -1.6582e-04], [-1.4218e-02, -1.0994e-02, -5.3204e-03]], [[-5.6209e-03, -1.9296e-02, -1.2466e-02], [-3.3496e-03, -1.5105e-02, -1.1254e-02], [ 3.4999e-03, -4.7023e-03, -1.4272e-02]]], [[[ 5.2525e-04, 5.8275e-03, -1.1610e-02], [ 8.8138e-03, -2.9964e-02, -2.4669e-02], [ 3.3892e-03, 4.1037e-03, 7.2179e-03]], [[-1.1622e-02, -1.5987e-02, -2.2070e-02], [-2.4864e-03, 7.7776e-02, 2.1789e-02], [-1.5479e-02, -2.9278e-02, -1.3385e-02]], [[-1.2658e-02, 6.0435e-03, -4.3599e-03], [ 9.5022e-03, 3.3669e-02, 6.3731e-03], [-4.7115e-04, 2.8406e-02, -8.3143e-03]], ..., [[ 5.6389e-03, 9.8830e-04, 1.1304e-02], [ 2.7160e-02, -5.7121e-03, 9.8960e-03], [ 1.3951e-02, 1.1494e-02, 1.4480e-02]], [[-1.0955e-02, -4.7198e-03, -2.5165e-02], [-1.6276e-02, -5.6343e-02, -2.5167e-02], [ 8.9759e-03, 1.0349e-02, 2.5427e-03]], [[ 7.7379e-03, -1.2148e-03, 4.8913e-03], [ 2.3843e-03, -3.8160e-03, 7.1983e-03], [ 1.9035e-03, -1.0139e-02, 8.0657e-03]]], ..., [[[-6.6611e-03, -8.4840e-03, 7.6566e-03], [ 4.6249e-03, 1.1687e-02, 1.8632e-02], [ 8.7564e-03, 3.7504e-03, 1.6595e-02]], [[-7.6348e-03, -6.9196e-03, -2.3419e-04], [-3.4557e-03, -1.3957e-02, -3.7605e-03], [-1.1053e-02, 2.4770e-04, -9.7704e-03]], [[-6.2073e-03, 4.7769e-03, 7.5079e-03], [-2.1631e-03, -1.9518e-03, 1.4227e-02], [ 7.1828e-03, -1.6126e-03, 6.0955e-03]], ..., [[-5.6348e-03, -7.1119e-03, 4.4338e-03], [ 1.9031e-02, -1.0212e-03, -3.6373e-03], [ 8.7920e-03, 3.7338e-03, 2.1797e-03]], [[-3.4458e-03, 4.2826e-03, 2.5126e-02], [-1.5769e-02, -1.7802e-02, -2.3634e-02], [ 2.4794e-02, -1.5303e-02, -1.1863e-02]], [[-1.7383e-03, -1.1796e-02, 2.9311e-03], [ 8.0942e-03, -1.5539e-02, -1.2348e-02], [ 1.3933e-02, -6.7497e-03, -6.9035e-03]]], [[[-1.7288e-02, 1.0394e-02, -7.0651e-03], [-1.3965e-02, -1.4413e-03, 1.4438e-02], [ 2.4615e-02, -9.6474e-03, -3.2553e-02]], [[ 1.2523e-02, -2.1471e-02, 4.6092e-03], [-1.0965e-03, -1.8195e-02, -1.7723e-02], [-1.3303e-02, -4.1162e-03, -3.1542e-03]], [[ 1.7876e-02, -4.4500e-03, -5.6940e-03], [ 1.8830e-02, 4.5121e-03, 5.0264e-03], [ 7.2520e-03, 4.7665e-03, 1.7941e-02]], ..., [[-2.0770e-02, -1.4414e-02, -9.8229e-03], [ 3.6011e-03, 1.2001e-02, 4.7082e-03], [ 3.1407e-03, 1.1669e-02, -1.3041e-02]], [[ 7.5984e-03, -1.6462e-02, -6.8731e-03], [ 5.8399e-04, -1.4279e-02, 1.1707e-02], [-1.6538e-02, -1.4579e-02, 5.3916e-03]], [[ 1.4890e-02, -2.8798e-04, -6.0715e-03], [ 4.2448e-03, 6.2262e-03, -5.5206e-03], [-8.9682e-03, -2.4548e-03, 5.6648e-03]]], [[[ 1.1056e-02, -2.3796e-02, -4.5909e-03], [-2.1275e-02, -3.2578e-02, 5.0356e-03], [-9.4352e-03, -2.5608e-02, -2.1809e-02]], [[-1.0572e-02, 1.5552e-02, 6.0573e-03], [ 1.2981e-02, 8.3562e-04, 1.6828e-02], [-4.7609e-03, -7.6256e-03, 3.3429e-03]], [[ 2.9764e-03, 4.9032e-03, 9.1809e-03], [ 6.3500e-03, 2.5844e-03, 4.0778e-03], [ 1.8565e-02, 4.8365e-03, -1.0470e-06]], ..., [[-2.9846e-03, -1.8990e-02, -2.0508e-03], [ 1.2863e-02, -2.9099e-04, -8.2142e-03], [ 6.1871e-03, -7.9683e-04, -1.5304e-02]], [[-5.7417e-03, -7.6639e-03, 1.2574e-02], [-2.0093e-02, -1.4696e-02, -5.9503e-03], [-1.1295e-02, -2.0052e-02, -4.0082e-03]], [[ 9.9119e-04, -4.1892e-03, -1.6210e-03], [-1.9612e-03, -4.8201e-03, -1.2153e-02], [ 7.1572e-03, 6.6914e-03, -2.9154e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn1.weight&#39;, tensor([0.2358, 0.2307, 0.2658, 0.1875, 0.2178, 0.2267, 0.2076, 0.2259, 0.2412, 0.2386, 0.2227, 0.2060, 0.1981, 0.2165, 0.2146, 0.2198, 0.2572, 0.2019, 0.1991, 0.2268, 0.1652, 0.2049, 0.1884, 0.2144, 0.2224, 0.2325, 0.2432, 0.2701, 0.1962, 0.1934, 0.1936, 0.2571, 0.2338, 0.1688, 0.2294, 0.2326, 0.2141, 0.2918, 0.2813, 0.2742, 0.1229, 0.1637, 0.2160, 0.2256, 0.2104, 0.2151, 0.2145, 0.2338, 0.1827, 0.1765, 0.2249, 0.1978, 0.2557, 0.2233, 0.2186, 0.1955, 0.2650, 0.1932, 0.2402, 0.2447, 0.2201, 0.2165, 0.2355, 0.2026, 0.2419, 0.2546, 0.1875, 0.2178, 0.2472, 0.1935, 0.1896, 0.1835, 0.1849, 0.2626, 0.1951, 0.2061, 0.2743, 0.2249, 0.2027, 0.1919, 0.2799, 0.1989, 0.2215, 0.2749, 0.1969, 0.2604, 0.1352, 0.1816, 0.1711, 0.1948, 0.2465, 0.1853, 0.2073, 0.2582, 0.2132, 0.1990, 0.2352, 0.2047, 0.1906, 0.2160, 0.1858, 0.1712, 0.2891, 0.2210, 0.2411, 0.2184, 0.2833, 0.2475, 0.2043, 0.2225, 0.2583, 0.2015, 0.2411, 0.2394, 0.2248, 0.2190, 0.2329, 0.1805, 0.1640, 0.2045, 0.2092, 0.2336, 0.2249, 0.2243, 0.2136, 0.2206, 0.2133, 0.2004, 0.2070, 0.2194, 0.2511, 0.2318, 0.2148, 0.2290, 0.1829, 0.1961, 0.2620, 0.2151, 0.1999, 0.2282, 0.1823, 0.2039, 0.2427, 0.2415, 0.2626, 0.2450, 0.2276, 0.2439, 0.2450, 0.2818, 0.1505, 0.1705, 0.2603, 0.1909, 0.2116, 0.2406, 0.2034, 0.2142, 0.1923, 0.2606, 0.2315, 0.2368, 0.2476, 0.2485, 0.1897, 0.2490, 0.2196, 0.1755, 0.1929, 0.2027, 0.2313, 0.2237, 0.2096, 0.2851, 0.2111, 0.2107, 0.3128, 0.2112, 0.1741, 0.2199, 0.2446, 0.2143, 0.1857, 0.2090, 0.1824, 0.2275, 0.2400, 0.2027, 0.2068, 0.1963, 0.2375, 0.2677, 0.2137, 0.2472, 0.2060, 0.2107, 0.2033, 0.2171, 0.2253, 0.1886, 0.2305, 0.2312, 0.1943, 0.2074, 0.2109, 0.2249, 0.2345, 0.1837, 0.2200, 0.2337, 0.2392, 0.2485, 0.2343, 0.1987, 0.1981, 0.1938, 0.2409, 0.2380, 0.1622, 0.2185, 0.2431, 0.2296, 0.1870, 0.1889, 0.1987, 0.2340, 0.2973, 0.2566, 0.2286, 0.1940, 0.2165, 0.2955, 0.2112, 0.2115, 0.2494, 0.2202, 0.2126, 0.1795, 0.2161, 0.2497, 0.1865, 0.2021, 0.2194, 0.2238, 0.1713, 0.1885, 0.2334, 0.1951, 0.2083, 0.2205, 0.1969, 0.2047, 0.1950, 0.2073, 0.2142, 0.1997], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn1.bias&#39;, tensor([-0.2476, -0.2523, -0.3204, -0.1652, -0.1807, -0.2362, -0.2461, -0.1859, -0.2676, -0.2232, -0.2352, -0.2377, -0.2067, -0.2077, -0.1555, -0.1430, -0.3947, -0.1774, -0.1173, -0.2658, -0.1291, -0.2800, -0.1530, -0.2120, -0.2427, -0.2118, -0.2873, -0.3524, -0.1733, -0.2473, -0.1711, -0.2727, -0.2140, -0.1055, -0.2104, -0.2690, -0.1302, -0.2994, -0.3819, -0.2724, 0.0290, -0.1722, -0.1466, -0.2055, -0.1451, -0.2386, -0.1869, -0.2554, -0.0776, -0.0894, -0.2102, -0.0623, -0.2195, -0.2068, -0.1746, -0.1788, -0.2813, -0.1362, -0.2308, -0.2411, -0.1817, -0.1361, -0.2925, -0.2170, -0.1938, -0.3514, -0.1616, -0.2287, -0.2936, -0.1869, -0.1546, -0.1452, -0.2014, -0.2476, -0.1703, -0.1697, -0.3249, -0.2338, -0.1740, -0.1319, -0.3162, -0.1503, -0.2013, -0.3248, -0.1712, -0.2434, -0.0286, -0.1475, -0.0901, -0.1733, -0.2328, -0.1419, -0.1901, -0.3454, -0.1914, -0.1649, -0.2815, -0.2323, -0.2318, -0.2343, -0.1313, -0.1254, -0.3174, -0.2281, -0.2107, -0.1678, -0.3308, -0.3173, -0.1665, -0.3371, -0.3486, -0.1542, -0.3732, -0.2965, -0.2153, -0.1761, -0.1933, -0.1825, -0.1962, -0.1464, -0.1626, -0.2491, -0.2852, -0.1965, -0.1862, -0.1547, -0.1813, -0.1896, -0.2089, -0.2193, -0.2640, -0.2455, -0.1830, -0.2016, -0.1311, -0.1086, -0.3624, -0.2439, -0.1946, -0.2764, -0.1002, -0.1630, -0.2112, -0.2557, -0.2441, -0.2771, -0.2460, -0.2706, -0.2890, -0.3084, 0.0071, -0.1614, -0.3291, -0.2144, -0.2715, -0.2447, -0.0906, -0.2372, -0.2840, -0.3007, -0.2388, -0.2581, -0.2707, -0.2412, -0.1721, -0.3439, -0.1923, -0.1353, -0.1887, -0.1883, -0.2763, -0.2526, -0.1913, -0.3301, -0.2080, -0.1613, -0.5750, -0.2165, -0.1290, -0.2302, -0.3220, -0.2278, -0.1975, -0.1768, -0.2671, -0.2231, -0.2624, -0.2041, -0.1930, -0.1578, -0.2571, -0.2899, -0.1524, -0.2852, -0.1517, -0.2381, -0.1679, -0.2539, -0.2347, -0.0825, -0.2146, -0.3027, -0.2047, -0.2606, -0.2013, -0.2017, -0.2508, -0.1196, -0.1633, -0.2038, -0.2513, -0.2432, -0.3279, -0.1420, -0.1867, -0.1882, -0.2371, -0.2642, -0.0270, -0.2301, -0.2443, -0.1934, -0.1415, -0.2031, -0.1848, -0.3443, -0.3668, -0.3750, -0.2475, -0.1174, -0.2090, -0.4201, -0.2003, -0.1742, -0.3837, -0.2547, -0.2449, -0.1418, -0.1979, -0.4111, -0.1824, -0.2068, -0.2252, -0.2374, -0.1651, -0.1988, -0.2411, -0.1208, -0.1728, -0.2889, -0.1754, -0.1700, -0.2139, -0.1721, -0.2889, -0.1914], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn1.running_mean&#39;, tensor([-0.5945, -0.4434, -0.4636, -0.3527, -0.7676, -0.1077, -0.0226, -0.5468, -0.3764, -0.6014, -0.5087, -0.0306, 1.0162, 0.1856, -0.7124, -0.3782, -0.5603, -0.3277, -0.2643, -0.2567, -0.1735, 0.1880, -0.3132, -0.7119, -0.4880, -0.5431, -0.4094, -0.2812, -0.4059, -0.1553, -0.2437, -0.5599, -0.7975, -0.6064, -0.4248, -0.5618, -0.6464, -0.8185, -0.3577, -0.4708, 0.0885, -0.5141, -0.6012, -1.0389, -0.4788, -0.4399, -0.3540, -0.5883, -0.1052, -0.3118, -0.6555, -0.2656, -0.8027, -0.3205, -0.4530, -0.5675, -0.0737, -0.2330, -0.9787, -0.6451, -0.4283, -0.3845, -0.4604, -0.2095, -0.5906, -0.6698, -0.3325, -0.4422, -0.3944, -0.1999, -0.3470, -0.3407, -0.1393, -0.8382, -0.4070, 0.1074, -0.2347, -0.5312, -0.2938, -0.2684, -0.7486, -0.5107, -0.9409, -0.5010, -0.3137, -0.8493, -0.2473, -0.0577, -0.2584, -0.2582, -0.3952, -0.4102, -0.5483, -0.6819, -0.3936, -0.5771, -0.3950, -0.4036, -0.4056, -0.2082, -0.5296, 0.0154, -0.4953, -0.7554, -0.5754, -0.6017, -0.6749, -0.8605, -1.1723, -0.0710, -0.8906, -0.0190, -0.6410, -0.2619, -0.2899, -0.4276, -0.4980, -0.3342, -0.0371, -0.4116, -0.2025, -0.3666, -0.4536, -0.3278, -0.0950, -0.3884, -0.4417, -0.4006, 0.0153, -0.4379, -0.7051, -0.0764, -0.3743, -0.4976, -0.1395, 0.0075, -0.7626, -0.3319, -0.1544, -0.2711, -0.0888, -0.3831, -1.0102, -0.7051, -0.4059, -0.4501, -0.2483, -0.2148, -0.3331, -0.8053, 0.3791, -0.3504, -0.3607, -0.3395, -0.6696, -0.5264, -0.1661, -0.2616, -0.1561, -0.5700, -0.6649, -0.7649, -0.4968, -1.1245, -0.0741, -0.6324, -0.4118, -0.2154, -0.5454, -0.6578, -0.5308, -0.5040, -0.4462, -0.6818, -0.3672, -0.2131, -0.8583, -0.3123, 0.4473, -0.4385, -0.3586, -1.0526, -0.3623, -0.3973, 0.1687, -0.3398, -0.3836, -0.3413, -0.5289, -0.7213, -0.5917, -0.7147, -0.4339, -0.6719, -0.5412, -0.4299, -0.2724, -0.7398, 0.1252, 0.1036, -0.3661, -0.2838, -0.3603, 0.0654, -0.2663, -0.2890, -0.4383, -0.5177, -0.4428, -0.2989, -0.8015, -0.4952, -0.3633, -0.5805, -0.3433, -0.0663, -0.4092, -0.6697, -0.2328, -0.1214, -0.5210, -0.1864, -0.2341, -0.1968, -0.2877, -0.4307, -0.7359, -0.6779, 0.1235, -0.3640, -0.3132, -0.7963, -0.5045, -0.3547, -0.7251, -0.0998, -0.2935, -0.4112, -0.2266, 0.0052, 0.0128, -0.0665, -0.6672, -0.4897, -0.2244, -0.1770, -0.7958, -0.3207, -0.1753, -0.0627, -0.2133, -0.3028, -0.2757, -0.8365, -0.5219, 0.0944], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn1.running_var&#39;, tensor([0.1193, 0.1974, 0.1229, 0.1167, 0.1451, 0.1674, 0.1147, 0.1410, 0.1157, 0.1755, 0.1031, 0.0894, 0.1117, 0.1782, 0.1935, 0.1827, 0.0922, 0.1475, 0.1846, 0.1789, 0.0935, 0.1593, 0.1457, 0.1597, 0.1072, 0.1233, 0.1521, 0.1412, 0.1997, 0.1386, 0.1078, 0.1298, 0.1276, 0.1405, 0.1406, 0.1198, 0.1657, 0.1733, 0.1248, 0.2728, 0.1901, 0.1119, 0.2407, 0.1256, 0.2069, 0.1028, 0.2042, 0.1404, 0.2443, 0.2133, 0.1302, 0.2514, 0.1842, 0.1550, 0.1728, 0.0952, 0.2605, 0.1057, 0.1518, 0.1510, 0.1954, 0.2419, 0.1361, 0.0978, 0.2435, 0.1401, 0.1584, 0.1311, 0.1180, 0.1224, 0.2235, 0.1196, 0.1078, 0.1576, 0.1035, 0.1432, 0.1252, 0.1625, 0.1016, 0.1615, 0.1885, 0.1474, 0.1843, 0.1455, 0.1289, 0.2217, 0.1923, 0.1522, 0.1880, 0.1149, 0.1707, 0.1085, 0.1456, 0.1173, 0.1600, 0.1490, 0.1361, 0.1102, 0.1012, 0.1454, 0.1805, 0.1980, 0.2298, 0.0854, 0.1556, 0.2028, 0.1525, 0.1279, 0.0957, 0.0805, 0.1594, 0.1283, 0.0676, 0.1182, 0.2364, 0.2459, 0.1532, 0.1546, 0.0934, 0.1959, 0.2273, 0.1565, 0.1018, 0.1288, 0.1877, 0.3710, 0.2270, 0.2459, 0.1114, 0.1298, 0.1132, 0.1528, 0.1525, 0.1849, 0.2180, 0.1779, 0.0840, 0.1448, 0.1430, 0.1079, 0.1881, 0.1314, 0.2220, 0.1283, 0.1782, 0.1577, 0.1682, 0.1603, 0.0995, 0.1787, 0.2415, 0.1102, 0.1347, 0.0954, 0.1073, 0.1102, 0.1712, 0.1062, 0.1156, 0.1207, 0.1659, 0.1375, 0.1567, 0.1360, 0.1253, 0.1227, 0.1326, 0.2291, 0.1477, 0.1109, 0.1525, 0.1240, 0.1547, 0.1338, 0.1181, 0.1397, 0.1066, 0.1163, 0.1519, 0.1515, 0.1188, 0.1522, 0.1062, 0.1292, 0.0917, 0.1554, 0.1493, 0.1337, 0.1409, 0.1330, 0.1757, 0.1480, 0.2341, 0.1661, 0.1717, 0.0974, 0.1776, 0.1416, 0.1449, 0.2040, 0.1452, 0.1099, 0.1086, 0.1525, 0.1366, 0.1881, 0.1267, 0.1966, 0.1310, 0.1700, 0.1284, 0.1831, 0.0776, 0.1140, 0.1252, 0.1165, 0.1405, 0.1117, 0.2188, 0.1063, 0.1453, 0.1545, 0.1307, 0.1103, 0.1357, 0.0804, 0.1468, 0.1229, 0.1540, 0.1975, 0.1903, 0.1364, 0.1169, 0.2291, 0.0957, 0.0901, 0.1211, 0.1509, 0.1713, 0.0831, 0.0819, 0.1271, 0.1500, 0.1498, 0.1218, 0.0927, 0.1406, 0.1585, 0.1620, 0.1357, 0.1676, 0.1613, 0.0823, 0.1366, 0.1213, 0.1711], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.2.conv2.weight&#39;, tensor([[[[-0.0093, -0.0238, 0.0117], [ 0.0214, -0.0236, -0.0388], [ 0.0251, 0.0016, -0.0146]], [[-0.0053, -0.0089, 0.0087], [ 0.0025, -0.0052, -0.0145], [ 0.0268, 0.0095, -0.0011]], [[-0.0100, -0.0112, -0.0095], [ 0.0035, 0.0005, -0.0034], [ 0.0126, -0.0141, 0.0120]], ..., [[-0.0063, -0.0100, -0.0193], [-0.0049, -0.0172, -0.0035], [-0.0005, -0.0064, 0.0032]], [[-0.0045, -0.0012, 0.0122], [-0.0155, -0.0235, -0.0045], [-0.0029, -0.0158, -0.0189]], [[ 0.0129, 0.0005, 0.0097], [-0.0018, 0.0136, 0.0006], [ 0.0213, 0.0336, -0.0187]]], [[[-0.0012, -0.0164, 0.0090], [ 0.0011, 0.0048, 0.0455], [ 0.0017, -0.0012, 0.0030]], [[-0.0025, -0.0015, 0.0067], [-0.0212, -0.0216, -0.0112], [-0.0177, -0.0227, -0.0174]], [[ 0.0211, 0.0210, -0.0082], [ 0.0265, 0.0073, 0.0112], [ 0.0227, 0.0330, 0.0058]], ..., [[-0.0024, 0.0093, -0.0039], [ 0.0022, 0.0004, 0.0161], [ 0.0189, 0.0006, 0.0071]], [[-0.0217, -0.0210, -0.0124], [ 0.0212, -0.0023, -0.0056], [ 0.0208, 0.0038, -0.0028]], [[ 0.0210, 0.0073, 0.0019], [ 0.0125, 0.0004, 0.0121], [-0.0225, -0.0093, -0.0056]]], [[[-0.0102, -0.0216, -0.0131], [-0.0216, -0.0221, -0.0027], [-0.0021, -0.0061, 0.0064]], [[-0.0138, -0.0094, -0.0043], [ 0.0031, 0.0020, 0.0053], [ 0.0079, -0.0058, 0.0007]], [[ 0.0092, 0.0189, 0.0090], [ 0.0019, 0.0034, 0.0032], [-0.0053, -0.0039, 0.0048]], ..., [[ 0.0008, 0.0057, 0.0076], [ 0.0016, -0.0003, -0.0079], [ 0.0149, 0.0085, -0.0014]], [[ 0.0148, 0.0098, 0.0052], [ 0.0033, 0.0045, -0.0069], [-0.0037, -0.0086, -0.0158]], [[ 0.0006, -0.0094, -0.0034], [ 0.0011, -0.0098, -0.0039], [-0.0092, -0.0207, 0.0045]]], ..., [[[-0.0078, -0.0127, -0.0301], [-0.0039, -0.0021, -0.0081], [ 0.0083, -0.0069, 0.0005]], [[-0.0101, -0.0216, -0.0283], [-0.0130, -0.0128, -0.0210], [-0.0107, -0.0069, -0.0068]], [[-0.0116, -0.0137, -0.0009], [-0.0018, 0.0038, -0.0058], [ 0.0030, -0.0031, 0.0022]], ..., [[-0.0036, -0.0101, 0.0012], [-0.0034, -0.0088, -0.0104], [-0.0114, -0.0051, -0.0098]], [[-0.0023, -0.0072, 0.0085], [ 0.0123, -0.0087, -0.0007], [ 0.0040, 0.0071, 0.0011]], [[-0.0014, -0.0087, 0.0108], [-0.0034, -0.0120, 0.0099], [ 0.0066, 0.0081, 0.0107]]], [[[ 0.0013, 0.0098, -0.0033], [ 0.0164, 0.0306, -0.0053], [ 0.0068, 0.0030, -0.0021]], [[-0.0220, -0.0564, -0.0169], [-0.0487, -0.0814, -0.0368], [-0.0053, -0.0344, -0.0008]], [[-0.0040, -0.0172, -0.0105], [-0.0224, -0.0378, -0.0126], [-0.0222, -0.0190, -0.0136]], ..., [[-0.0046, 0.0203, 0.0147], [ 0.0051, 0.0262, 0.0168], [ 0.0156, 0.0075, 0.0049]], [[ 0.0085, -0.0053, -0.0168], [ 0.0208, -0.0018, -0.0088], [ 0.0383, 0.0145, -0.0106]], [[-0.0117, 0.0110, -0.0082], [-0.0068, 0.0067, -0.0246], [ 0.0079, 0.0056, -0.0057]]], [[[-0.0084, -0.0203, -0.0090], [-0.0059, -0.0175, -0.0135], [ 0.0096, -0.0032, -0.0054]], [[ 0.0089, -0.0039, -0.0005], [-0.0047, -0.0220, -0.0236], [-0.0052, -0.0237, -0.0221]], [[-0.0027, 0.0065, 0.0046], [ 0.0070, 0.0007, 0.0132], [ 0.0052, 0.0091, 0.0121]], ..., [[ 0.0069, 0.0063, 0.0009], [-0.0007, 0.0047, 0.0067], [-0.0053, 0.0048, 0.0021]], [[ 0.0169, 0.0149, 0.0035], [ 0.0073, -0.0005, 0.0023], [ 0.0011, -0.0054, -0.0128]], [[-0.0099, -0.0183, -0.0014], [-0.0136, -0.0211, 0.0035], [-0.0148, -0.0043, 0.0079]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn2.weight&#39;, tensor([0.3047, 0.1830, 0.1445, 0.0584, 0.2603, 0.0794, 0.1919, 0.0505, 0.1079, 0.0686, 0.1917, 0.0689, 0.1800, 0.0451, 0.1189, 0.1026, 0.1504, 0.0702, 0.0632, 0.1139, 0.0956, 0.1609, 0.2650, 0.0977, 0.1639, 0.1184, 0.1849, 0.1157, 0.0588, 0.0772, 0.2100, 0.1407, 0.2084, 0.0701, 0.1871, 0.1000, 0.1533, 0.1590, 0.0596, 0.0876, 0.0763, 0.2804, 0.0500, 0.1295, 0.1644, 0.1699, 0.1161, 0.2210, 0.0308, 0.0741, 0.1104, 0.1076, 0.2406, 0.0952, 0.2192, 0.0456, 0.1483, 0.1168, 0.2337, 0.2189, 0.2593, 0.1037, 0.2777, 0.1060, 0.1675, 0.2525, 0.1544, 0.0941, 0.1959, 0.1980, 0.1945, 0.0789, 0.1075, 0.0893, 0.1185, 0.2024, 0.1616, 0.0981, 0.1071, 0.2961, 0.2085, 0.3172, 0.1907, 0.1250, 0.1178, 0.1052, 0.0895, 0.3054, 0.1745, 0.1387, 0.1883, 0.0694, 0.0493, 0.0820, 0.1096, 0.1932, 0.1077, 0.2287, 0.0890, 0.0944, 0.1097, 0.1848, 0.2486, 0.1522, 0.2497, 0.3240, 0.1524, 0.1168, 0.1491, 0.1746, 0.1945, 0.0713, 0.2122, 0.1933, 0.1081, 0.1572, 0.0457, 0.1176, 0.1166, 0.1352, 0.0567, 0.2031, 0.0507, 0.1931, 0.0844, 0.0659, 0.3874, 0.1028, 0.1005, 0.0931, 0.1509, 0.1010, 0.2429, 0.1377, 0.2154, 0.2013, 0.0896, 0.2331, 0.0766, 0.1241, 0.1721, 0.1482, 0.1942, 0.0500, 0.3099, 0.1882, 0.1373, 0.0819, 0.1753, 0.1682, 0.1811, 0.3409, 0.0943, 0.0747, 0.2310, 0.2211, 0.2258, 0.0989, 0.2182, 0.2441, 0.2338, 0.3079, 0.3461, 0.1173, 0.2151, 0.3914, 0.2430, 0.1304, 0.2141, 0.2495, 0.2130, 0.1469, 0.1749, 0.1720, 0.3221, 0.1691, 0.1943, 0.0838, 0.1447, 0.1516, 0.2255, 0.2945, 0.2585, 0.2007, 0.1490, 0.1485, 0.2071, 0.2908, 0.1378, 0.1045, 0.0679, 0.0888, 0.0828, 0.0878, 0.0815, 0.2123, 0.3993, 0.1369, 0.1692, 0.2859, 0.2666, 0.1045, 0.1774, 0.1208, 0.0740, 0.0503, 0.1401, 0.2729, 0.1739, 0.2596, 0.1090, 0.1211, 0.1128, 0.0812, 0.2663, 0.3158, 0.3004, 0.1240, 0.1069, 0.0663, 0.1978, 0.2542, 0.0775, 0.3665, 0.2105, 0.1266, 0.1195, 0.1550, 0.1722, 0.1796, 0.1264, 0.2483, 0.0706, 0.1333, 0.2572, 0.0536, 0.0676, 0.0767, 0.1750, 0.0493, 0.1637, 0.2064, 0.1183, 0.2036, 0.2970, 0.2484, 0.1316, 0.1663, 0.0436, 0.1172, 0.1410, 0.3335, 0.0666, 0.0900, 0.0992, 0.0736], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn2.bias&#39;, tensor([-1.6169e-01, -1.5884e-01, -1.3453e-02, 1.7656e-05, -1.3784e-01, -4.7654e-02, -2.0714e-01, -6.1787e-02, -9.0895e-03, -3.5967e-02, -1.4328e-01, -1.1323e-02, -9.2371e-02, -2.8720e-02, -5.7845e-02, -6.5336e-02, -9.8429e-02, -1.3279e-02, -2.4914e-02, -4.9348e-02, -2.3384e-02, -1.0367e-01, -1.6025e-02, -1.5761e-02, -3.5065e-02, -6.4310e-02, 8.4245e-02, -5.7118e-02, -3.5749e-04, -4.2621e-02, -7.5901e-02, -5.5383e-02, -1.6088e-01, -4.5028e-02, -8.2526e-02, -1.0396e-01, 4.8260e-02, -5.5817e-02, 5.3293e-02, -7.9510e-02, -1.0647e-02, -3.0815e-02, -2.0223e-02, 1.4550e-02, -4.9684e-02, 1.1325e-02, -5.4589e-02, -1.2651e-01, 9.7106e-03, -2.6756e-02, 2.7738e-02, -6.8327e-02, -1.0117e-01, -2.2305e-02, -9.3119e-02, -1.7961e-02, -2.9470e-02, -8.6083e-02, -4.9133e-02, -1.1254e-01, 7.8867e-02, -6.5572e-02, -1.5320e-01, -9.2169e-02, -1.7757e-01, 5.1912e-02, -1.0221e-01, -1.8939e-02, -1.0022e-01, -1.0480e-01, -1.6339e-01, -3.2817e-02, 2.1213e-02, -7.3799e-02, -3.1431e-02, -1.1256e-01, -5.8695e-02, -5.6365e-02, 1.7187e-02, -2.5831e-01, -5.3636e-02, -2.3137e-01, -1.3077e-01, -9.4406e-02, 9.4277e-02, -1.7157e-02, 7.1645e-03, -1.4359e-01, 9.3759e-04, -6.0252e-02, -9.1764e-02, -3.0928e-02, -4.8374e-03, -1.5933e-02, -4.1813e-02, -5.2910e-02, -3.3880e-02, -8.4312e-02, -3.5281e-03, -7.0357e-02, -5.1364e-02, -7.0646e-02, -6.2448e-02, -6.9479e-02, -1.6015e-01, -1.1621e-01, 1.2182e-03, -4.9679e-02, -5.7211e-02, -9.4845e-02, -1.4205e-01, 1.1267e-02, -3.4153e-02, -1.2359e-01, -7.3576e-03, -3.6024e-02, 9.5025e-03, -3.9644e-02, -7.8760e-02, -5.2822e-02, -9.2625e-03, 2.2217e-02, 1.8572e-03, -1.0925e-01, -3.0842e-02, 9.3452e-03, -1.7750e-01, -7.0363e-02, -6.5204e-02, 7.1293e-02, -1.1343e-01, -1.9812e-02, -1.1695e-01, -4.2478e-02, -1.2754e-01, -8.8289e-02, -5.1097e-02, -1.9552e-01, -4.9000e-02, -4.9191e-02, -3.3876e-02, -1.1623e-01, -6.3374e-02, 8.7012e-03, -3.3181e-02, 6.6429e-02, 7.9355e-02, -4.3617e-02, -1.0450e-01, -5.7503e-03, -5.2510e-02, -2.7516e-01, -3.1048e-02, -3.2356e-02, -1.4597e-01, -1.1348e-01, -1.0875e-01, -4.2761e-02, -9.2942e-02, -1.9036e-01, -1.7621e-01, -1.3679e-01, -2.9012e-01, -6.0362e-02, 9.3313e-02, -3.2115e-02, -1.5533e-01, -3.4401e-02, -3.3961e-02, -5.7552e-03, -9.8973e-02, -6.0340e-02, 4.7435e-03, -1.4893e-01, -1.0732e-01, 4.6902e-02, -1.4634e-01, -2.1859e-02, -2.6106e-03, -6.3419e-02, 8.2411e-03, 9.5265e-03, -2.3616e-01, -1.1284e-01, -1.0391e-01, -1.0744e-01, -8.3007e-02, -3.3010e-01, -7.4491e-02, -3.1371e-02, -4.5666e-02, -6.0170e-03, -2.7795e-02, -4.4775e-02, 4.8200e-03, -9.4426e-02, -2.3162e-01, 4.3549e-02, -1.3025e-01, -2.2436e-01, -1.9313e-01, -4.9408e-02, -8.1329e-02, -3.8240e-02, -3.4807e-02, -1.4861e-02, -3.1931e-02, 1.5228e-02, 9.5373e-02, -1.1156e-01, -6.0322e-02, -1.8746e-02, -9.0041e-02, 7.8773e-02, -2.9154e-01, -1.8066e-01, -4.4346e-02, -7.1312e-02, -3.9251e-02, -1.7858e-02, -1.2780e-02, -1.3003e-01, -2.6365e-02, -9.9649e-02, -2.1347e-03, -1.1784e-01, -4.2638e-02, -8.0659e-03, -4.0502e-02, -1.9390e-02, -8.0916e-02, -1.2145e-02, 1.4471e-02, -9.8761e-03, -1.1387e-01, 1.4596e-02, 7.2607e-02, -5.5514e-02, -4.3635e-02, 9.8310e-04, -7.7209e-02, -1.5230e-01, -1.9317e-02, -5.3317e-02, -2.2122e-01, -6.4822e-02, -7.9835e-02, -6.3832e-02, 4.2992e-02, -6.4724e-02, -2.0433e-03, -9.5214e-02, -5.0348e-03, -2.7649e-02, -7.4768e-02, 3.5943e-02], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn2.running_mean&#39;, tensor([-2.1404e-02, -3.5564e-02, -7.5271e-02, -5.2013e-02, -2.4072e-02, -2.2637e-02, -4.6430e-02, -3.4559e-02, -3.1779e-02, -3.6412e-02, -1.9715e-02, 6.0650e-03, -6.0391e-02, -1.8420e-02, -1.1598e-02, -3.7433e-02, -1.4516e-02, 3.6908e-02, 1.0673e-02, -5.8141e-02, 4.7105e-02, -8.2821e-02, -5.2028e-02, 4.8600e-02, -6.1861e-02, -4.5864e-02, 2.5051e-01, -4.7338e-02, -2.5444e-02, -1.3473e-02, -3.0201e-02, -6.0361e-02, -8.5118e-02, 2.7207e-03, -1.0657e-02, -1.6689e-02, -6.9844e-02, -1.0235e-01, -2.4928e-02, -1.4422e-02, -1.6639e-02, -1.8110e-02, 5.2565e-03, -3.6226e-03, -4.2023e-02, -4.5941e-04, -8.2013e-02, -6.0403e-02, 7.2023e-03, -4.2728e-02, -2.4989e-02, 3.2455e-02, -4.4629e-02, -3.6265e-02, -7.4980e-02, 4.1270e-03, -4.5713e-02, -8.1721e-02, -5.8820e-02, -1.1791e-01, -4.8752e-02, -5.3331e-02, -5.9544e-02, -1.6626e-02, -6.6348e-02, -1.1305e-01, -1.0492e-02, 5.6029e-02, -5.2038e-02, -5.0626e-02, -8.7559e-02, -6.6213e-02, -2.4799e-02, -3.0483e-03, -5.9669e-02, -7.8779e-02, -7.2778e-02, -1.9580e-02, 1.1276e-02, -1.8807e-01, 4.7615e-02, -3.9677e-02, -1.7020e-02, -2.8273e-02, -3.9027e-02, -4.2988e-02, 2.6468e-04, -1.0867e-01, 6.7003e-02, -6.8243e-02, 2.1832e-03, -5.3731e-03, -3.2869e-02, -4.8513e-02, -2.8675e-02, -5.6116e-02, -7.1939e-02, -2.7138e-02, 2.5796e-02, -1.0874e-02, -2.3074e-02, -2.0798e-02, -5.5749e-02, -5.5183e-02, -9.4276e-02, -8.1538e-02, -3.3103e-02, -1.0582e-02, -6.4382e-02, -5.9055e-02, -6.3358e-02, -2.9918e-02, -8.1048e-02, -6.3474e-02, 3.8888e-02, -2.0553e-02, 8.4127e-03, -1.6430e-02, -6.8508e-03, -4.5551e-02, 1.4648e-02, -7.7487e-02, -6.8285e-03, 7.1367e-03, -9.8268e-03, -4.3776e-02, -2.4730e-02, -2.6723e-02, -4.2785e-02, 1.4448e-02, -9.0724e-02, -2.8538e-02, -6.6558e-02, -7.8659e-02, -7.6814e-02, -1.7260e-02, -1.6301e-02, -6.9201e-02, -5.3649e-02, -8.1592e-02, -2.0628e-02, -2.5080e-02, -1.7153e-02, 6.6358e-03, -9.6542e-02, -3.2882e-02, -1.4032e-02, -4.6767e-02, 1.0413e-02, -2.8923e-02, 2.6392e-02, -2.4720e-03, -3.1733e-02, -4.3286e-02, -5.4288e-02, -4.4328e-02, -1.7754e-01, -2.9902e-02, -1.2519e-02, -6.6123e-02, -3.5109e-02, -6.9440e-02, -2.1091e-03, -2.1458e-02, 5.3016e-02, -5.1377e-02, -3.0021e-02, -5.0865e-02, -3.6942e-02, 4.0382e-03, -4.4410e-02, -1.5043e-02, -6.1275e-03, -6.9697e-02, -5.0766e-02, -1.5858e-02, -6.5755e-02, -2.0715e-02, -8.5926e-02, -2.2386e-02, -9.5148e-02, -3.9169e-02, -7.8137e-02, -2.6499e-02, -6.2142e-02, -9.8670e-03, -6.7691e-02, -2.8293e-02, 1.2892e-02, -2.4903e-02, -1.5109e-02, -9.3560e-03, 2.2323e-02, -4.0666e-02, -3.2608e-02, -7.0046e-02, -7.2954e-02, -4.2870e-02, -5.2131e-02, -2.0109e-01, -3.8646e-02, -3.4915e-02, -1.5450e-01, -4.4983e-02, -2.9600e-02, 9.1915e-03, 1.8437e-03, -8.5939e-02, 1.0487e-01, -1.0529e-01, -1.6018e-02, -7.8238e-03, -3.5651e-02, -4.1763e-02, -9.5269e-02, -1.0084e-01, -1.0342e-01, -3.1258e-02, -2.4322e-02, -1.3400e-04, -1.9070e-02, -7.0026e-02, 2.9956e-02, -5.9705e-02, -1.4717e-02, -4.2838e-02, -1.4556e-02, -2.1654e-03, 6.0539e-03, -1.6299e-02, -4.2880e-02, -1.7388e-01, -2.1183e-02, -2.8078e-02, -6.8141e-02, -2.1965e-02, -1.5698e-02, -3.3678e-02, -2.7098e-02, -4.7218e-03, -2.0990e-03, 1.2553e-01, 2.2735e-03, -2.1223e-02, -4.7462e-02, 7.6888e-04, -2.8733e-02, -6.2518e-03, 2.8572e-02, -4.8523e-02, 1.5849e-02, -7.0817e-02, 1.0215e-02, -1.7506e-02, -1.0226e-02, 4.2533e-03], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn2.running_var&#39;, tensor([0.0073, 0.0030, 0.0052, 0.0028, 0.0046, 0.0026, 0.0054, 0.0029, 0.0036, 0.0024, 0.0031, 0.0022, 0.0036, 0.0013, 0.0027, 0.0015, 0.0032, 0.0031, 0.0012, 0.0030, 0.0034, 0.0055, 0.0066, 0.0039, 0.0036, 0.0064, 0.0085, 0.0027, 0.0038, 0.0017, 0.0052, 0.0038, 0.0046, 0.0016, 0.0047, 0.0055, 0.0057, 0.0050, 0.0038, 0.0013, 0.0025, 0.0087, 0.0034, 0.0052, 0.0038, 0.0047, 0.0027, 0.0041, 0.0017, 0.0020, 0.0037, 0.0023, 0.0053, 0.0029, 0.0062, 0.0021, 0.0035, 0.0036, 0.0076, 0.0059, 0.0116, 0.0036, 0.0055, 0.0017, 0.0033, 0.0076, 0.0040, 0.0025, 0.0050, 0.0054, 0.0081, 0.0039, 0.0039, 0.0014, 0.0027, 0.0051, 0.0043, 0.0038, 0.0051, 0.0101, 0.0051, 0.0045, 0.0041, 0.0029, 0.0060, 0.0028, 0.0018, 0.0061, 0.0049, 0.0037, 0.0055, 0.0021, 0.0015, 0.0028, 0.0033, 0.0047, 0.0032, 0.0066, 0.0036, 0.0044, 0.0030, 0.0034, 0.0058, 0.0036, 0.0063, 0.0090, 0.0044, 0.0034, 0.0057, 0.0039, 0.0033, 0.0031, 0.0054, 0.0044, 0.0034, 0.0043, 0.0026, 0.0022, 0.0020, 0.0048, 0.0012, 0.0075, 0.0016, 0.0038, 0.0020, 0.0027, 0.0087, 0.0029, 0.0022, 0.0046, 0.0054, 0.0022, 0.0048, 0.0066, 0.0062, 0.0048, 0.0032, 0.0045, 0.0053, 0.0033, 0.0067, 0.0042, 0.0046, 0.0025, 0.0110, 0.0048, 0.0062, 0.0020, 0.0040, 0.0057, 0.0062, 0.0091, 0.0030, 0.0020, 0.0083, 0.0075, 0.0076, 0.0033, 0.0052, 0.0037, 0.0038, 0.0047, 0.0050, 0.0032, 0.0091, 0.0135, 0.0036, 0.0034, 0.0057, 0.0140, 0.0046, 0.0053, 0.0059, 0.0040, 0.0063, 0.0068, 0.0039, 0.0023, 0.0054, 0.0039, 0.0068, 0.0096, 0.0047, 0.0046, 0.0042, 0.0049, 0.0039, 0.0031, 0.0033, 0.0029, 0.0016, 0.0034, 0.0023, 0.0022, 0.0035, 0.0044, 0.0116, 0.0051, 0.0049, 0.0107, 0.0036, 0.0067, 0.0071, 0.0045, 0.0052, 0.0024, 0.0034, 0.0076, 0.0163, 0.0050, 0.0021, 0.0031, 0.0028, 0.0042, 0.0059, 0.0074, 0.0102, 0.0027, 0.0029, 0.0022, 0.0052, 0.0041, 0.0053, 0.0096, 0.0050, 0.0034, 0.0038, 0.0057, 0.0085, 0.0049, 0.0030, 0.0077, 0.0021, 0.0059, 0.0049, 0.0020, 0.0040, 0.0012, 0.0050, 0.0022, 0.0068, 0.0055, 0.0035, 0.0062, 0.0049, 0.0106, 0.0037, 0.0038, 0.0030, 0.0038, 0.0062, 0.0063, 0.0025, 0.0018, 0.0027, 0.0061], device=&#39;cuda:0&#39;)), (&#39;0.6.2.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.3.conv1.weight&#39;, tensor([[[[-0.0366, -0.0017, 0.0361], [-0.0179, -0.0121, 0.0247], [ 0.0064, 0.0025, -0.0087]], [[ 0.0101, 0.0246, 0.0152], [-0.0043, 0.0104, 0.0067], [ 0.0028, -0.0104, -0.0149]], [[ 0.0107, 0.0125, 0.0072], [-0.0075, -0.0020, -0.0034], [-0.0206, -0.0122, -0.0147]], ..., [[-0.0007, 0.0004, 0.0004], [ 0.0080, -0.0163, 0.0135], [ 0.0225, -0.0077, 0.0099]], [[ 0.0088, -0.0003, -0.0076], [-0.0229, -0.0211, 0.0221], [-0.0107, -0.0039, 0.0191]], [[ 0.0169, -0.0081, -0.0122], [ 0.0050, -0.0121, -0.0108], [ 0.0080, 0.0025, 0.0043]]], [[[-0.0106, -0.0274, -0.0170], [ 0.0223, -0.0052, -0.0177], [ 0.0091, 0.0327, 0.0231]], [[-0.0137, -0.0092, -0.0122], [-0.0127, -0.0188, -0.0072], [-0.0059, -0.0097, -0.0077]], [[ 0.0093, 0.0266, 0.0304], [-0.0001, 0.0045, 0.0071], [ 0.0012, -0.0120, -0.0012]], ..., [[ 0.0055, -0.0116, -0.0129], [ 0.0030, -0.0137, 0.0038], [ 0.0039, -0.0149, -0.0073]], [[-0.0150, 0.0119, 0.0001], [-0.0138, -0.0057, -0.0003], [-0.0022, -0.0179, -0.0015]], [[ 0.0070, 0.0192, 0.0071], [-0.0036, 0.0124, -0.0098], [-0.0112, -0.0061, -0.0212]]], [[[ 0.0009, -0.0091, -0.0144], [ 0.0169, -0.0006, -0.0093], [-0.0011, -0.0021, 0.0021]], [[ 0.0159, 0.0052, -0.0124], [ 0.0280, 0.0055, -0.0131], [ 0.0164, 0.0041, -0.0018]], [[-0.0003, 0.0168, 0.0030], [-0.0072, 0.0146, -0.0003], [-0.0130, -0.0028, -0.0120]], ..., [[ 0.0020, -0.0036, 0.0058], [ 0.0159, 0.0009, 0.0027], [ 0.0172, -0.0020, -0.0086]], [[-0.0112, -0.0237, -0.0026], [-0.0097, -0.0183, 0.0096], [-0.0133, 0.0011, -0.0008]], [[-0.0111, -0.0081, -0.0199], [-0.0116, 0.0029, -0.0061], [-0.0116, -0.0012, -0.0046]]], ..., [[[-0.0172, -0.0573, -0.0358], [ 0.0323, 0.0357, -0.0412], [ 0.0137, 0.0694, 0.0439]], [[-0.0018, -0.0013, 0.0134], [-0.0091, -0.0138, -0.0027], [-0.0102, 0.0007, -0.0010]], [[ 0.0249, 0.0424, 0.0507], [-0.0072, 0.0132, 0.0360], [-0.0296, -0.0189, 0.0186]], ..., [[ 0.0094, -0.0045, -0.0137], [-0.0047, -0.0042, -0.0012], [-0.0050, 0.0046, -0.0051]], [[ 0.0004, -0.0044, -0.0018], [ 0.0094, -0.0130, -0.0127], [ 0.0344, 0.0503, -0.0209]], [[ 0.0008, 0.0027, -0.0123], [ 0.0067, 0.0108, 0.0004], [ 0.0074, 0.0239, 0.0101]]], [[[ 0.0083, -0.0117, 0.0067], [-0.0127, -0.0206, 0.0017], [ 0.0241, 0.0169, 0.0081]], [[ 0.0039, 0.0064, 0.0074], [-0.0082, -0.0036, -0.0021], [ 0.0085, 0.0149, 0.0050]], [[ 0.0113, 0.0127, 0.0052], [-0.0187, -0.0049, -0.0031], [-0.0175, 0.0031, 0.0072]], ..., [[-0.0048, 0.0023, -0.0113], [-0.0179, 0.0083, -0.0063], [ 0.0108, 0.0044, 0.0106]], [[-0.0152, 0.0020, 0.0009], [ 0.0092, 0.0115, 0.0023], [ 0.0029, 0.0052, 0.0100]], [[-0.0069, -0.0038, 0.0008], [ 0.0006, 0.0085, 0.0076], [-0.0110, -0.0084, -0.0035]]], [[[-0.0299, -0.0375, -0.0557], [-0.0003, -0.0029, -0.0293], [ 0.0224, 0.0123, 0.0028]], [[-0.0052, 0.0083, 0.0125], [-0.0083, 0.0316, -0.0114], [-0.0184, 0.0022, -0.0304]], [[ 0.0082, -0.0140, -0.0041], [ 0.0100, -0.0007, 0.0059], [ 0.0090, 0.0183, 0.0098]], ..., [[ 0.0153, 0.0111, -0.0100], [ 0.0244, -0.0017, 0.0077], [ 0.0171, 0.0055, -0.0011]], [[ 0.0052, -0.0404, -0.0034], [-0.0169, -0.0439, -0.0173], [-0.0187, -0.0003, 0.0004]], [[ 0.0093, 0.0020, 0.0155], [ 0.0025, -0.0042, 0.0022], [-0.0041, -0.0035, -0.0081]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn1.weight&#39;, tensor([0.2128, 0.2073, 0.1555, 0.2610, 0.2081, 0.2308, 0.2054, 0.2279, 0.2229, 0.2157, 0.1772, 0.2185, 0.1760, 0.1879, 0.1871, 0.2572, 0.1734, 0.2247, 0.2072, 0.1769, 0.2156, 0.1803, 0.2053, 0.2076, 0.1689, 0.2316, 0.1977, 0.2269, 0.2463, 0.2558, 0.2281, 0.1697, 0.2261, 0.2106, 0.2234, 0.1927, 0.1816, 0.1902, 0.2843, 0.2095, 0.2275, 0.2639, 0.2234, 0.1976, 0.2170, 0.2174, 0.2515, 0.1854, 0.2473, 0.2035, 0.1430, 0.1832, 0.1663, 0.2461, 0.2148, 0.1879, 0.2390, 0.1870, 0.2069, 0.1813, 0.1365, 0.2188, 0.1473, 0.2968, 0.2321, 0.2039, 0.2295, 0.2065, 0.2145, 0.1899, 0.2016, 0.2379, 0.2079, 0.2141, 0.2152, 0.2094, 0.2754, 0.1790, 0.0909, 0.2104, 0.1763, 0.2158, 0.1934, 0.1829, 0.2645, 0.1796, 0.2184, 0.2152, 0.2244, 0.2362, 0.2015, 0.2167, 0.1379, 0.2053, 0.1936, 0.1910, 0.2016, 0.1853, 0.2167, 0.2131, 0.1557, 0.2020, 0.1850, 0.2250, 0.2297, 0.2120, 0.1865, 0.1842, 0.2559, 0.1910, 0.1996, 0.2290, 0.1863, 0.2441, 0.2053, 0.2105, 0.2427, 0.3153, 0.2448, 0.2143, 0.2280, 0.2295, 0.2865, 0.2696, 0.2013, 0.2073, 0.2039, 0.2140, 0.1976, 0.2379, 0.2017, 0.2002, 0.1955, 0.2599, 0.2567, 0.1671, 0.1937, 0.1930, 0.1790, 0.2427, 0.2116, 0.1880, 0.1942, 0.1309, 0.1817, 0.1658, 0.1787, 0.1880, 0.1963, 0.1839, 0.2482, 0.2467, 0.1687, 0.1835, 0.2315, 0.1920, 0.2071, 0.2103, 0.2220, 0.2179, 0.2431, 0.2290, 0.2755, 0.1713, 0.2085, 0.1863, 0.1924, 0.1825, 0.2198, 0.2172, 0.1984, 0.1487, 0.2054, 0.1851, 0.2153, 0.2325, 0.2000, 0.1758, 0.2403, 0.2155, 0.2305, 0.2346, 0.2085, 0.2118, 0.2181, 0.2272, 0.2335, 0.2294, 0.2443, 0.2256, 0.1488, 0.1219, 0.2048, 0.2565, 0.1901, 0.2204, 0.1760, 0.1936, 0.1775, 0.1554, 0.1993, 0.2354, 0.2052, 0.2212, 0.2072, 0.2167, 0.2014, 0.1799, 0.2209, 0.2429, 0.2434, 0.2715, 0.1989, 0.1820, 0.1981, 0.2070, 0.2003, 0.2143, 0.2251, 0.1630, 0.1915, 0.2649, 0.1487, 0.2376, 0.1819, 0.2616, 0.2578, 0.2177, 0.2170, 0.2008, 0.1916, 0.2376, 0.2075, 0.1932, 0.2121, 0.1501, 0.1447, 0.2114, 0.1742, 0.1771, 0.1310, 0.2045, 0.2127, 0.2382, 0.2159, 0.1930, 0.2211, 0.2584, 0.1954, 0.2136, 0.2044, 0.2342, 0.1838, 0.2227, 0.1963, 0.2104], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn1.bias&#39;, tensor([-0.2243, -0.1600, -0.1739, -0.4187, -0.2427, -0.2751, -0.1970, -0.2223, -0.2162, -0.3061, -0.2019, -0.3240, -0.1418, -0.2182, -0.1600, -0.3822, -0.1687, -0.2094, -0.3033, -0.1475, -0.2130, -0.1507, -0.2667, -0.3032, -0.1033, -0.2870, -0.2506, -0.3001, -0.3197, -0.2196, -0.3459, -0.2208, -0.3332, -0.2849, -0.2437, -0.2284, -0.2099, -0.1692, -0.3541, -0.1840, -0.3036, -0.3668, -0.2068, -0.1892, -0.2846, -0.1800, -0.2994, -0.1986, -0.3003, -0.1867, -0.0362, -0.1608, -0.0816, -0.3029, -0.2356, -0.1906, -0.1821, -0.2007, -0.1963, -0.1181, 0.0308, -0.2569, -0.0620, -0.4381, -0.2512, -0.2484, -0.2930, -0.1842, -0.2618, -0.1760, -0.2366, -0.1985, -0.2205, -0.3059, -0.2067, -0.2168, -0.3436, -0.1258, 0.0751, -0.3450, -0.1406, -0.2462, -0.2231, -0.1840, -0.3170, -0.1716, -0.2719, -0.3117, -0.2846, -0.2929, -0.2446, -0.2800, -0.0651, -0.2018, -0.2280, -0.1885, -0.1908, -0.2150, -0.2688, -0.2177, -0.0791, -0.1598, -0.2266, -0.2825, -0.2468, -0.2356, -0.1515, -0.1658, -0.3365, -0.1721, -0.1950, -0.3660, -0.1996, -0.2225, -0.1824, -0.1817, -0.2786, -0.2606, -0.3081, -0.1729, -0.1530, -0.3173, -0.4268, -0.2916, -0.1773, -0.2663, -0.2519, -0.2285, -0.2112, -0.1753, -0.3022, -0.2564, -0.1762, -0.2765, -0.3681, -0.2143, -0.2057, -0.1787, -0.1680, -0.1880, -0.2362, -0.1529, -0.2429, -0.0009, -0.2503, -0.0987, -0.1532, -0.1682, -0.1332, -0.1237, -0.3032, -0.2788, -0.1638, -0.1717, -0.2107, -0.2020, -0.2337, -0.2448, -0.3107, -0.2458, -0.3577, -0.2855, -0.4344, -0.1371, -0.2554, -0.2882, -0.1702, -0.2007, -0.2468, -0.2381, -0.2146, -0.0540, -0.1714, -0.2182, -0.1563, -0.2812, -0.2570, -0.1573, -0.3232, -0.2460, -0.2679, -0.3069, -0.2623, -0.2302, -0.2536, -0.3297, -0.3154, -0.3397, -0.2722, -0.1803, 0.0204, -0.0245, -0.2238, -0.2555, -0.1099, -0.2479, -0.0467, -0.2258, -0.1501, -0.1409, -0.2101, -0.2682, -0.2211, -0.2667, -0.2270, -0.2037, -0.2613, -0.1414, -0.3318, -0.3005, -0.4086, -0.3951, -0.2067, -0.2107, -0.1737, -0.2466, -0.2069, -0.2352, -0.2290, -0.1369, -0.1189, -0.4252, -0.0798, -0.3850, -0.2355, -0.3454, -0.2695, -0.2429, -0.1988, -0.1311, -0.2040, -0.3608, -0.2866, -0.2097, -0.3102, -0.0920, -0.0373, -0.2586, -0.1188, -0.1309, -0.0331, -0.2286, -0.2074, -0.1688, -0.2913, -0.2087, -0.2748, -0.3529, -0.2655, -0.2887, -0.2404, -0.2914, -0.1672, -0.2541, -0.2038, -0.3093], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn1.running_mean&#39;, tensor([-0.3651, -0.2998, -0.1812, -0.7810, -0.5916, -0.4748, -0.4736, -0.2511, -0.9639, -0.8209, -0.2190, -0.2608, -0.3295, -0.4239, -0.4926, -0.4433, -0.0491, -0.8791, 0.8793, -0.3660, -0.4806, -0.3599, -0.1635, -0.3865, -1.1303, -0.2738, -0.5271, -0.5189, -0.2284, -0.4844, -0.5519, 0.0143, -0.4080, -0.4478, 0.1714, -0.5008, -0.0828, -0.1326, -0.0619, -0.5244, -0.4783, -0.4444, -0.6438, -0.5083, -0.6425, -0.7672, -0.7167, -0.2796, -0.3978, -0.3511, -0.4865, -0.5273, -0.4000, -0.4429, -0.5156, -0.3811, -0.2378, 0.4442, 0.2309, -0.3229, -0.1605, -0.1691, -0.2555, -0.7233, -0.3794, -0.1664, -0.4670, -0.5691, -0.7242, -0.4918, -0.4610, -0.1064, -0.5170, -0.6883, -0.6282, -0.4761, -0.9324, -0.3011, 0.4325, -0.0950, -0.0732, -0.5729, 0.0319, -0.2458, -0.5670, -0.2772, -0.6420, -0.5409, -0.5815, -0.7369, -0.3051, -0.3709, -0.1224, -0.4691, -0.2464, -0.0626, -0.3698, -0.3553, -0.2599, -0.5196, -0.3105, 0.0711, -0.3294, -0.3638, -0.4675, -0.3265, -0.6314, -0.1732, -0.6758, -0.2822, -0.3766, -0.9416, -0.1514, -0.4925, -0.5748, -0.2535, -0.2922, -0.3464, -0.4269, -0.6423, -0.4696, -0.8772, -0.8360, -0.4048, -0.3005, -0.1617, -0.3982, -0.3743, -0.5075, -0.5617, -0.2682, -0.4689, -0.6917, -0.5481, -0.5868, 0.1754, -0.4308, -0.3440, -0.4135, -0.3636, -0.4836, 0.2351, -0.4407, 0.1971, -0.3867, -0.5623, -0.4277, -0.5018, -0.6991, -0.4761, -0.7585, -0.6232, -0.0385, -0.3187, -0.6539, -0.3522, -0.4059, -0.2486, -0.4877, -0.4060, -0.4721, -0.3598, -0.5805, -0.2981, -0.6146, -0.1334, -0.3613, -0.2770, -0.3614, -0.2295, -0.5109, -0.4135, -0.6528, -0.6157, -0.3061, -0.9354, -0.3809, -0.3436, -0.4518, -0.4517, -0.5844, -0.4242, -0.1319, -0.3255, -0.2136, -0.1866, -0.3254, -0.5455, -0.5499, -0.6391, 0.3671, -1.3526, -0.4430, -0.5051, -0.4641, 0.0235, -0.3055, -0.4627, -0.0296, -0.0175, -0.6273, -0.4275, -0.5902, -0.3689, -0.7710, -0.4496, -0.3981, -0.1443, -0.2797, -0.4832, -0.4869, -0.8585, -0.3667, -0.3327, -0.5204, -0.4917, -0.5481, -0.4178, -0.6305, -0.2751, -0.6381, -0.7310, -0.6740, -0.5241, 0.2601, -0.9273, -0.5061, -0.5076, -0.4377, -0.3064, -0.2927, -0.4453, -0.3398, -0.1844, -0.4728, 0.2492, -0.0890, -0.3230, -0.2310, -0.1880, -0.3863, -0.4847, -0.3181, -0.3138, -0.3015, -0.7211, -0.4033, -0.4240, 0.0985, -0.2653, -0.6686, -0.6537, -0.6023, -0.0591, -0.5229, -0.4643], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn1.running_var&#39;, tensor([0.1612, 0.1640, 0.1667, 0.1097, 0.1479, 0.1034, 0.1031, 0.1632, 0.1436, 0.1192, 0.1056, 0.0758, 0.1241, 0.1681, 0.2393, 0.1020, 0.0884, 0.2469, 0.1301, 0.2910, 0.1584, 0.1086, 0.1081, 0.1046, 0.1298, 0.1292, 0.1195, 0.1407, 0.1061, 0.2462, 0.1248, 0.0681, 0.1312, 0.1231, 0.1103, 0.0893, 0.1088, 0.1289, 0.1380, 0.1469, 0.1392, 0.1067, 0.1470, 0.1205, 0.1111, 0.1585, 0.0988, 0.1273, 0.1442, 0.1268, 0.1683, 0.1321, 0.1326, 0.1436, 0.1507, 0.1188, 0.1571, 0.1719, 0.2740, 0.1845, 0.2568, 0.0988, 0.1342, 0.1645, 0.1207, 0.0867, 0.1115, 0.1378, 0.1080, 0.1634, 0.1123, 0.2729, 0.0888, 0.0927, 0.1924, 0.1095, 0.1464, 0.1383, 0.1938, 0.0995, 0.1690, 0.1550, 0.1420, 0.1009, 0.1269, 0.1566, 0.1181, 0.1240, 0.1205, 0.1396, 0.1064, 0.1160, 0.1536, 0.1130, 0.0943, 0.0958, 0.1255, 0.1285, 0.1143, 0.1285, 0.1652, 0.1478, 0.1068, 0.1111, 0.1571, 0.2144, 0.1460, 0.1549, 0.1657, 0.1167, 0.1531, 0.1060, 0.1170, 0.1837, 0.1917, 0.1360, 0.1536, 0.3806, 0.1544, 0.1455, 0.2177, 0.1045, 0.1170, 0.2315, 0.1926, 0.0913, 0.1076, 0.1250, 0.1171, 0.3225, 0.1078, 0.1055, 0.1335, 0.1756, 0.1618, 0.1448, 0.0903, 0.1339, 0.1197, 0.1857, 0.1197, 0.1991, 0.1800, 0.2219, 0.0837, 0.1665, 0.1441, 0.1229, 0.1811, 0.2424, 0.1060, 0.1779, 0.0905, 0.1146, 0.1483, 0.1657, 0.1380, 0.1166, 0.1067, 0.1405, 0.1328, 0.1632, 0.0932, 0.1875, 0.1023, 0.0698, 0.1357, 0.1057, 0.1317, 0.1480, 0.1628, 0.1939, 0.1498, 0.0925, 0.2525, 0.1403, 0.1003, 0.1296, 0.0904, 0.1274, 0.0883, 0.1345, 0.2124, 0.1128, 0.1247, 0.1199, 0.1394, 0.0970, 0.1539, 0.1937, 0.3389, 0.1753, 0.1163, 0.2092, 0.2859, 0.1392, 0.1642, 0.1095, 0.1327, 0.1047, 0.1227, 0.1965, 0.1338, 0.1404, 0.0930, 0.1756, 0.1114, 0.1503, 0.0969, 0.1002, 0.0947, 0.1103, 0.1924, 0.1184, 0.1463, 0.1182, 0.1596, 0.1780, 0.1013, 0.2011, 0.1324, 0.1163, 0.1274, 0.0978, 0.1049, 0.1521, 0.1028, 0.1321, 0.1462, 0.2103, 0.1108, 0.0798, 0.1280, 0.1233, 0.0651, 0.1975, 0.1641, 0.1295, 0.1387, 0.1016, 0.1742, 0.1259, 0.1595, 0.3542, 0.1126, 0.1105, 0.0874, 0.1270, 0.0895, 0.1246, 0.1301, 0.1466, 0.1269, 0.0922, 0.1244, 0.1228], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.3.conv2.weight&#39;, tensor([[[[-0.0095, -0.0133, 0.0069], [-0.0059, 0.0165, 0.0469], [-0.0039, 0.0081, 0.0384]], [[ 0.0243, 0.0012, 0.0002], [ 0.0059, -0.0023, -0.0224], [-0.0063, -0.0090, -0.0048]], [[-0.0176, -0.0191, -0.0103], [-0.0271, -0.0176, -0.0100], [-0.0019, 0.0042, -0.0194]], ..., [[ 0.0083, -0.0434, -0.0417], [-0.0020, 0.0690, 0.0111], [-0.0104, 0.0159, 0.0378]], [[ 0.0171, 0.0323, 0.0151], [-0.0085, -0.0167, -0.0248], [ 0.0150, -0.0032, -0.0212]], [[ 0.0031, -0.0047, -0.0091], [-0.0055, -0.0099, -0.0127], [ 0.0204, 0.0091, -0.0040]]], [[[ 0.0020, 0.0031, 0.0212], [-0.0435, -0.0225, 0.0093], [-0.0407, -0.0248, -0.0089]], [[ 0.0219, 0.0104, 0.0247], [ 0.0163, 0.0102, 0.0374], [-0.0037, 0.0016, 0.0251]], [[ 0.0027, 0.0188, -0.0100], [ 0.0044, 0.0221, 0.0068], [-0.0074, 0.0025, 0.0015]], ..., [[-0.0075, 0.0006, -0.0017], [-0.0005, -0.0074, -0.0021], [ 0.0065, -0.0049, 0.0102]], [[-0.0070, -0.0018, -0.0133], [-0.0069, 0.0002, -0.0078], [-0.0182, -0.0134, -0.0005]], [[ 0.0024, 0.0082, -0.0089], [-0.0313, -0.0311, -0.0333], [-0.0441, -0.0125, -0.0226]]], [[[-0.0102, -0.0075, 0.0053], [-0.0024, -0.0120, -0.0152], [-0.0053, -0.0252, -0.0291]], [[ 0.0075, 0.0053, 0.0125], [-0.0034, 0.0043, 0.0038], [-0.0239, -0.0224, -0.0111]], [[-0.0110, -0.0035, 0.0020], [-0.0155, -0.0098, 0.0060], [-0.0023, 0.0030, 0.0100]], ..., [[-0.0130, -0.0202, -0.0310], [ 0.0015, -0.0071, -0.0209], [ 0.0243, 0.0360, 0.0242]], [[-0.0133, -0.0139, -0.0144], [-0.0026, 0.0020, 0.0029], [ 0.0181, 0.0124, -0.0045]], [[ 0.0127, -0.0042, 0.0032], [ 0.0007, -0.0067, -0.0033], [ 0.0003, -0.0007, 0.0016]]], ..., [[[-0.0121, -0.0060, -0.0032], [-0.0139, -0.0092, -0.0071], [-0.0093, -0.0090, -0.0025]], [[-0.0051, -0.0111, -0.0198], [-0.0079, -0.0173, -0.0212], [ 0.0019, -0.0148, -0.0084]], [[-0.0014, 0.0033, 0.0039], [-0.0004, 0.0030, -0.0030], [-0.0024, -0.0012, 0.0054]], ..., [[ 0.0078, 0.0175, -0.0039], [ 0.0074, 0.0100, 0.0055], [-0.0005, -0.0009, -0.0080]], [[-0.0007, -0.0102, -0.0206], [ 0.0021, -0.0166, -0.0223], [ 0.0033, -0.0017, -0.0053]], [[ 0.0022, -0.0047, -0.0024], [-0.0072, -0.0049, -0.0107], [-0.0169, -0.0053, -0.0132]]], [[[ 0.0049, -0.0090, -0.0181], [ 0.0043, -0.0212, -0.0252], [ 0.0119, -0.0080, -0.0071]], [[-0.0115, -0.0201, 0.0034], [ 0.0097, 0.0076, 0.0078], [ 0.0113, 0.0227, 0.0066]], [[-0.0028, -0.0057, -0.0154], [ 0.0094, -0.0004, -0.0080], [ 0.0045, 0.0036, -0.0032]], ..., [[-0.0018, 0.0469, 0.0331], [ 0.0046, 0.0006, 0.0343], [ 0.0031, -0.0006, 0.0035]], [[ 0.0170, 0.0078, -0.0113], [-0.0018, -0.0205, -0.0327], [-0.0059, -0.0131, -0.0146]], [[-0.0002, -0.0046, 0.0107], [-0.0054, 0.0014, 0.0219], [ 0.0093, 0.0252, 0.0253]]], [[[ 0.0140, 0.0106, 0.0078], [ 0.0042, -0.0031, -0.0040], [ 0.0061, 0.0024, 0.0030]], [[-0.0010, 0.0013, -0.0004], [ 0.0061, 0.0129, 0.0074], [ 0.0095, 0.0119, 0.0056]], [[-0.0012, 0.0039, 0.0055], [-0.0042, -0.0010, 0.0051], [-0.0078, -0.0051, 0.0029]], ..., [[-0.0056, 0.0076, 0.0131], [-0.0011, 0.0056, 0.0109], [-0.0036, 0.0045, 0.0064]], [[-0.0182, -0.0134, -0.0041], [-0.0130, -0.0023, 0.0048], [-0.0004, 0.0103, 0.0081]], [[ 0.0108, 0.0051, 0.0089], [ 0.0100, 0.0040, 0.0113], [ 0.0070, 0.0017, 0.0051]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn2.weight&#39;, tensor([ 0.4017, 0.2043, 0.1970, 0.0621, 0.2692, 0.0780, 0.2212, 0.0224, 0.1047, 0.0877, 0.0732, 0.1331, 0.1981, 0.0679, 0.1296, 0.1195, 0.1488, 0.0968, 0.0327, 0.1064, 0.1072, 0.0934, 0.3180, 0.1113, 0.1633, 0.0795, 0.2143, 0.0786, 0.0563, 0.0815, 0.1841, 0.1579, 0.2377, 0.0841, 0.2194, 0.0428, 0.1461, 0.1598, 0.1475, 0.0831, 0.0892, 0.3910, 0.0420, 0.0907, 0.2118, 0.1691, 0.1072, 0.2231, 0.0396, 0.0822, 0.1124, 0.0736, 0.2997, 0.1237, 0.2465, 0.0472, 0.1805, 0.1268, 0.2057, 0.2340, 0.3224, 0.0799, 0.3142, 0.0875, 0.1616, 0.2984, 0.1451, 0.1077, 0.2613, 0.1699, 0.1683, 0.1018, 0.1271, 0.1093, 0.1483, 0.1778, 0.1250, 0.0906, 0.1071, 0.2242, 0.2150, 0.2662, 0.2189, 0.0942, 0.1496, 0.0860, 0.0570, 0.2928, 0.1688, 0.1206, 0.2430, 0.0155, 0.0481, 0.1216, 0.1182, 0.2259, 0.1913, 0.1663, 0.0945, 0.0974, 0.0990, 0.2325, 0.2571, 0.1255, 0.4006, 0.3372, 0.1644, 0.1085, 0.1754, 0.1548, 0.2301, 0.0394, 0.2582, 0.2665, 0.1126, 0.1620, 0.0223, 0.1274, 0.0707, 0.1307, 0.0673, 0.2455, 0.0390, 0.1949, 0.0854, 0.0775, 0.4676, 0.1437, 0.1519, 0.0848, 0.1235, 0.1278, 0.2318, 0.1699, 0.2254, 0.1931, 0.1317, 0.2645, 0.0911, 0.1215, 0.1069, 0.1173, 0.2173, 0.0461, 0.2493, 0.2155, 0.0929, 0.1300, 0.1876, 0.1019, 0.1583, 0.3031, 0.1424, 0.0764, 0.2061, 0.2062, 0.1703, 0.0924, 0.1741, 0.2737, 0.3887, 0.2910, 0.3292, 0.1007, 0.1393, 0.3548, 0.2425, 0.1491, 0.1920, 0.1399, 0.2307, 0.1464, 0.1519, 0.1778, 0.3763, 0.1320, 0.2728, 0.1048, 0.1463, 0.2131, 0.2617, 0.3581, 0.3118, 0.2360, 0.1399, 0.1437, 0.2421, 0.3355, 0.1439, 0.1245, 0.0790, 0.0877, 0.0831, 0.0934, 0.0744, 0.1824, 0.2886, 0.1995, 0.1411, 0.2327, 0.2901, 0.1115, 0.1494, 0.0887, 0.0979, 0.0578, 0.1753, 0.3346, 0.1800, 0.2786, 0.1100, 0.1115, 0.0723, 0.0845, 0.2768, 0.3023, 0.3785, 0.0993, 0.1201, 0.0598, 0.2304, 0.2275, 0.0857, 0.2988, 0.2685, 0.1896, 0.1183, 0.1731, 0.1691, 0.2133, 0.1472, 0.3413, 0.0948, 0.1303, 0.2985, 0.0435, -0.0399, 0.0681, 0.1733, 0.0546, 0.1569, 0.2125, 0.1301, 0.1676, 0.2950, 0.1893, 0.1416, 0.2474, 0.0456, 0.1078, 0.1389, 0.3060, 0.1424, 0.0905, 0.1185, 0.0408], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn2.bias&#39;, tensor([-3.1262e-01, -1.6109e-01, -8.5756e-02, 1.4522e-02, -1.9773e-01, -6.3229e-02, -2.3784e-01, 3.4764e-03, -2.2881e-02, -3.4874e-02, -5.7003e-02, -7.6368e-02, -8.2627e-02, -2.6754e-02, -4.1340e-02, -7.7054e-02, -7.0579e-02, -3.7324e-02, -9.1658e-05, -3.0641e-02, -4.6120e-02, -2.3954e-03, -1.4952e-01, -6.0575e-02, -1.1601e-01, -9.5243e-03, 2.7347e-03, -3.5235e-02, -2.5730e-02, -7.1616e-02, -1.3502e-01, -1.0430e-01, -1.9549e-01, -3.1232e-02, -1.9569e-01, 2.3471e-02, 5.3077e-03, -9.2219e-02, 7.9329e-02, -5.9299e-02, -5.9711e-03, -1.0147e-02, -1.2435e-02, 1.1169e-02, -1.4872e-01, -1.2573e-01, -5.1502e-02, -1.5435e-01, -5.0656e-03, -2.8360e-02, -4.5167e-02, -2.4463e-03, -1.8646e-01, -7.1298e-02, -1.1407e-01, 1.1817e-02, -1.1321e-01, -7.3631e-02, -1.8878e-01, -6.0503e-02, -1.0550e-01, -5.5673e-02, -3.1354e-01, -6.4169e-02, -1.1246e-01, -6.0471e-02, -8.2264e-02, -4.2815e-02, -1.7005e-01, -9.7878e-02, -1.5172e-01, -5.0210e-02, 7.0131e-04, -8.9692e-03, -8.9138e-02, -1.7801e-01, -4.1660e-02, -4.8192e-02, -2.5114e-02, -2.3136e-01, -1.1297e-01, -1.6998e-01, -1.5653e-01, -5.3501e-02, -1.6885e-02, -2.7362e-02, -9.2368e-03, -1.8563e-01, -7.2630e-02, -8.1890e-02, -1.5101e-01, 1.1777e-02, -1.0873e-02, -7.4577e-02, -7.8123e-02, -1.7676e-01, -1.3173e-01, -1.2163e-01, -3.3462e-02, -2.0500e-02, -3.1184e-02, -9.6635e-02, -2.4182e-01, 1.6279e-02, -1.8885e-01, -2.4534e-01, -4.3834e-02, -6.4110e-02, -1.2587e-01, -7.6928e-02, -1.4385e-01, 1.9753e-02, -1.8807e-01, 1.7780e-02, -3.8301e-02, -8.0100e-02, 4.3794e-03, -8.9451e-02, -3.1730e-02, -7.9079e-02, -2.8678e-02, -4.5372e-02, 1.0952e-03, -1.4819e-01, -2.9605e-02, -2.1048e-02, -3.6573e-01, -1.0972e-01, -7.9624e-02, -3.3991e-03, -7.5040e-02, -4.3529e-02, -1.5992e-01, -7.9263e-02, -1.4585e-01, -1.0197e-01, -6.5388e-02, -1.6048e-01, -4.5055e-02, -6.8086e-02, -9.3989e-02, -1.4835e-01, -1.5303e-01, -1.0316e-02, -1.0858e-01, -4.6241e-02, -5.5601e-03, -7.0750e-02, -1.4118e-01, -4.7613e-02, -5.2079e-02, -1.2116e-01, -7.8115e-02, -4.1343e-02, -3.0395e-02, -6.3124e-02, -2.0637e-01, -6.0491e-02, -1.5418e-01, -2.1730e-01, -2.0156e-01, -1.7652e-01, -2.8372e-01, -7.0468e-02, -3.2275e-02, -1.6131e-01, -1.7357e-01, -5.0941e-02, -1.7914e-01, -1.2270e-01, -1.9509e-01, -1.0701e-01, -5.4297e-02, -4.4303e-02, -2.3208e-01, -4.8112e-02, -2.3922e-01, -2.2548e-02, -6.0147e-02, -6.5512e-02, -8.7159e-02, -9.6250e-02, -2.4084e-01, -1.6698e-01, -1.0349e-01, -6.7065e-03, -1.8190e-01, -3.8114e-01, -1.0036e-01, -6.5436e-02, 5.9242e-03, -4.0648e-02, -4.8683e-02, -4.7775e-02, -3.5468e-02, -1.6885e-01, -1.3548e-01, -3.3096e-02, -1.0198e-01, -2.5290e-01, -2.5790e-01, -6.6217e-02, -8.7835e-02, -1.0351e-02, 3.9460e-02, 1.5199e-02, -1.2417e-01, -2.9812e-01, -5.6470e-02, -1.8556e-01, -9.8170e-02, -5.5649e-02, -5.6516e-03, 1.2868e-02, -2.7421e-01, -2.4886e-01, -1.5872e-01, -8.1652e-02, -6.3108e-02, 1.3986e-02, -1.3511e-01, -2.2831e-01, -3.9656e-02, -3.2144e-01, -1.0154e-01, 1.6175e-01, -7.4749e-02, -3.1528e-02, -8.7490e-02, -1.8849e-02, -5.7820e-02, -2.7766e-02, -7.4871e-02, -4.8644e-04, -2.7290e-01, -2.8474e-02, 1.3494e-02, 6.9075e-04, -8.2903e-02, -2.5512e-03, -9.2230e-02, 1.5446e-01, -7.2680e-02, -1.2922e-01, -2.6969e-01, -1.2889e-01, -5.5234e-02, -1.7326e-01, 1.6392e-02, -4.1154e-02, -5.8725e-02, -3.0507e-01, -9.2032e-02, 1.3317e-02, -1.0395e-01, 5.6113e-03], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn2.running_mean&#39;, tensor([-7.8878e-02, -4.2300e-02, -8.9655e-02, -2.5411e-02, -3.1578e-02, -1.1604e-02, -4.8446e-02, -3.8557e-03, -3.4438e-02, -2.3296e-02, -4.0177e-02, -3.9360e-02, -3.6003e-02, -2.2158e-02, -1.4932e-02, -3.7178e-02, -1.1293e-02, 1.0073e-02, -7.4729e-03, -3.9584e-02, -2.7104e-02, -2.8405e-02, -8.7832e-02, -2.2475e-02, -8.7573e-02, -1.0310e-02, 1.9268e-01, -6.3372e-03, 8.3325e-03, -3.4482e-02, -2.9666e-02, -6.1399e-02, -5.1582e-02, -3.1080e-02, -5.4844e-02, -2.1959e-02, 8.5981e-03, -3.4170e-02, 3.2640e-02, -1.5743e-02, -3.3863e-02, -1.9855e-02, -6.3719e-03, 4.0531e-02, -3.4123e-02, -1.1746e-02, -2.5754e-02, -3.6094e-02, 2.7915e-03, -5.1382e-02, -3.6906e-02, -1.9985e-02, -6.5540e-02, -3.5793e-02, -1.0155e-01, -1.0795e-02, -2.4945e-02, -4.5592e-02, -3.0919e-02, -4.5990e-02, -6.3177e-02, -2.4972e-02, -4.8751e-02, -2.6466e-02, -4.1087e-02, -9.8147e-02, -2.4707e-02, 1.7070e-03, -5.6447e-02, -4.2071e-02, -6.1604e-02, -5.4235e-02, -5.4017e-02, 1.7566e-02, -4.8258e-02, -3.4216e-02, -5.7143e-02, -2.1159e-02, -6.1629e-02, -6.9951e-02, -4.4812e-02, -2.5415e-02, -5.2166e-02, -2.4388e-02, -6.5774e-02, -9.5118e-03, -1.3203e-02, -4.8039e-02, -1.6468e-02, -1.1763e-02, -5.2998e-02, 1.8389e-03, -2.4335e-02, -4.9490e-02, -1.9565e-02, -3.9963e-02, -7.7041e-02, -1.2861e-02, -1.2270e-03, -5.2752e-02, -1.0200e-02, -2.9912e-02, -5.3004e-02, -1.1038e-02, -7.2464e-02, -4.9131e-02, -8.9360e-02, -4.6600e-02, -5.5915e-02, -3.5062e-02, -7.3996e-02, 8.3334e-03, -9.0847e-03, -6.0094e-02, -1.4393e-02, 7.9168e-04, -1.0853e-02, -1.8711e-02, -5.3075e-03, -2.2705e-02, -2.6210e-02, -1.0110e-01, -1.7248e-04, -3.4356e-02, 4.9455e-03, -2.4242e-02, -6.4954e-02, -1.1939e-02, -4.8674e-02, 3.2512e-02, -3.7644e-02, -3.6008e-02, -5.5336e-02, -8.7552e-02, -6.5311e-02, -6.4711e-02, -3.9889e-02, -1.8170e-02, -1.6947e-02, -4.6943e-02, 2.2099e-03, -4.4734e-02, -2.4093e-02, -4.2135e-03, -7.8376e-02, -3.8313e-02, -3.6412e-02, -1.7067e-02, -6.5107e-02, 9.6959e-03, -1.9306e-02, -8.5069e-02, -5.6845e-02, -5.3813e-03, 1.6115e-02, -4.2040e-02, -8.0220e-02, -2.5486e-02, -3.7913e-02, -3.6762e-02, -5.4475e-02, -9.6152e-02, -6.3663e-02, -4.2234e-02, -5.5472e-02, -6.1915e-02, -3.8327e-02, -4.7801e-02, -7.5098e-02, -4.1538e-02, -6.1383e-02, -4.7643e-02, -2.9014e-02, -6.0364e-02, -4.8628e-02, -2.8243e-02, -3.7547e-02, -3.8981e-02, -5.4395e-02, -3.0461e-02, -6.7381e-02, -6.6035e-02, -4.2384e-02, -2.9242e-02, -2.0603e-02, -2.2304e-02, -5.0093e-02, -6.8256e-02, -5.7996e-02, -4.9643e-02, -3.4229e-02, -1.5160e-02, -2.0486e-02, -3.2940e-02, -4.3798e-03, -6.4390e-02, -2.6992e-02, -7.0517e-02, -4.0442e-02, -1.0155e-01, -5.5106e-02, -3.6899e-02, -4.1123e-02, -1.7945e-03, 2.8877e-02, -1.0744e-02, -9.4603e-03, 3.2638e-02, -7.7014e-02, -6.0232e-02, -1.4103e-02, -3.9522e-02, -9.6192e-03, 1.5392e-02, -3.4783e-02, -6.4268e-02, -1.4211e-01, -9.0886e-03, -6.0385e-03, -2.3813e-03, -4.9824e-02, -6.7084e-02, -5.8522e-02, -6.0271e-02, -9.6339e-02, 6.8987e-02, -4.2203e-02, 6.2233e-03, -5.2374e-02, -8.9652e-02, -5.4662e-02, -9.3430e-02, -3.6853e-02, -7.8183e-02, -4.5356e-02, -1.8849e-02, -1.6308e-02, -2.1565e-02, -2.9190e-02, -3.0969e-03, -6.2593e-02, 1.3623e-01, -1.2510e-03, -4.9904e-02, -6.6095e-02, -7.5475e-02, -1.9436e-02, -6.8084e-02, 9.5727e-03, -4.1055e-02, -1.5754e-02, -7.3895e-02, -5.7487e-02, 4.0081e-03, -3.8931e-02, -2.8722e-02], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn2.running_var&#39;, tensor([0.0064, 0.0036, 0.0178, 0.0083, 0.0040, 0.0018, 0.0067, 0.0011, 0.0042, 0.0033, 0.0008, 0.0101, 0.0039, 0.0031, 0.0039, 0.0026, 0.0025, 0.0045, 0.0007, 0.0030, 0.0064, 0.0033, 0.0076, 0.0066, 0.0055, 0.0074, 0.0079, 0.0012, 0.0045, 0.0017, 0.0026, 0.0069, 0.0051, 0.0022, 0.0034, 0.0039, 0.0039, 0.0065, 0.0164, 0.0012, 0.0021, 0.0155, 0.0036, 0.0035, 0.0042, 0.0040, 0.0019, 0.0030, 0.0046, 0.0055, 0.0044, 0.0025, 0.0051, 0.0026, 0.0133, 0.0034, 0.0044, 0.0030, 0.0043, 0.0039, 0.0083, 0.0019, 0.0033, 0.0010, 0.0084, 0.0058, 0.0022, 0.0018, 0.0064, 0.0079, 0.0042, 0.0128, 0.0099, 0.0024, 0.0039, 0.0033, 0.0022, 0.0033, 0.0045, 0.0030, 0.0031, 0.0031, 0.0051, 0.0027, 0.0119, 0.0037, 0.0011, 0.0040, 0.0033, 0.0032, 0.0103, 0.0014, 0.0026, 0.0097, 0.0033, 0.0039, 0.0143, 0.0036, 0.0063, 0.0090, 0.0029, 0.0050, 0.0046, 0.0024, 0.0099, 0.0045, 0.0043, 0.0020, 0.0043, 0.0033, 0.0044, 0.0021, 0.0040, 0.0060, 0.0042, 0.0041, 0.0035, 0.0021, 0.0009, 0.0064, 0.0033, 0.0060, 0.0029, 0.0025, 0.0017, 0.0044, 0.0090, 0.0074, 0.0024, 0.0028, 0.0031, 0.0038, 0.0044, 0.0112, 0.0052, 0.0047, 0.0052, 0.0043, 0.0100, 0.0021, 0.0030, 0.0016, 0.0048, 0.0027, 0.0071, 0.0035, 0.0046, 0.0032, 0.0030, 0.0023, 0.0100, 0.0121, 0.0079, 0.0015, 0.0038, 0.0044, 0.0033, 0.0034, 0.0029, 0.0031, 0.0061, 0.0111, 0.0043, 0.0033, 0.0069, 0.0067, 0.0032, 0.0058, 0.0033, 0.0042, 0.0056, 0.0076, 0.0049, 0.0039, 0.0050, 0.0023, 0.0041, 0.0038, 0.0038, 0.0041, 0.0050, 0.0068, 0.0049, 0.0032, 0.0024, 0.0042, 0.0059, 0.0029, 0.0049, 0.0042, 0.0028, 0.0032, 0.0028, 0.0014, 0.0034, 0.0025, 0.0095, 0.0083, 0.0031, 0.0051, 0.0037, 0.0045, 0.0062, 0.0024, 0.0113, 0.0053, 0.0028, 0.0071, 0.0265, 0.0038, 0.0022, 0.0034, 0.0014, 0.0081, 0.0028, 0.0046, 0.0165, 0.0013, 0.0037, 0.0042, 0.0043, 0.0036, 0.0080, 0.0050, 0.0147, 0.0102, 0.0034, 0.0039, 0.0093, 0.0046, 0.0030, 0.0079, 0.0041, 0.0065, 0.0034, 0.0011, 0.0015, 0.0014, 0.0042, 0.0045, 0.0120, 0.0077, 0.0025, 0.0032, 0.0039, 0.0055, 0.0036, 0.0081, 0.0047, 0.0053, 0.0047, 0.0059, 0.0131, 0.0019, 0.0035, 0.0036], device=&#39;cuda:0&#39;)), (&#39;0.6.3.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.4.conv1.weight&#39;, tensor([[[[-0.0020, -0.0225, -0.0297], [ 0.0152, -0.0004, -0.0139], [ 0.0007, 0.0102, 0.0072]], [[-0.0040, -0.0041, -0.0006], [-0.0012, 0.0052, 0.0014], [ 0.0012, -0.0060, -0.0110]], [[-0.0061, -0.0046, -0.0050], [-0.0055, -0.0068, -0.0157], [-0.0091, -0.0064, -0.0124]], ..., [[-0.0027, -0.0103, -0.0214], [-0.0067, 0.0022, -0.0005], [-0.0053, 0.0074, 0.0052]], [[ 0.0053, -0.0113, -0.0011], [-0.0240, -0.0504, -0.0400], [-0.0078, -0.0120, -0.0342]], [[-0.0228, -0.0252, -0.0172], [ 0.0071, 0.0009, -0.0063], [ 0.0085, -0.0054, -0.0150]]], [[[-0.0035, -0.0313, -0.0270], [-0.0237, 0.0207, 0.0093], [-0.0067, 0.0419, 0.0643]], [[-0.0009, 0.0014, -0.0031], [-0.0153, -0.0271, -0.0263], [-0.0027, 0.0020, -0.0080]], [[-0.0051, 0.0113, -0.0007], [-0.0005, 0.0185, -0.0023], [-0.0143, 0.0013, -0.0128]], ..., [[-0.0091, 0.0003, 0.0026], [-0.0017, -0.0076, -0.0156], [-0.0171, -0.0058, 0.0042]], [[-0.0142, -0.0235, -0.0117], [-0.0186, -0.0126, -0.0194], [ 0.0024, 0.0085, 0.0004]], [[ 0.0134, 0.0247, 0.0220], [-0.0071, -0.0030, -0.0011], [-0.0286, -0.0198, -0.0110]]], [[[-0.0442, -0.0278, -0.0238], [-0.0127, -0.0411, -0.0356], [-0.0069, -0.0093, -0.0056]], [[-0.0197, -0.0102, -0.0271], [-0.0195, -0.0240, -0.0288], [-0.0114, -0.0146, -0.0248]], [[-0.0013, 0.0014, 0.0025], [ 0.0130, 0.0444, 0.0161], [-0.0009, 0.0159, 0.0048]], ..., [[-0.0006, -0.0008, -0.0101], [-0.0123, -0.0040, -0.0038], [ 0.0074, 0.0017, -0.0019]], [[ 0.0132, 0.0064, 0.0065], [-0.0011, 0.0383, -0.0080], [-0.0009, 0.0007, -0.0057]], [[-0.0117, -0.0067, -0.0294], [-0.0015, 0.0198, -0.0169], [-0.0021, -0.0038, -0.0186]]], ..., [[[-0.0107, 0.0022, 0.0051], [-0.0078, -0.0289, -0.0101], [ 0.0020, 0.0002, 0.0086]], [[-0.0170, -0.0202, -0.0026], [-0.0118, -0.0170, -0.0271], [-0.0116, -0.0073, -0.0057]], [[-0.0064, -0.0026, -0.0116], [ 0.0072, 0.0160, -0.0028], [-0.0030, 0.0021, -0.0115]], ..., [[ 0.0085, 0.0068, -0.0024], [ 0.0028, 0.0097, 0.0035], [ 0.0126, 0.0008, 0.0080]], [[-0.0120, -0.0103, -0.0140], [-0.0125, 0.0046, -0.0138], [-0.0074, 0.0135, -0.0024]], [[-0.0036, 0.0118, 0.0076], [-0.0062, -0.0016, -0.0070], [ 0.0021, -0.0136, -0.0063]]], [[[ 0.0002, 0.0003, 0.0219], [ 0.0114, -0.0140, -0.0062], [ 0.0159, 0.0021, 0.0041]], [[ 0.0425, -0.0038, -0.0170], [-0.0018, -0.0243, -0.0169], [ 0.0072, -0.0032, -0.0102]], [[ 0.0074, -0.0044, -0.0093], [ 0.0025, -0.0134, -0.0292], [ 0.0254, 0.0052, -0.0210]], ..., [[ 0.0038, -0.0163, 0.0032], [ 0.0013, 0.0042, -0.0009], [ 0.0057, 0.0062, -0.0140]], [[-0.0012, -0.0167, -0.0016], [ 0.0115, -0.0019, -0.0128], [ 0.0039, -0.0044, -0.0215]], [[-0.0194, -0.0006, 0.0221], [-0.0299, -0.0100, 0.0091], [-0.0114, -0.0039, 0.0091]]], [[[-0.0025, -0.0223, 0.0116], [ 0.0206, 0.0002, 0.0187], [-0.0053, 0.0299, 0.0013]], [[ 0.0165, 0.0033, -0.0082], [ 0.0198, 0.0139, -0.0131], [ 0.0258, 0.0266, 0.0005]], [[ 0.0216, 0.0160, -0.0089], [ 0.0226, 0.0027, -0.0281], [ 0.0151, 0.0092, -0.0085]], ..., [[-0.0120, 0.0081, -0.0310], [-0.0028, 0.0150, 0.0195], [-0.0048, -0.0020, 0.0332]], [[ 0.0115, -0.0033, -0.0126], [ 0.0043, -0.0214, 0.0081], [-0.0097, -0.0303, -0.0011]], [[ 0.0254, 0.0177, 0.0039], [ 0.0305, 0.0212, 0.0010], [ 0.0199, 0.0162, -0.0039]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn1.weight&#39;, tensor([0.1933, 0.1973, 0.2407, 0.2278, 0.2125, 0.1824, 0.1747, 0.2052, 0.2150, 0.1845, 0.2024, 0.2119, 0.2472, 0.1938, 0.1924, 0.2103, 0.2077, 0.1970, 0.2397, 0.2104, 0.2112, 0.2653, 0.1749, 0.2104, 0.2448, 0.1894, 0.3029, 0.2632, 0.1866, 0.1906, 0.2343, 0.1896, 0.2015, 0.2121, 0.2720, 0.2596, 0.2129, 0.2984, 0.2072, 0.1631, 0.2030, 0.2328, 0.1932, 0.2270, 0.2109, 0.2069, 0.2487, 0.2206, 0.1951, 0.2271, 0.1502, 0.2190, 0.1870, 0.2419, 0.2045, 0.1456, 0.2228, 0.2316, 0.2071, 0.5763, 0.2069, 0.2133, 0.1329, 0.1596, 0.2056, 0.1843, 0.1911, 0.1962, 0.2347, 0.1881, 0.2134, 0.2480, 0.1984, 0.2942, 0.2603, 0.1936, 0.1832, 0.2051, 0.1998, 0.1927, 0.2186, 0.2231, 0.2273, 0.2060, 0.2346, 0.2040, 0.2280, 0.1598, 0.2080, 0.2453, 0.1963, 0.2546, 0.2177, 0.2639, 0.2103, 0.1855, 0.2626, 0.1712, 0.0773, 0.1742, 0.1825, 0.2056, 0.1973, 0.2326, 0.2021, 0.2338, 0.2122, 0.2217, 0.2336, 0.1931, 0.2585, 0.1985, 0.1852, 0.2058, 0.1912, 0.1730, 0.2801, 0.1980, 0.2450, 0.2052, 0.2212, 0.2036, 0.2047, 0.1982, 0.2039, 0.1840, 0.1920, 0.1895, 0.1850, 0.2196, 0.2307, 0.1767, 0.1678, 0.2105, 0.1628, 0.1853, 0.1780, 0.1655, 0.2684, 0.2239, 0.1806, 0.1763, 0.2642, 0.2011, 0.2182, 0.2214, 0.2217, 0.2490, 0.1730, 0.2254, 0.2253, 0.1897, 0.1749, 0.2020, 0.1511, 0.1773, 0.2590, 0.1932, 0.1891, 0.1784, 0.2879, 0.2254, 0.1957, 0.1796, 0.3151, 0.1785, 0.2408, 0.2219, 0.1909, 0.1697, 0.2096, 0.1947, 0.2156, 0.2273, 0.1980, 0.1669, 0.2216, 0.2247, 0.1862, 0.1478, 0.2822, 0.2172, 0.2545, 0.2331, 0.2725, 0.2195, 0.1824, 0.1879, 0.1777, 0.2423, 0.1817, 0.2273, 0.1965, 0.2390, 0.2079, 0.1940, 0.2158, 0.2718, 0.2060, 0.2194, 0.1938, 0.1829, 0.2037, 0.1816, 0.1924, 0.1635, 0.2080, 0.1501, 0.1973, 0.1819, 0.1934, 0.2539, 0.2438, 0.1631, 0.1815, 0.1861, 0.1475, 0.2311, 0.1984, 0.2967, 0.1624, 0.2154, 0.2082, 0.2238, 0.2422, 0.2074, 0.2472, 0.2252, 0.2085, 0.2039, 0.2507, 0.2045, 0.1438, 0.1707, 0.2160, 0.1796, 0.2084, 0.1873, 0.1802, 0.2173, 0.2591, 0.2055, 0.1441, 0.1216, 0.2212, 0.2674, 0.3343, 0.2418, 0.1869, 0.2481, 0.2015, 0.1408, 0.1273, 0.2892, 0.2287, 0.1959], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn1.bias&#39;, tensor([-0.2093, -0.1961, -0.2687, -0.2878, -0.2603, -0.2195, -0.1717, -0.2337, -0.2974, -0.2542, -0.1690, -0.2272, -0.2607, -0.1814, -0.2400, -0.2211, -0.1898, -0.3378, -0.3158, -0.2405, -0.1981, -0.2671, -0.1886, -0.2788, -0.2856, -0.2011, -0.4928, -0.3595, -0.1524, -0.1542, -0.3115, -0.2154, -0.1688, -0.2255, -0.3968, -0.3509, -0.2265, -0.4854, -0.2333, -0.0920, -0.2412, -0.2872, -0.2455, -0.2945, -0.1983, -0.1991, -0.3734, -0.2744, -0.1842, -0.2877, -0.0197, -0.3168, -0.1482, -0.2557, -0.2297, -0.0809, -0.2118, -0.2878, -0.2967, -0.6433, -0.2309, -0.2715, 0.0040, -0.1378, -0.2600, -0.2213, -0.1748, -0.1682, -0.3779, -0.1627, -0.2166, -0.3337, -0.2270, -0.4148, -0.4210, -0.1847, -0.1491, -0.2416, -0.1546, -0.2126, -0.2572, -0.2713, -0.2152, -0.2575, -0.1901, -0.2586, -0.2402, -0.1438, -0.1884, -0.3052, -0.2621, -0.3105, -0.2794, -0.4356, -0.1903, -0.1745, -0.3542, -0.1421, 0.1237, -0.1533, -0.1597, -0.2634, -0.3131, -0.2108, -0.2035, -0.2428, -0.2593, -0.2571, -0.2134, -0.2176, -0.2938, -0.2196, -0.1690, -0.2637, -0.1607, -0.1249, -0.4318, -0.1985, -0.2842, -0.2198, -0.2386, -0.2246, -0.2252, -0.1974, -0.1864, -0.1416, -0.2145, -0.2724, -0.1649, -0.2616, -0.3135, -0.1447, -0.1142, -0.2432, -0.0475, -0.1387, -0.3164, -0.1448, -0.3182, -0.2702, -0.2100, -0.1812, -0.3799, -0.3021, -0.2504, -0.1999, -0.2401, -0.2942, -0.1401, -0.2232, -0.2336, -0.1838, -0.1443, -0.2284, -0.0773, -0.1910, -0.3414, -0.2091, -0.2019, -0.1727, -0.3585, -0.2875, -0.2172, -0.1701, -0.3227, -0.1785, -0.2960, -0.2861, -0.2423, -0.1497, -0.2253, -0.1710, -0.2654, -0.2264, -0.1824, -0.0829, -0.2324, -0.2634, -0.1822, -0.0229, -0.3143, -0.2849, -0.3741, -0.2383, -0.2677, -0.2862, -0.1610, -0.2130, -0.1601, -0.2979, -0.1916, -0.2831, -0.2234, -0.4132, -0.2777, -0.1843, -0.2710, -0.3951, -0.1726, -0.2323, -0.2220, -0.2203, -0.1953, -0.1495, -0.1707, -0.1197, -0.2081, -0.1299, -0.2091, -0.1458, -0.1730, -0.2902, -0.3285, -0.1938, -0.2142, -0.2089, -0.0271, -0.2952, -0.2085, -0.3854, -0.0765, -0.2328, -0.1945, -0.2151, -0.3779, -0.2783, -0.2928, -0.2745, -0.2833, -0.2829, -0.2704, -0.2772, -0.0790, -0.1884, -0.2575, -0.1675, -0.2152, -0.2101, -0.1552, -0.2214, -0.2765, -0.1863, -0.0433, -0.0389, -0.2560, -0.2961, -0.5589, -0.2866, -0.2328, -0.3160, -0.1708, -0.0449, -0.0531, -0.4123, -0.2607, -0.2206], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn1.running_mean&#39;, tensor([-0.2950, 0.0408, -0.3651, -0.3896, -0.3731, -0.3235, -0.4112, -0.4505, -0.3073, 0.5832, -0.6931, -0.3343, -0.6619, -0.4374, -0.2477, -0.2666, -0.4751, -0.0889, -0.3049, -0.3205, -0.1406, -0.8231, -0.3186, -0.4411, -0.7929, -0.3561, -0.6748, -0.7208, -0.5157, -0.1971, -0.3381, -0.0950, -0.5447, -0.2842, -0.7546, -0.5455, -0.3150, -0.7120, -0.7297, -0.3979, -0.4643, -0.5154, -0.0982, -0.3958, -0.4157, 0.0190, -0.5765, -0.3140, -0.3228, -0.5197, -0.1735, -0.3515, -0.3671, -0.3668, -0.1808, -0.1659, -0.5752, -0.5346, -0.3903, -0.9079, -0.7340, -0.2415, -0.1736, -0.4888, -0.7591, -0.2910, -0.5710, -0.2966, -0.4742, -0.3308, -0.4762, -0.3682, -0.4506, -0.9770, -0.8314, -0.0677, -0.4063, -0.5664, -0.5131, -0.1414, -0.3687, -0.5393, -0.4203, -0.3283, -0.6511, -0.3329, -0.6097, -0.2934, -0.4553, -0.5678, -0.4506, -0.5362, -0.3791, -0.7107, -0.4536, 0.1790, -0.6538, -0.5329, 0.4221, -0.4324, -0.3088, -0.4170, -0.4771, -0.6416, -0.6350, -0.9037, -0.3999, -0.4085, -0.3774, -0.5715, -0.4866, -0.4670, -0.5801, -0.3687, -0.6693, -0.6695, -0.9043, -0.2338, -0.6381, -0.4337, -0.5720, -0.3541, -0.5061, -0.5004, -0.2746, -0.4047, -0.3899, -0.2419, -0.2657, -0.8743, -0.6765, -0.0678, -0.6266, -0.5301, 0.2175, -0.3051, -0.1929, -0.1220, -0.5477, -0.3509, -0.1420, -0.2310, -0.9039, -0.6415, -0.5007, -0.4492, -0.4841, -0.7494, -0.4265, -0.6349, -0.3927, -0.3396, -0.3986, -0.4276, -0.3638, 0.1666, -0.2481, 0.1490, -0.5698, -0.3131, -1.0188, -0.5539, -0.3770, -0.6611, -0.7500, -0.5076, -0.5446, -0.2492, -0.3680, -0.4510, -0.3135, -0.4420, -0.4840, -0.4978, -0.3651, -0.1883, -0.1803, -0.2354, -0.7282, -0.1746, -0.5367, -0.3069, -0.6603, -0.1557, -0.5470, -0.5952, -0.1318, -0.2776, -0.5319, -0.6422, -0.1874, -0.4230, -0.6019, -0.4429, -0.8226, -0.4155, -0.4533, -0.4691, -0.6445, -0.1614, -0.0731, -0.0986, -0.3256, -0.6965, -0.6225, -0.4369, -0.4283, -0.2937, -0.3331, -0.5739, -0.3356, -0.6938, -0.4835, -0.0328, -0.2998, -0.3444, -0.3691, -0.4778, -0.2782, -0.9310, -0.5618, -0.5235, -0.4122, -0.5274, -0.4922, -0.1559, -0.4650, -0.4501, -0.3736, -0.4050, -0.4151, -0.9161, -0.2393, -0.4438, -0.6720, -0.5911, -0.3468, -0.0961, -0.2781, -0.3960, -0.5549, -0.4021, -0.3252, -0.0957, -0.2534, -0.4159, -0.5831, -0.4873, -0.2227, -0.9535, -0.4892, -0.1990, -0.3372, -0.8894, -0.4093, -0.3142], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn1.running_var&#39;, tensor([0.1595, 0.1038, 0.1966, 0.1240, 0.1008, 0.1209, 0.1189, 0.1799, 0.1101, 0.1205, 0.2178, 0.1825, 0.1453, 0.1981, 0.0959, 0.1298, 0.1930, 0.0801, 0.1264, 0.0888, 0.2229, 0.2442, 0.1336, 0.1455, 0.0920, 0.0988, 0.1175, 0.1109, 0.1906, 0.1872, 0.1174, 0.1121, 0.1850, 0.1257, 0.1320, 0.1247, 0.1188, 0.1299, 0.1453, 0.1558, 0.1221, 0.0971, 0.0745, 0.0945, 0.1189, 0.1361, 0.1009, 0.1243, 0.1339, 0.1029, 0.2634, 0.1211, 0.1190, 0.1669, 0.1082, 0.1459, 0.1449, 0.1477, 0.1006, 0.5432, 0.1107, 0.1012, 0.2572, 0.1510, 0.1042, 0.1229, 0.1214, 0.1598, 0.0947, 0.1998, 0.3133, 0.1167, 0.1299, 0.1308, 0.0841, 0.1310, 0.1699, 0.1407, 0.1793, 0.1079, 0.1148, 0.1346, 0.1215, 0.1058, 0.2613, 0.1516, 0.1458, 0.1916, 0.1943, 0.1105, 0.1017, 0.1213, 0.1132, 0.0936, 0.1912, 0.1295, 0.1229, 0.1191, 0.1530, 0.2010, 0.1700, 0.0899, 0.0842, 0.2101, 0.1964, 0.2060, 0.1660, 0.0948, 0.1521, 0.1680, 0.2129, 0.1049, 0.1621, 0.1233, 0.2006, 0.2187, 0.1140, 0.1523, 0.1509, 0.1419, 0.1898, 0.1175, 0.1024, 0.1371, 0.1086, 0.2144, 0.1501, 0.0877, 0.2078, 0.1179, 0.1332, 0.2417, 0.1196, 0.0846, 0.2202, 0.1753, 0.1163, 0.1580, 0.1736, 0.1011, 0.0977, 0.0801, 0.1154, 0.1038, 0.1165, 0.1733, 0.1543, 0.1568, 0.1666, 0.1303, 0.1386, 0.1351, 0.1642, 0.1087, 0.1846, 0.1872, 0.1186, 0.1309, 0.1146, 0.1617, 0.2486, 0.0847, 0.1624, 0.1428, 0.1946, 0.1014, 0.1238, 0.0966, 0.0897, 0.1462, 0.1175, 0.2206, 0.0906, 0.1736, 0.1275, 0.1687, 0.1345, 0.1686, 0.1134, 0.2496, 0.1934, 0.1066, 0.1115, 0.1379, 0.1877, 0.0999, 0.1559, 0.1519, 0.2059, 0.1493, 0.1599, 0.1061, 0.1415, 0.0938, 0.1229, 0.2107, 0.1529, 0.1041, 0.1641, 0.1741, 0.1248, 0.1987, 0.1044, 0.1833, 0.1420, 0.2199, 0.1541, 0.1211, 0.1496, 0.1577, 0.1623, 0.1702, 0.1312, 0.0876, 0.0965, 0.1817, 0.3269, 0.1211, 0.1439, 0.1607, 0.1718, 0.2014, 0.1303, 0.1576, 0.0940, 0.0955, 0.1679, 0.1465, 0.1260, 0.0864, 0.1685, 0.1159, 0.1325, 0.1136, 0.1288, 0.1610, 0.1601, 0.1027, 0.0888, 0.1246, 0.2255, 0.1799, 0.1716, 0.1200, 0.1543, 0.1396, 0.1213, 0.1838, 0.1124, 0.1591, 0.2417, 0.1492, 0.2092, 0.1750, 0.1410, 0.1006], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.4.conv2.weight&#39;, tensor([[[[ 5.5858e-03, 1.7972e-03, -4.3860e-03], [ 2.9327e-02, 1.5030e-02, 7.9172e-03], [ 3.7087e-03, -8.7370e-03, 2.7308e-03]], [[-2.8659e-02, -3.2283e-02, -8.9523e-03], [ 2.6024e-02, 3.7097e-02, 3.0156e-04], [-4.2797e-03, 1.5654e-02, 1.0059e-03]], [[ 1.1296e-02, -1.1602e-02, 1.0187e-02], [ 7.2149e-03, 3.5882e-03, 2.0576e-02], [ 1.4003e-02, 7.8608e-03, 2.0869e-02]], ..., [[ 2.4053e-02, 1.2281e-02, 9.7996e-03], [-5.7398e-04, -6.8504e-03, -6.2477e-03], [-3.2779e-02, -2.1561e-02, -3.0215e-02]], [[ 1.2370e-02, 1.0023e-02, -4.4230e-03], [ 1.4949e-02, 2.8094e-03, -6.0969e-03], [-2.5380e-03, -9.2879e-03, 9.0901e-03]], [[-1.0482e-02, -2.0890e-02, -1.0558e-02], [ 4.6849e-03, -2.0454e-02, -4.4146e-03], [ 1.8286e-02, -2.4597e-02, -2.8960e-02]]], [[[ 1.3189e-03, -1.0579e-02, -8.8345e-03], [ 8.3218e-04, -1.9069e-02, -1.1808e-02], [-6.4940e-03, -2.2319e-02, -1.3048e-02]], [[ 1.3189e-02, 1.3110e-02, 3.1474e-02], [ 1.0600e-02, 5.5584e-03, 2.2359e-02], [ 5.0498e-03, 4.8495e-03, 1.3531e-02]], [[ 1.3898e-02, 2.1275e-02, 2.4485e-03], [-3.7355e-03, 1.3508e-02, -3.5250e-03], [-1.0077e-02, -1.6879e-03, -7.7069e-03]], ..., [[-2.4405e-03, -1.3228e-02, -7.0212e-03], [ 3.3631e-03, -3.4587e-03, -6.2482e-03], [ 8.3934e-05, -1.5089e-03, -6.3199e-03]], [[-1.1390e-02, -3.8640e-03, 9.9184e-03], [-1.7703e-02, -1.2933e-02, -6.6698e-03], [-1.2978e-02, -2.7362e-02, -7.3122e-03]], [[ 8.8641e-03, -5.0715e-03, -6.3254e-03], [-1.9911e-02, -1.7824e-02, 2.2821e-03], [-3.8445e-02, -3.8009e-02, 4.8781e-03]]], [[[ 4.9792e-05, -7.1117e-03, 1.5126e-03], [-2.1845e-03, -9.3999e-03, -3.0714e-04], [ 1.2077e-02, 8.1731e-03, 1.3614e-02]], [[ 6.5223e-03, 7.7274e-03, 3.1484e-03], [-2.0457e-03, -1.6131e-02, -9.1339e-03], [-6.9207e-03, -1.9268e-02, -1.9193e-02]], [[-1.8296e-02, -5.2188e-03, -8.8356e-03], [-1.9452e-02, -8.5531e-03, -9.3325e-03], [-1.6181e-02, -8.1539e-03, 5.8257e-03]], ..., [[ 6.8018e-03, -2.2462e-03, -1.0831e-02], [ 1.0337e-02, 5.7069e-03, 5.1192e-03], [-8.4068e-04, -2.0646e-03, -8.5087e-03]], [[-1.6420e-02, -1.9462e-02, -2.8781e-02], [-1.8876e-02, -3.3276e-02, -2.8945e-02], [-1.3215e-02, -2.4284e-02, -2.7972e-02]], [[ 1.4546e-03, -2.7880e-02, -2.3149e-02], [ 5.1103e-03, -2.7698e-02, -1.8214e-03], [-4.0599e-03, -2.0183e-02, 2.5035e-04]]], ..., [[[ 4.6200e-03, 5.1823e-04, 7.1307e-03], [ 5.6110e-03, -7.0421e-03, -3.1671e-03], [-3.9745e-03, -2.0034e-02, -6.4185e-03]], [[ 3.2543e-03, -6.9665e-03, -1.4577e-02], [-3.1819e-04, 4.9368e-03, -8.1140e-03], [ 2.3345e-02, 3.7232e-02, 1.9298e-02]], [[ 1.8655e-02, 2.1050e-02, 1.0746e-02], [ 9.1325e-03, -1.4688e-03, 1.1581e-02], [ 1.9889e-02, 1.0897e-02, 1.7000e-02]], ..., [[ 6.9255e-04, 6.7112e-03, 1.1007e-02], [-2.2895e-03, 3.9968e-03, 4.0342e-03], [ 5.5101e-04, 2.1373e-03, -3.8607e-04]], [[-8.3929e-03, -6.2995e-03, -4.3062e-03], [-5.2290e-03, -9.4689e-03, -1.3121e-02], [-5.1816e-03, -1.5727e-02, -2.8433e-02]], [[ 1.0443e-02, 3.9662e-04, -1.3231e-02], [ 9.6761e-05, 1.2340e-03, -1.2506e-03], [-1.4384e-02, 2.3447e-03, 5.8462e-03]]], [[[-1.5021e-02, -2.8971e-02, -1.5663e-02], [-1.3623e-02, -3.4210e-02, -1.1056e-02], [ 3.4837e-03, -2.4474e-03, -7.9844e-03]], [[ 1.9523e-02, 8.3699e-03, -2.8023e-03], [-2.9612e-02, -2.8076e-02, -1.8075e-02], [-1.9871e-02, -1.7703e-02, -6.2647e-03]], [[ 8.4850e-03, -6.6810e-03, 5.6271e-03], [ 1.7269e-02, -8.8414e-03, 2.0184e-02], [ 7.3821e-05, -1.7281e-02, 6.1610e-03]], ..., [[-1.4586e-02, -8.9665e-03, -8.4270e-03], [ 5.4089e-03, 1.4219e-03, -3.0204e-03], [ 1.5533e-02, 1.8571e-02, 1.1327e-02]], [[-2.5171e-05, 3.5312e-03, -8.0250e-03], [-1.8444e-02, 1.4021e-02, 1.7157e-02], [ 1.2945e-04, 7.5311e-03, 8.9252e-03]], [[ 4.5761e-03, -3.7900e-03, 2.7034e-03], [ 6.9502e-03, -3.7291e-03, 7.7179e-03], [-9.0000e-03, -1.5072e-03, 2.5517e-02]]], [[[-3.3841e-03, -4.7087e-03, 2.1581e-03], [-3.7472e-03, -7.8908e-03, -3.7690e-03], [-7.6959e-03, -1.0940e-02, -9.5636e-03]], [[ 6.8021e-03, 6.4502e-03, 3.4019e-03], [ 1.0812e-02, 1.5723e-02, 1.1962e-02], [-3.4022e-03, 1.5079e-03, 8.1604e-03]], [[-1.5781e-03, -2.6990e-03, 5.7962e-03], [-2.6537e-03, -1.0036e-02, 5.6310e-03], [-1.5644e-04, -4.3100e-03, 3.1405e-03]], ..., [[-7.8264e-03, -1.6915e-02, -1.2841e-02], [-1.0724e-02, -1.9557e-02, -1.4552e-02], [-1.1841e-02, -1.7888e-02, -1.2734e-02]], [[-4.0722e-03, -2.7063e-03, 2.4226e-03], [-8.5955e-03, -1.3430e-03, 1.1413e-02], [-2.1382e-02, -1.2834e-02, 1.9368e-03]], [[-1.1948e-02, -2.9922e-03, -2.4149e-03], [-1.3748e-02, -4.9301e-03, -2.7228e-03], [-1.0150e-02, -1.5169e-03, -1.6327e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn2.weight&#39;, tensor([ 0.3250, 0.2014, 0.1084, 0.0076, 0.2806, 0.0924, 0.2238, 0.0600, 0.0955, 0.0680, 0.0992, 0.0701, 0.1588, 0.0673, 0.1227, 0.1228, 0.2052, 0.0835, 0.0711, 0.1020, 0.1179, 0.0900, 0.3385, 0.1074, 0.1631, 0.0855, 0.1834, 0.1307, -0.0353, 0.1078, 0.2132, 0.1363, 0.2768, 0.0769, 0.2730, 0.0666, 0.1530, 0.1722, 0.0291, 0.0991, 0.1084, 0.3771, 0.0443, 0.1298, 0.1924, 0.1598, 0.1312, 0.2891, 0.0283, 0.0851, 0.1098, 0.1009, 0.2942, 0.1586, 0.3127, 0.0295, 0.1550, 0.1370, 0.2174, 0.2747, 0.2804, 0.1179, 0.3467, 0.1062, 0.1833, 0.2680, 0.1679, 0.1056, 0.2690, 0.1667, 0.1996, 0.0626, 0.0845, 0.1119, 0.1174, 0.2132, 0.1405, 0.0947, 0.0860, 0.2040, 0.1980, 0.3347, 0.2535, 0.1451, 0.1203, 0.0812, 0.0911, 0.3974, 0.1654, 0.1337, 0.1637, 0.0585, 0.0509, 0.0691, 0.1258, 0.2119, 0.1257, 0.2180, 0.0728, 0.0629, 0.1057, 0.2296, 0.3847, 0.1640, 0.3795, 0.3620, 0.1464, 0.1516, 0.1449, 0.1057, 0.2463, 0.0655, 0.4421, 0.2436, 0.0999, 0.1481, 0.0358, 0.1539, 0.0955, 0.1189, 0.0549, 0.2278, 0.0432, 0.2505, 0.0999, 0.0624, 0.4660, 0.1264, 0.1273, 0.0929, 0.1352, 0.1185, 0.2135, 0.1794, 0.2006, 0.1730, 0.1049, 0.2608, 0.0762, 0.1425, 0.1122, 0.1097, 0.2285, 0.0514, 0.2389, 0.2220, 0.0749, 0.1587, 0.2037, 0.0853, 0.1763, 0.3263, 0.1042, 0.1161, 0.1900, 0.2522, 0.1499, 0.1103, 0.2269, 0.2985, 0.3538, 0.1989, 0.4032, 0.1246, 0.1148, 0.3891, 0.2612, 0.1205, 0.2567, 0.1410, 0.2002, 0.1343, 0.1328, 0.1530, 0.3360, 0.1657, 0.3234, 0.0975, 0.2156, 0.1762, 0.3747, 0.3235, 0.4425, 0.2527, 0.1737, 0.1794, 0.2820, 0.4479, 0.1093, 0.1154, 0.0941, 0.0910, 0.0870, 0.1257, 0.0711, 0.2136, 0.2126, 0.2455, 0.1151, 0.2565, 0.3875, 0.0947, 0.1955, 0.1153, 0.1109, 0.0409, 0.1560, 0.1838, 0.0851, 0.3653, 0.1125, 0.1274, 0.0986, 0.0629, 0.2805, 0.3562, 0.3074, 0.1447, 0.1413, 0.0612, 0.2798, 0.2609, 0.0699, 0.2530, 0.2105, 0.0941, 0.1202, 0.2367, 0.1373, 0.2913, 0.1490, 0.4143, 0.1062, 0.1274, 0.3580, 0.0712, 0.0393, 0.1060, 0.1954, 0.0421, 0.1382, 0.2301, 0.1127, 0.1991, 0.3133, 0.1650, 0.1355, 0.2120, 0.0555, 0.1178, 0.1030, 0.3141, 0.0657, 0.1080, 0.1206, 0.0502], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn2.bias&#39;, tensor([-0.1929, -0.1224, -0.0704, -0.0014, -0.2416, -0.0816, 0.0466, -0.0252, -0.0586, -0.0433, -0.0702, -0.0574, -0.1457, -0.0415, -0.0752, -0.1075, -0.1692, -0.0294, -0.0271, -0.0642, -0.0829, -0.0228, -0.2647, -0.0584, -0.0824, -0.0421, -0.0737, -0.0512, 0.0179, -0.0954, -0.2363, -0.1002, -0.1838, -0.0834, -0.1225, 0.0065, -0.1240, -0.1407, -0.0085, -0.0888, -0.0299, -0.1304, -0.0194, -0.0288, -0.1593, -0.0828, -0.0946, -0.1789, -0.0178, -0.0558, -0.0437, -0.0570, -0.2871, -0.1392, -0.2250, 0.0014, -0.1373, -0.0607, -0.1731, -0.1321, -0.2135, -0.0815, -0.3123, -0.1019, -0.1470, -0.2715, -0.1484, -0.0873, -0.0881, -0.2124, -0.1500, -0.0249, -0.0327, -0.0859, -0.0762, -0.1825, -0.0949, -0.0697, -0.0210, -0.2225, -0.0975, -0.1889, -0.2779, -0.1170, -0.0101, -0.0613, -0.0450, -0.2639, -0.1410, -0.0811, -0.1419, 0.0064, -0.0186, -0.0419, -0.0820, -0.1755, -0.0554, -0.1921, -0.0491, -0.0120, -0.0409, -0.1969, -0.2677, -0.0031, -0.3008, -0.2975, -0.0908, -0.1032, -0.0675, -0.0991, -0.1060, 0.0067, -0.3964, -0.1456, -0.0326, -0.1185, 0.0021, -0.1663, -0.0817, -0.0775, -0.0309, -0.1259, -0.0132, -0.1871, -0.0624, -0.0331, -0.3521, -0.1195, -0.0924, -0.0163, -0.1124, -0.0651, -0.1415, 0.0976, -0.2322, -0.1061, -0.0939, -0.2037, -0.0336, -0.0922, -0.0264, 0.0680, -0.1586, -0.0447, -0.2031, -0.2854, -0.0184, -0.1404, -0.1246, -0.0027, -0.0900, -0.2231, -0.0664, -0.0698, -0.1219, -0.2178, 0.0417, -0.0975, -0.1714, -0.2623, -0.2407, -0.0632, -0.2523, -0.0724, -0.0683, -0.2147, -0.2282, -0.0388, -0.1925, -0.1446, -0.2184, -0.0882, 0.0147, -0.0557, -0.2795, -0.1478, -0.1607, -0.0447, -0.1561, -0.1584, -0.1410, -0.3747, -0.3199, -0.1774, -0.1321, 0.0200, -0.2301, -0.3685, -0.0744, -0.0708, -0.0568, -0.0606, -0.0946, -0.0760, -0.0528, -0.1674, -0.1424, 0.1046, -0.0595, -0.2172, -0.2574, -0.0580, -0.1531, -0.0862, -0.0278, 0.0007, -0.0877, -0.1976, -0.0515, -0.1466, -0.0319, -0.0853, -0.0350, -0.0043, -0.2874, -0.3544, -0.1782, -0.1114, -0.1029, 0.0041, -0.1771, -0.2205, -0.0342, -0.2080, -0.1373, -0.0315, -0.1052, -0.1083, -0.0900, -0.1453, -0.1413, -0.1421, -0.0381, -0.0571, -0.3266, -0.0423, -0.0063, -0.1081, -0.1298, -0.0212, -0.0669, 0.1005, -0.0421, -0.1475, -0.1937, -0.1212, -0.1132, -0.1548, -0.0051, -0.0508, -0.0196, -0.2900, -0.0480, -0.0990, -0.1124, -0.0048], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn2.running_mean&#39;, tensor([-0.0556, -0.0474, -0.0499, 0.0061, -0.0709, -0.0124, 0.0093, -0.0097, -0.0356, -0.0242, -0.0454, -0.0100, -0.0473, -0.0309, -0.0248, -0.0292, -0.0499, -0.0035, -0.0112, -0.0560, -0.0380, -0.0194, -0.0754, -0.0598, -0.0896, -0.0198, 0.1465, -0.0372, -0.0003, -0.0148, -0.0118, -0.0670, -0.1046, -0.0420, -0.0201, -0.0455, 0.0018, -0.0031, -0.0235, -0.0348, -0.0194, -0.0220, -0.0270, 0.0093, -0.0578, 0.0004, -0.0560, -0.0324, -0.0321, -0.0254, -0.0413, -0.0403, -0.0554, -0.0350, -0.0564, -0.0117, -0.0262, -0.0552, -0.0689, -0.0766, -0.0395, -0.0345, -0.0715, -0.0467, -0.0151, -0.0958, -0.0262, -0.0392, -0.0111, -0.0480, -0.0412, -0.0152, -0.0119, -0.0184, -0.0243, -0.0489, -0.0520, -0.0661, -0.0383, -0.0385, -0.0562, -0.0298, -0.0809, -0.0320, -0.0315, -0.0143, -0.0021, -0.0575, -0.0235, -0.0288, -0.0504, -0.0295, -0.0063, -0.0338, -0.0198, -0.0350, -0.0392, -0.0392, -0.0269, -0.0076, -0.0346, -0.0179, -0.0254, -0.0412, -0.0458, -0.0537, -0.0434, -0.0511, -0.0542, -0.0149, -0.0726, 0.0025, -0.0699, -0.0574, -0.0290, -0.0525, -0.0230, -0.0373, -0.0189, -0.0573, -0.0141, -0.0549, 0.0011, -0.0538, -0.0121, -0.0365, -0.1001, -0.0456, -0.0354, -0.0240, -0.0518, -0.0438, -0.0420, 0.0603, -0.0542, -0.0397, -0.0217, -0.0381, -0.0378, -0.0395, -0.0386, -0.0087, -0.0307, -0.0019, -0.0529, -0.0113, 0.0252, -0.0413, -0.0572, -0.0154, -0.0235, -0.0496, -0.0272, -0.0315, 0.0266, -0.0647, 0.0068, -0.0338, -0.0170, -0.0328, -0.0514, -0.0610, -0.0787, -0.0404, -0.0063, -0.0730, -0.0226, -0.0467, -0.0451, -0.0391, -0.0641, -0.0464, 0.0345, -0.0588, -0.0608, -0.0417, -0.0211, -0.0316, -0.0382, -0.0571, -0.0708, -0.0415, -0.0679, -0.0633, -0.0935, -0.0211, -0.0183, -0.0500, -0.0277, -0.0430, -0.0452, -0.0271, -0.0257, -0.0250, -0.0221, -0.0321, -0.0500, -0.0752, -0.0264, -0.0721, -0.0413, -0.0348, -0.0799, -0.0512, -0.0727, -0.0080, -0.0260, -0.0452, -0.0018, -0.0406, -0.0119, -0.0447, 0.0031, -0.0364, -0.0583, -0.0699, -0.0656, -0.0295, -0.0396, 0.0069, -0.0633, -0.0735, -0.0111, -0.0554, -0.0396, -0.0524, -0.0535, -0.0201, -0.0574, -0.0361, -0.0317, -0.0414, -0.0290, -0.0415, -0.0447, -0.0509, -0.0200, -0.0497, -0.0781, -0.0192, -0.0396, 0.1469, -0.0132, -0.0337, -0.0489, -0.0284, -0.0360, -0.0493, -0.0254, -0.0607, -0.0522, -0.0713, -0.0317, -0.0437, -0.0180, -0.0262], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn2.running_var&#39;, tensor([0.0061, 0.0031, 0.0025, 0.0010, 0.0029, 0.0021, 0.0069, 0.0011, 0.0022, 0.0018, 0.0020, 0.0013, 0.0024, 0.0015, 0.0017, 0.0014, 0.0038, 0.0022, 0.0010, 0.0019, 0.0027, 0.0015, 0.0043, 0.0022, 0.0022, 0.0035, 0.0058, 0.0022, 0.0011, 0.0016, 0.0025, 0.0024, 0.0039, 0.0013, 0.0044, 0.0023, 0.0033, 0.0036, 0.0012, 0.0013, 0.0033, 0.0106, 0.0024, 0.0047, 0.0026, 0.0026, 0.0027, 0.0031, 0.0015, 0.0021, 0.0029, 0.0028, 0.0025, 0.0025, 0.0084, 0.0015, 0.0026, 0.0030, 0.0030, 0.0036, 0.0042, 0.0033, 0.0042, 0.0012, 0.0041, 0.0037, 0.0028, 0.0020, 0.0049, 0.0026, 0.0035, 0.0017, 0.0015, 0.0011, 0.0025, 0.0031, 0.0028, 0.0024, 0.0025, 0.0019, 0.0024, 0.0061, 0.0032, 0.0023, 0.0047, 0.0024, 0.0015, 0.0065, 0.0026, 0.0028, 0.0024, 0.0016, 0.0010, 0.0019, 0.0035, 0.0032, 0.0028, 0.0043, 0.0019, 0.0018, 0.0022, 0.0028, 0.0071, 0.0041, 0.0046, 0.0046, 0.0031, 0.0031, 0.0028, 0.0016, 0.0034, 0.0019, 0.0088, 0.0037, 0.0021, 0.0023, 0.0011, 0.0027, 0.0013, 0.0041, 0.0010, 0.0036, 0.0009, 0.0044, 0.0021, 0.0019, 0.0067, 0.0021, 0.0014, 0.0025, 0.0029, 0.0017, 0.0025, 0.0088, 0.0021, 0.0027, 0.0020, 0.0034, 0.0021, 0.0022, 0.0024, 0.0028, 0.0035, 0.0018, 0.0030, 0.0021, 0.0019, 0.0018, 0.0030, 0.0018, 0.0034, 0.0042, 0.0020, 0.0016, 0.0031, 0.0040, 0.0033, 0.0021, 0.0035, 0.0033, 0.0045, 0.0040, 0.0062, 0.0024, 0.0020, 0.0068, 0.0037, 0.0024, 0.0030, 0.0019, 0.0023, 0.0030, 0.0030, 0.0026, 0.0033, 0.0024, 0.0097, 0.0019, 0.0050, 0.0039, 0.0096, 0.0041, 0.0067, 0.0037, 0.0029, 0.0050, 0.0042, 0.0076, 0.0019, 0.0031, 0.0017, 0.0018, 0.0017, 0.0016, 0.0020, 0.0023, 0.0034, 0.0075, 0.0025, 0.0038, 0.0046, 0.0022, 0.0034, 0.0021, 0.0060, 0.0033, 0.0024, 0.0021, 0.0020, 0.0058, 0.0019, 0.0024, 0.0018, 0.0018, 0.0024, 0.0032, 0.0055, 0.0020, 0.0028, 0.0022, 0.0039, 0.0033, 0.0015, 0.0035, 0.0032, 0.0037, 0.0027, 0.0064, 0.0032, 0.0071, 0.0025, 0.0119, 0.0027, 0.0030, 0.0051, 0.0013, 0.0014, 0.0022, 0.0028, 0.0018, 0.0025, 0.0084, 0.0020, 0.0032, 0.0043, 0.0034, 0.0025, 0.0033, 0.0018, 0.0036, 0.0021, 0.0032, 0.0019, 0.0022, 0.0024, 0.0016], device=&#39;cuda:0&#39;)), (&#39;0.6.4.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.5.conv1.weight&#39;, tensor([[[[ 1.5741e-02, 5.8377e-03, -4.3388e-03], [ 2.7065e-02, 3.0332e-02, 2.2832e-02], [-1.2844e-02, -7.2966e-03, -2.4852e-03]], [[-1.2338e-02, -4.0433e-03, -1.2545e-02], [-1.0901e-02, -1.3455e-02, -6.6581e-03], [ 1.3017e-02, 4.4720e-03, 1.0373e-02]], [[ 1.3388e-02, 1.3544e-02, 9.2269e-03], [ 2.1156e-02, 2.2984e-02, 1.1154e-02], [ 1.2979e-02, 1.3810e-02, -8.0829e-05]], ..., [[-8.5642e-04, 1.2416e-03, -3.2909e-03], [ 1.0214e-02, 4.4467e-03, 5.8928e-03], [-9.5319e-03, 9.0837e-03, 1.6891e-02]], [[-8.8660e-03, -2.0896e-02, -2.0092e-02], [-1.1597e-02, -1.7622e-02, -7.0599e-03], [ 9.0975e-03, 7.6042e-03, 1.7900e-02]], [[ 2.0957e-03, 9.3823e-03, 7.8033e-03], [-3.1106e-03, -4.6970e-03, 6.6072e-03], [-2.1791e-02, -1.9737e-02, -9.4633e-03]]], [[[ 2.7649e-02, 2.6081e-02, 9.8379e-03], [-1.0257e-02, -1.5424e-02, -1.7735e-02], [-1.6705e-02, -1.8608e-02, -1.0772e-02]], [[-9.2298e-03, -1.8076e-02, 1.6748e-02], [ 9.2019e-04, -8.3910e-03, 2.4112e-02], [-1.8848e-03, -2.6530e-02, 7.9493e-03]], [[ 2.6191e-03, -7.2087e-03, 2.6225e-04], [ 2.1076e-02, 1.3509e-02, 1.4912e-02], [ 1.7885e-02, 1.5228e-02, 1.2034e-02]], ..., [[ 1.6374e-02, -4.8527e-03, -1.9252e-02], [ 1.6936e-02, 9.7950e-03, -6.0532e-03], [ 2.3975e-02, 1.6907e-02, 1.9608e-03]], [[-4.6397e-03, -3.6866e-02, -1.3299e-02], [ 2.4456e-02, 4.4580e-02, 2.1204e-02], [ 2.6709e-02, 5.6817e-02, 1.3782e-02]], [[-1.2217e-02, 2.0507e-03, -1.3862e-02], [ 6.6802e-03, 2.1250e-02, -1.6895e-03], [ 2.0221e-03, 6.9674e-03, -5.5965e-03]]], [[[-1.5408e-02, 6.0568e-03, -1.9634e-02], [-3.9796e-03, -1.3891e-02, -1.3868e-02], [ 8.8690e-03, 1.0003e-02, 2.2063e-02]], [[-1.9377e-02, -4.1058e-02, -8.7823e-04], [-2.1468e-02, -3.0109e-02, 5.0825e-03], [-7.7974e-03, -1.4856e-02, 2.1524e-03]], [[-1.5529e-02, -2.0002e-02, -3.1052e-03], [-1.0730e-02, -1.4602e-02, -6.2353e-03], [ 1.0371e-02, 1.7995e-02, 7.2456e-03]], ..., [[-1.5585e-02, -1.3350e-02, -2.3909e-02], [-2.4896e-02, -1.8803e-02, -2.0023e-02], [-2.6350e-02, -2.4728e-02, -1.4230e-03]], [[ 1.9370e-02, 5.0814e-02, -2.7454e-02], [ 1.4325e-02, 1.4556e-01, -1.9256e-02], [-4.0388e-02, -1.7192e-02, -4.4687e-02]], [[-3.0271e-02, -3.7127e-02, -2.6487e-02], [-1.6396e-02, -1.0996e-02, -1.5760e-02], [-3.0352e-03, -4.1179e-03, -2.3027e-02]]], ..., [[[-6.9832e-03, 1.2445e-02, -1.5604e-03], [-6.9900e-03, -1.9315e-02, -2.1345e-02], [ 1.0821e-03, -5.4793e-03, 1.6386e-03]], [[-1.0492e-02, -1.6978e-02, -1.8798e-02], [-5.8790e-03, -2.1332e-02, -1.0741e-02], [ 1.6817e-02, -1.6752e-02, -3.5592e-03]], [[ 3.0375e-03, -6.9944e-03, -8.4673e-03], [-2.3625e-04, -3.2467e-03, -8.5824e-03], [-5.2253e-03, 5.2044e-04, -1.0882e-03]], ..., [[ 2.3245e-02, 1.1369e-02, -5.3587e-03], [ 4.8457e-03, -4.2022e-04, -1.5873e-02], [ 1.9286e-02, 8.3256e-03, 3.3735e-03]], [[-1.0049e-02, -6.0525e-03, -1.0808e-02], [-3.6277e-03, -3.5518e-03, -6.5426e-03], [-9.7123e-03, 1.5427e-02, 4.2783e-04]], [[ 4.2967e-03, 9.1880e-04, 1.6618e-03], [-8.1407e-04, -8.0474e-03, -5.6514e-03], [-1.5045e-02, -2.5253e-02, -2.9169e-02]]], [[[-3.6772e-02, -1.5890e-02, 1.9077e-02], [-2.6545e-02, -2.3147e-02, -2.0741e-02], [ 2.0430e-03, 9.0986e-03, 4.4104e-05]], [[-8.6149e-03, 1.9885e-02, 3.1067e-02], [-1.5132e-02, -1.1256e-02, 3.4655e-03], [-9.1873e-03, -7.2766e-03, -1.0610e-02]], [[ 8.5238e-04, 5.7279e-03, 1.8606e-02], [ 1.2036e-02, 2.1756e-02, 2.0971e-02], [ 4.1848e-03, 4.1465e-03, -3.2877e-03]], ..., [[-1.1632e-02, -3.8122e-05, 4.4533e-02], [ 1.2297e-03, 1.3045e-02, 1.7200e-02], [-3.0641e-03, 1.3284e-03, -1.2934e-02]], [[-2.0270e-02, 1.6886e-03, 6.1883e-03], [-3.0179e-02, 3.3838e-05, 4.4262e-02], [-6.2266e-04, -4.8788e-03, -1.7449e-02]], [[-4.4648e-03, 5.1095e-03, 6.2548e-03], [ 1.8529e-03, -6.5113e-03, -5.4571e-03], [-1.0452e-02, -2.0011e-02, -1.5845e-02]]], [[[-2.3522e-03, 2.2737e-02, -3.4433e-03], [ 7.0880e-03, 3.3955e-02, 6.5565e-03], [-6.6169e-03, -2.1405e-02, -1.4931e-02]], [[-6.0608e-03, -6.2448e-03, -5.7554e-04], [-1.0988e-02, -1.4556e-02, 1.9594e-03], [ 5.1480e-03, 7.0645e-03, 3.6445e-03]], [[ 2.6476e-03, 7.4684e-03, -8.6048e-03], [ 1.6702e-02, 2.2833e-02, 9.5185e-03], [ 1.0952e-02, 2.3003e-02, 5.0700e-03]], ..., [[ 9.1276e-03, -2.3058e-03, -1.9324e-03], [ 1.3978e-02, 1.6311e-02, 1.8823e-02], [ 1.6001e-02, 1.9013e-02, 5.1181e-03]], [[-1.4788e-02, -1.3284e-02, -1.4738e-02], [-1.5909e-02, -1.7084e-02, -7.9607e-03], [-1.9338e-02, 7.4463e-03, 4.7642e-03]], [[-8.8903e-03, -1.0494e-02, -1.0680e-02], [-1.2709e-02, -1.5106e-02, -1.2055e-02], [-8.1887e-03, -6.9039e-03, -1.1193e-02]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn1.weight&#39;, tensor([0.2859, 0.1961, 0.2676, 0.2390, 0.2291, 0.2439, 0.2226, 0.2462, 0.2394, 0.2158, 0.1956, 0.1569, 0.2106, 0.2204, 0.1847, 0.2327, 0.2502, 0.2134, 0.2707, 0.2356, 0.2575, 0.2535, 0.2427, 0.2254, 0.2091, 0.2501, 0.2594, 0.2305, 0.2228, 0.2298, 0.2038, 0.2220, 0.2135, 0.1864, 0.2124, 0.2009, 0.1925, 0.2799, 0.1973, 0.2172, 0.1875, 0.2303, 0.2675, 0.1796, 0.1873, 0.2338, 0.2257, 0.2243, 0.1910, 0.2103, 0.2520, 0.2135, 0.2224, 0.2078, 0.2326, 0.2255, 0.2323, 0.2132, 0.1948, 0.2200, 0.2416, 0.2291, 0.2334, 0.2314, 0.2158, 0.2102, 0.1986, 0.2095, 0.1935, 0.2004, 0.2604, 0.2607, 0.2267, 0.2506, 0.2333, 0.2678, 0.1863, 0.2262, 0.2299, 0.2413, 0.2540, 0.2144, 0.2111, 0.2274, 0.2098, 0.2325, 0.2224, 0.2131, 0.2139, 0.2182, 0.2192, 0.2019, 0.2549, 0.2208, 0.2794, 0.2278, 0.1878, 0.2705, 0.2075, 0.2001, 0.2564, 0.2122, 0.2303, 0.2212, 0.2448, 0.2032, 0.2339, 0.2259, 0.2024, 0.2398, 0.1923, 0.2042, 0.2468, 0.2416, 0.2774, 0.2135, 0.2318, 0.2726, 0.2292, 0.2161, 0.1910, 0.1963, 0.2378, 0.2218, 0.1904, 0.2227, 0.1741, 0.2346, 0.1859, 0.2023, 0.2563, 0.2059, 0.2280, 0.1697, 0.1994, 0.2177, 0.2260, 0.2307, 0.2749, 0.2533, 0.2205, 0.1793, 0.1941, 0.2045, 0.2551, 0.2208, 0.1842, 0.2432, 0.2362, 0.1938, 0.2250, 0.1918, 0.1940, 0.2374, 0.2314, 0.2371, 0.1883, 0.1720, 0.2387, 0.2132, 0.2335, 0.2131, 0.2691, 0.2111, 0.2745, 0.2229, 0.1972, 0.1988, 0.2570, 0.1885, 0.1882, 0.2059, 0.2215, 0.2191, 0.2008, 0.2000, 0.2594, 0.2229, 0.1609, 0.2826, 0.2063, 0.2146, 0.2658, 0.2252, 0.2862, 0.2835, 0.1740, 0.2371, 0.2453, 0.2545, 0.2157, 0.2552, 0.2095, 0.2248, 0.2768, 0.1901, 0.2415, 0.3162, 0.1919, 0.2504, 0.2289, 0.2167, 0.2448, 0.2059, 0.1955, 0.2043, 0.2420, 0.2870, 0.2316, 0.2081, 0.1795, 0.2324, 0.2049, 0.2614, 0.1968, 0.2550, 0.2494, 0.2197, 0.2448, 0.1983, 0.2529, 0.2169, 0.2294, 0.2107, 0.2090, 0.2226, 0.2058, 0.2075, 0.2148, 0.2157, 0.1806, 0.2383, 0.1688, 0.2399, 0.2368, 0.2389, 0.2112, 0.2277, 0.2054, 0.2331, 0.2375, 0.2409, 0.2427, 0.1995, 0.2095, 0.2233, 0.2156, 0.2326, 0.2537, 0.1927, 0.1888, 0.1985, 0.2742, 0.2465, 0.2452, 0.2307], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn1.bias&#39;, tensor([-0.2749, -0.2969, -0.3552, -0.2695, -0.2383, -0.2671, -0.1969, -0.2441, -0.3217, -0.1863, -0.2475, -0.0723, -0.2108, -0.2487, -0.1668, -0.1481, -0.2822, -0.2416, -0.2775, -0.2148, -0.2816, -0.2443, -0.3423, -0.2083, -0.2318, -0.1794, -0.3921, -0.1262, -0.1579, -0.2572, -0.1427, -0.1752, -0.1704, -0.2519, -0.1972, -0.2592, -0.0358, -0.4490, -0.2108, -0.2096, -0.1954, -0.2910, -0.2911, -0.1746, -0.1823, -0.2654, -0.2687, -0.2007, -0.1405, -0.2244, -0.2974, -0.2626, -0.2282, -0.1950, -0.2830, -0.2278, -0.2457, -0.2270, -0.2186, -0.2264, -0.2335, -0.2291, -0.2553, -0.3019, -0.2663, -0.1916, -0.1417, -0.2158, -0.1906, -0.1569, -0.2673, -0.2296, -0.2276, -0.2629, -0.2679, -0.3116, -0.1679, -0.3060, -0.2346, -0.2435, -0.2736, -0.2887, -0.2281, -0.2745, -0.2389, -0.2083, -0.2854, -0.2748, -0.2138, -0.2602, -0.2106, -0.1581, -0.3058, -0.1769, -0.3309, -0.2681, -0.0434, -0.2801, -0.2103, -0.2544, -0.3198, -0.2593, -0.1915, -0.1903, -0.1679, -0.1540, -0.2617, -0.2239, -0.1980, -0.2242, -0.1471, -0.2230, -0.2774, -0.2587, -0.4141, -0.2180, -0.2430, -0.3459, -0.2512, -0.2238, -0.1287, -0.1771, -0.2065, -0.1750, -0.1409, -0.2296, -0.0590, -0.2872, -0.1485, -0.2134, -0.2634, -0.1295, -0.2772, -0.0849, -0.1593, -0.1648, -0.2187, -0.2693, -0.2638, -0.2440, -0.2250, -0.2229, -0.1467, -0.1627, -0.1861, -0.2090, -0.1588, -0.2589, -0.2687, -0.1569, -0.1823, -0.2199, -0.1956, -0.2296, -0.2274, -0.2213, -0.1754, -0.1709, -0.1334, -0.2003, -0.2004, -0.2023, -0.1996, -0.2227, -0.3611, -0.2696, -0.1391, -0.1529, -0.3179, -0.2196, -0.1461, -0.1787, -0.2970, -0.2360, -0.2457, -0.0970, -0.2805, -0.1572, -0.0518, -0.2729, -0.2675, -0.2343, -0.2637, -0.2372, -0.3284, -0.2030, -0.1699, -0.2460, -0.3094, -0.2520, -0.1762, -0.2300, -0.3100, -0.2190, -0.3409, -0.1598, -0.3556, -0.4221, -0.2043, -0.2978, -0.2579, -0.2343, -0.2837, -0.1563, -0.1358, -0.2211, -0.2638, -0.2205, -0.3048, -0.2603, -0.2482, -0.2899, -0.1720, -0.2981, -0.2157, -0.1702, -0.2894, -0.1863, -0.2007, -0.2509, -0.3167, -0.2417, -0.2791, -0.1909, -0.1647, -0.2061, -0.1803, -0.2714, -0.2420, -0.1398, -0.1341, -0.2746, -0.0891, -0.2075, -0.2473, -0.2785, -0.1915, -0.2393, -0.1879, -0.2760, -0.2169, -0.2516, -0.2881, -0.2171, -0.1777, -0.2664, -0.2120, -0.2292, -0.3106, -0.2043, -0.1417, -0.2688, -0.3041, -0.2621, -0.2744, -0.2626], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn1.running_mean&#39;, tensor([-0.2830, -0.0078, -0.5902, -0.4008, -0.5417, -0.5370, -0.4667, -0.4029, -0.4257, -0.5035, 0.3877, -0.3840, 0.0276, -0.0023, 0.0805, -0.4113, -0.6280, -0.7741, -0.2545, -0.5341, -0.4514, -0.5885, -0.6438, -0.3536, -0.3439, -0.4444, -0.3295, -0.5054, -0.6422, -0.2638, -0.3542, -0.4570, -0.3318, 0.3147, -0.1610, -0.0281, 0.1741, -0.3516, -0.1121, 0.0904, -0.0278, -0.5291, -0.4966, -0.0578, -0.2901, -0.3213, -0.4242, -0.1817, 0.3310, -0.0990, -0.4371, -0.1389, -0.3133, -0.0174, -0.5877, -0.3310, -0.4072, -0.4631, 0.1670, -0.1247, -0.4308, -0.0869, -0.1159, -0.3319, -0.4439, -0.1260, -0.0383, -0.2941, 0.1387, 0.0880, -0.5798, -0.5949, -0.3558, -0.6042, -0.1022, -0.4326, -0.2906, -0.0122, -0.1851, -0.3252, -0.5578, -0.3311, -0.0244, -0.3303, -0.2171, -0.3982, -0.3671, -0.3136, -0.2399, -0.2955, -0.2828, -0.2903, -0.5835, -0.3562, -0.9128, -0.2287, 0.2127, -0.4197, -0.1798, -0.1601, -0.5359, -0.0354, -0.6051, -0.2907, -0.3590, -0.5621, -0.5232, -0.3551, -0.2732, -0.1868, -0.0592, -0.4375, -0.3922, -0.3700, -0.2908, -0.4698, -0.0460, -0.6132, -0.4439, -0.2536, -0.3262, -0.2636, -0.4846, -0.4124, -0.2138, -0.6032, 0.1591, -0.5869, -0.3707, -0.0397, -0.7269, -0.1815, -0.4233, -0.2598, -0.3376, -0.6923, -0.4504, -0.1880, -0.6515, -0.5227, -0.3771, 0.0410, -0.2432, -0.1619, -0.7809, -0.3150, -0.1623, -0.5874, -0.2739, -0.2125, -0.5220, -0.1692, -0.1973, -0.1310, -0.3936, -0.4734, -0.2980, -0.0073, -0.5180, 0.0298, -0.4480, -0.3857, -0.7018, -0.1791, -0.6161, -0.2692, -0.3287, -0.3172, -0.4425, -0.1678, -0.2830, -0.0523, -0.3844, -0.0726, 0.0035, -0.4247, -0.3588, -0.4900, -0.4099, -0.7061, -0.4539, -0.2704, -0.6165, -0.2443, -0.6088, -0.2769, -0.0431, -0.3524, -0.4633, -0.4175, -0.2810, -0.1855, 0.0785, -0.3079, -0.5643, -0.3847, -0.4433, -0.6739, -0.3973, -0.3320, -0.4332, -0.3447, -0.3777, -0.3582, -0.3184, -0.2867, -0.4996, -0.6199, -0.3689, -0.1958, 0.1910, -0.5618, -0.3976, -0.8015, -0.0704, -0.1796, -0.5493, -0.4858, -0.2153, 0.0746, -0.6144, -0.2624, -0.3724, -0.2016, -0.3754, -0.2519, -0.1908, 0.1399, 0.2379, -0.4930, -0.3978, -0.2728, -0.3517, -0.6613, -0.4898, -0.5585, -0.1324, -0.5290, -0.2980, -0.3459, -0.6165, -0.3705, -0.3894, -0.2041, -0.4720, -0.5419, -0.2514, -0.3878, -0.2467, -0.2389, -0.4161, 0.3225, -0.6643, -0.5029, -0.4299, -0.3175], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn1.running_var&#39;, tensor([0.2401, 0.1098, 0.1199, 0.1327, 0.1160, 0.1592, 0.2086, 0.1773, 0.1186, 0.1907, 0.1309, 0.1560, 0.1467, 0.1098, 0.1347, 0.1822, 0.1361, 0.1095, 0.1659, 0.1547, 0.1121, 0.1601, 0.1211, 0.1339, 0.1100, 0.2237, 0.1177, 0.1762, 0.2298, 0.1233, 0.1508, 0.1408, 0.1887, 0.2050, 0.2397, 0.0944, 0.2682, 0.1093, 0.1290, 0.1777, 0.1207, 0.1125, 0.1428, 0.1176, 0.0986, 0.1192, 0.1162, 0.1992, 0.2167, 0.1303, 0.1658, 0.1192, 0.1332, 0.3232, 0.1256, 0.1362, 0.1743, 0.1073, 0.2416, 0.1309, 0.0952, 0.2173, 0.1398, 0.0919, 0.1076, 0.1725, 0.3159, 0.1621, 0.1264, 0.1121, 0.1874, 0.1879, 0.1134, 0.2269, 0.1075, 0.2120, 0.1199, 0.1283, 0.1564, 0.1249, 0.2352, 0.1188, 0.0935, 0.1007, 0.0818, 0.1175, 0.1050, 0.1333, 0.1864, 0.1761, 0.0934, 0.1282, 0.1004, 0.2474, 0.1763, 0.1398, 0.2086, 0.1227, 0.1274, 0.1551, 0.1257, 0.1501, 0.1728, 0.1167, 0.1860, 0.1763, 0.1166, 0.1077, 0.1061, 0.1571, 0.1956, 0.0990, 0.1350, 0.1056, 0.0990, 0.1699, 0.1702, 0.1126, 0.1456, 0.1404, 0.1555, 0.1486, 0.1760, 0.1395, 0.1604, 0.1270, 0.2364, 0.1164, 0.1932, 0.0872, 0.1368, 0.1490, 0.1694, 0.2125, 0.1629, 0.1579, 0.1208, 0.1268, 0.1974, 0.1597, 0.1067, 0.0776, 0.1437, 0.1598, 0.1738, 0.1817, 0.1170, 0.1195, 0.1118, 0.1383, 0.1352, 0.1144, 0.1543, 0.1341, 0.1341, 0.1581, 0.1670, 0.1668, 0.2796, 0.0880, 0.1642, 0.1287, 0.2296, 0.1073, 0.1291, 0.1202, 0.1599, 0.2476, 0.1088, 0.1063, 0.1627, 0.1308, 0.1480, 0.1207, 0.1130, 0.1735, 0.1842, 0.2019, 0.1582, 0.2616, 0.0957, 0.1346, 0.1255, 0.1297, 0.1656, 0.1854, 0.1551, 0.1160, 0.1142, 0.1843, 0.1512, 0.2372, 0.0999, 0.1123, 0.1200, 0.1230, 0.0967, 0.1438, 0.1426, 0.1662, 0.0944, 0.1282, 0.1412, 0.1507, 0.1977, 0.1225, 0.1502, 0.2725, 0.1148, 0.0815, 0.1701, 0.0987, 0.1271, 0.1211, 0.0862, 0.1865, 0.1455, 0.2344, 0.2198, 0.1306, 0.1487, 0.1140, 0.1213, 0.1350, 0.1369, 0.1983, 0.1779, 0.0921, 0.2029, 0.1896, 0.1729, 0.1252, 0.1752, 0.1326, 0.0939, 0.1287, 0.1747, 0.1207, 0.1624, 0.1274, 0.1448, 0.1143, 0.1327, 0.1271, 0.1812, 0.0857, 0.1924, 0.1698, 0.1235, 0.1058, 0.1376, 0.1793, 0.2695, 0.1480, 0.1025, 0.1093], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.6.5.conv2.weight&#39;, tensor([[[[ 1.3030e-03, 1.1652e-02, 5.0611e-03], [-8.1277e-03, -6.6991e-03, -1.4861e-04], [-1.7526e-02, -2.2723e-02, -1.1275e-02]], [[-3.0567e-03, -9.0917e-03, -7.4817e-03], [-2.2904e-02, -3.9374e-02, -2.2603e-02], [-1.8782e-02, -2.8819e-02, -1.4746e-02]], [[ 1.6583e-03, -3.9660e-03, 6.2903e-03], [-4.5068e-03, 9.6886e-03, 9.2342e-03], [ 2.7735e-02, 4.3355e-02, 4.5700e-02]], ..., [[-2.0165e-02, -1.2722e-02, -1.8298e-02], [ 9.0114e-03, 1.0820e-02, -1.1309e-02], [ 1.1812e-02, 2.3154e-02, -2.9055e-03]], [[ 7.5274e-03, 1.2068e-02, -1.2584e-02], [ 2.4154e-03, 1.6170e-02, -1.3511e-02], [-2.5886e-02, 8.6349e-04, 9.8523e-04]], [[-1.4936e-02, -3.3103e-02, -9.9477e-03], [-3.3091e-02, -6.8501e-02, -2.2466e-02], [ 3.5494e-03, -2.8920e-02, -3.0116e-03]]], [[[ 6.0676e-03, 3.1843e-03, 1.0214e-03], [ 3.5277e-03, 2.1522e-03, -7.4582e-03], [ 1.2567e-04, 1.5022e-03, -1.2603e-02]], [[-3.4040e-02, -2.8085e-02, -1.9826e-02], [-1.0809e-02, 5.6786e-03, 1.1226e-03], [-2.8384e-02, -2.5502e-02, -2.8872e-02]], [[-6.2476e-03, 1.4017e-03, 6.7338e-03], [-5.8561e-03, -2.1291e-02, -8.6904e-03], [-1.4060e-02, -2.8715e-02, -1.0869e-02]], ..., [[-9.1076e-03, -1.8183e-02, -1.6450e-02], [-1.7156e-02, -2.4889e-02, -1.9800e-02], [-1.1636e-02, -4.4780e-03, -6.9036e-03]], [[-1.5268e-02, 9.1625e-04, 1.6257e-02], [-2.0275e-02, -2.7574e-03, -2.9593e-03], [-1.3882e-02, 2.8162e-03, -1.4209e-02]], [[-3.0733e-03, -7.6487e-03, -6.3915e-03], [-1.7538e-03, -6.8023e-03, -2.2225e-03], [ 1.5428e-02, 3.3586e-03, 7.6577e-03]]], [[[ 3.1541e-02, 5.3728e-02, 4.3800e-02], [ 2.7977e-02, 4.4303e-02, 3.4616e-02], [ 4.0875e-02, 5.7180e-02, 4.5026e-02]], [[-2.4301e-02, -2.3743e-02, -1.5994e-02], [-1.2609e-02, -1.3123e-03, 2.0048e-03], [-2.0954e-02, -1.5438e-02, -7.1840e-03]], [[-1.5577e-03, -5.7406e-05, -4.7510e-03], [-1.2503e-02, -5.5287e-03, -1.1457e-02], [ 5.4365e-04, -1.2143e-03, -9.0502e-04]], ..., [[ 1.2067e-02, 6.6050e-03, 1.4200e-02], [-1.3183e-02, -1.2169e-02, -1.3853e-02], [-5.2225e-03, -1.5310e-02, -4.1650e-03]], [[-6.2140e-03, -3.5016e-04, -1.0465e-03], [ 7.7625e-03, 5.5186e-03, 1.1589e-02], [ 2.8369e-02, 2.1108e-02, 1.5916e-02]], [[-5.9474e-03, -2.6554e-03, -2.2423e-03], [ 9.4348e-03, 1.1710e-02, 1.3211e-02], [ 1.4046e-02, 1.1184e-02, 1.5398e-02]]], ..., [[[-2.9210e-03, -8.7116e-03, -2.0574e-02], [ 1.3330e-02, 1.0649e-02, -1.0431e-02], [-1.3067e-02, -1.1509e-02, -2.0861e-02]], [[-1.2652e-02, 4.2267e-03, 3.9256e-03], [-2.9044e-02, -2.2894e-02, -4.2744e-03], [-2.7650e-02, -2.7520e-02, -2.2473e-03]], [[ 2.4402e-03, -1.3745e-02, -3.1207e-03], [-6.6663e-04, 1.4936e-02, 2.7911e-02], [-9.8857e-03, -8.1186e-04, -8.9735e-03]], ..., [[-8.5354e-03, -5.0610e-03, -3.8941e-03], [-7.6206e-03, -1.6344e-02, -3.0421e-03], [ 4.1658e-03, 5.7380e-03, -1.3617e-03]], [[-5.9207e-04, -9.3796e-03, -1.5357e-02], [ 2.6547e-02, -1.4460e-02, -2.0967e-02], [ 3.3245e-02, 5.5067e-03, -1.1155e-02]], [[-1.2736e-02, -3.0211e-02, -2.7736e-02], [-1.5473e-02, -2.1744e-02, -2.3059e-02], [-9.2924e-03, -1.1249e-02, -9.4567e-03]]], [[[ 3.4142e-03, -5.3728e-03, 2.9955e-03], [-1.5404e-02, -2.3847e-02, -1.1962e-02], [-4.7799e-03, -1.8334e-02, 2.2226e-03]], [[ 3.6044e-03, 9.3249e-03, 1.4876e-02], [ 1.1890e-02, 1.7336e-02, 2.7401e-02], [ 4.6037e-03, 8.4643e-03, 1.5148e-02]], [[-2.9512e-02, 7.0937e-03, -1.3696e-02], [-2.0281e-02, 1.7707e-02, 2.2988e-02], [-1.4480e-02, 2.4387e-02, -8.5563e-03]], ..., [[ 2.4764e-03, 1.0945e-02, 9.6496e-03], [-1.6147e-02, -1.4330e-02, 1.8027e-03], [-1.6437e-02, -2.3729e-02, -8.8543e-03]], [[-1.6375e-03, -9.6005e-03, -1.0121e-02], [-3.7840e-02, -8.1890e-03, -1.9385e-03], [-3.3164e-02, -2.0803e-02, -1.6679e-02]], [[-1.2166e-02, -1.9299e-02, -8.3699e-03], [-4.1987e-03, -1.5833e-02, -9.9216e-03], [ 9.1581e-03, 5.8107e-03, -3.4958e-04]]], [[[ 7.5846e-03, 4.4065e-03, 6.9868e-03], [ 6.7625e-03, 1.9395e-03, 2.6317e-03], [ 4.8420e-03, -1.2032e-03, 9.4788e-04]], [[ 1.3455e-03, 2.9706e-03, 2.3586e-03], [ 2.9605e-03, 6.3744e-03, 3.5094e-03], [ 7.0596e-03, 1.2633e-02, 7.7831e-03]], [[ 1.6251e-03, 3.3743e-03, 5.6262e-03], [ 1.2330e-03, 3.3828e-03, 5.3969e-03], [-9.0844e-04, 3.7082e-03, 6.8784e-03]], ..., [[-8.1757e-03, -8.0880e-03, -8.8876e-03], [ 6.4488e-04, 2.5631e-03, -4.8037e-04], [-1.8528e-03, -1.8378e-03, -1.6425e-03]], [[-6.3309e-03, -1.9784e-03, -8.6672e-04], [-5.8494e-03, -5.6137e-03, -4.3616e-03], [-3.7381e-04, -1.3994e-04, -1.3495e-03]], [[ 1.7638e-03, 4.3001e-03, 2.3154e-03], [ 2.2920e-03, 3.5026e-03, 1.9337e-04], [-6.3314e-04, -2.0642e-03, -2.5207e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn2.weight&#39;, tensor([ 0.3587, 0.2518, 0.1582, -0.0282, 0.2897, 0.1190, 0.1747, 0.0800, 0.1515, 0.0886, 0.1040, 0.1411, 0.2286, 0.0905, 0.1884, 0.1877, 0.1830, 0.1220, 0.1336, 0.1307, 0.1132, 0.1354, 0.3606, 0.1438, 0.1600, 0.0969, 0.2442, 0.1833, 0.0662, 0.2177, 0.2734, 0.1461, 0.2186, 0.1161, 0.2347, 0.1318, 0.1537, 0.1674, 0.0678, 0.1851, 0.1497, 0.2707, 0.0701, 0.1309, 0.2193, 0.2007, 0.1997, 0.2845, 0.0384, 0.1245, 0.1653, 0.1224, 0.2913, 0.1678, 0.2090, 0.0586, 0.2180, 0.1450, 0.2029, 0.2424, 0.2623, 0.1932, 0.3625, 0.1711, 0.1886, 0.2223, 0.1915, 0.1314, 0.2687, 0.1501, 0.2148, 0.0923, 0.1444, 0.1411, 0.1458, 0.2437, 0.1624, 0.1154, 0.0777, 0.2475, 0.1772, 0.3117, 0.2817, 0.1506, 0.1399, 0.1095, 0.2097, 0.3098, 0.2181, 0.2213, 0.2080, 0.0634, 0.0722, 0.1287, 0.1547, 0.2375, 0.1730, 0.2213, 0.1348, 0.0910, 0.1449, 0.2452, 0.3753, 0.2043, 0.3600, 0.3918, 0.1979, 0.1203, 0.1760, 0.1514, 0.2249, 0.0862, 0.3411, 0.3069, 0.1112, 0.1766, 0.0415, 0.2590, 0.1599, 0.0934, 0.0675, 0.2203, -0.1116, 0.2443, 0.1321, 0.0592, 0.4010, 0.1508, 0.1276, 0.1034, 0.1663, 0.1317, 0.2276, 0.1496, 0.1567, 0.2389, 0.1210, 0.2898, 0.0599, 0.1183, 0.1193, 0.1309, 0.2023, 0.1104, 0.2353, 0.2632, 0.0792, 0.1735, 0.2131, 0.1087, 0.1656, 0.3197, 0.1394, 0.1989, 0.2211, 0.2587, 0.1218, 0.1247, 0.2264, 0.3133, 0.3075, 0.2066, 0.3491, 0.1554, 0.1404, 0.2888, 0.3108, 0.1468, 0.2310, 0.1541, 0.2465, 0.1320, 0.1682, 0.1664, 0.3439, 0.1560, 0.2445, 0.1809, 0.1809, 0.1822, 0.2483, 0.2904, 0.3986, 0.2597, 0.1613, 0.1815, 0.2961, 0.4226, 0.1580, 0.1515, 0.1841, 0.1734, 0.0878, 0.2413, 0.1376, 0.1937, 0.2080, 0.2490, 0.1868, 0.2516, 0.3449, 0.1052, 0.1690, 0.1627, 0.0923, -0.0370, 0.1349, 0.1965, 0.1037, 0.3057, 0.1909, 0.1359, 0.1664, 0.0669, 0.3146, 0.3558, 0.2710, 0.2017, 0.1642, 0.0537, 0.2728, 0.2206, 0.0911, 0.1940, 0.2421, 0.1176, 0.1314, 0.2224, 0.1609, 0.2809, 0.1701, 0.3661, 0.1299, 0.1132, 0.3134, 0.0759, 0.0293, 0.1671, 0.2085, 0.0933, 0.2032, 0.1676, 0.1623, 0.1896, 0.2797, 0.2005, 0.1643, 0.2141, 0.0559, 0.1176, 0.1461, 0.3692, 0.1210, 0.2131, 0.1656, 0.0334], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn2.bias&#39;, tensor([-0.3130, -0.1868, 0.0414, -0.0063, -0.3317, 0.0347, -0.1248, -0.0540, -0.1665, -0.1002, -0.1313, -0.1567, -0.2213, -0.0962, -0.1878, -0.2171, -0.2157, -0.1063, -0.1670, -0.1449, -0.1491, -0.0965, -0.5067, -0.1739, -0.1270, -0.1147, -0.1870, -0.2202, -0.0033, -0.1868, -0.2106, -0.1626, -0.3475, -0.1204, -0.1496, 0.0232, -0.1284, -0.2315, 0.0156, -0.2359, -0.1249, -0.3621, -0.0405, 0.0099, -0.2072, -0.1819, -0.2191, -0.2554, -0.0321, -0.1289, -0.1546, -0.1281, -0.3407, -0.2402, -0.1960, -0.0421, -0.2176, -0.1467, -0.2378, -0.2658, -0.1786, -0.2204, -0.2678, -0.2192, -0.2380, -0.2415, -0.2297, -0.0871, -0.2219, -0.0429, -0.2342, -0.0961, -0.1181, -0.2116, -0.1764, -0.2156, -0.1898, -0.1564, -0.0790, -0.2978, -0.1975, -0.3742, -0.2592, -0.1773, -0.0617, -0.1248, -0.2172, -0.2996, -0.1220, -0.2400, -0.2173, -0.0162, -0.0918, -0.1325, -0.1884, -0.2006, -0.1683, -0.2532, -0.1565, -0.0068, -0.1335, -0.2768, -0.3297, -0.1274, -0.3729, -0.4863, -0.1639, -0.0852, -0.1659, -0.1887, -0.2104, -0.0424, 0.1187, -0.2170, -0.0750, -0.1871, -0.0183, -0.3119, -0.1948, -0.0512, -0.0642, -0.2320, -0.1048, -0.2418, -0.1573, -0.0293, -0.2302, -0.1961, -0.1435, -0.0580, -0.2038, -0.1514, -0.1906, -0.0497, -0.2392, -0.1592, -0.1582, -0.3272, -0.0600, -0.1440, -0.0877, -0.0384, -0.2351, -0.0922, -0.1184, -0.3355, -0.0232, -0.2498, -0.1983, -0.1027, -0.1296, -0.3563, -0.1258, -0.2241, -0.1811, -0.2824, -0.0021, -0.1066, -0.2135, -0.3181, -0.3227, -0.0703, -0.3956, -0.1794, -0.1447, -0.4432, -0.3240, -0.1504, -0.1681, -0.1980, -0.1926, -0.1390, -0.1000, -0.1579, -0.3398, -0.1763, -0.2547, -0.2016, -0.2069, -0.2020, -0.1290, -0.2066, -0.4079, -0.2703, -0.2162, -0.0917, -0.3112, -0.4247, -0.1615, -0.1542, -0.2122, -0.1598, 0.0302, -0.2858, -0.1569, -0.2001, -0.2530, -0.2156, -0.2021, -0.2610, -0.3965, -0.1316, -0.0910, -0.1437, -0.1389, 0.0140, -0.1727, -0.2453, -0.0874, -0.1671, -0.2259, -0.0921, -0.2047, -0.0072, -0.2383, -0.3270, -0.2705, -0.2601, -0.2270, -0.0360, -0.3770, -0.2294, -0.0827, -0.2220, -0.2149, -0.1271, 0.0217, -0.2500, 0.0279, -0.2594, -0.0078, -0.1719, -0.1578, -0.1356, -0.3540, -0.0803, -0.0529, -0.2007, -0.1901, -0.0651, -0.2321, -0.0429, -0.1382, -0.2337, -0.2501, -0.2466, -0.1688, -0.2520, -0.0245, -0.1404, -0.1399, -0.3551, -0.1346, -0.2965, -0.2334, -0.0171], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn2.running_mean&#39;, tensor([-0.1030, -0.0787, 0.0346, -0.0119, -0.0719, -0.0443, -0.0794, -0.0296, -0.0704, -0.0134, -0.0396, -0.0536, -0.0498, -0.0321, -0.0620, -0.0775, -0.0297, -0.0287, -0.0553, -0.0641, -0.0367, -0.0385, -0.0883, -0.0465, -0.0371, -0.0308, 0.2003, -0.0647, -0.0364, -0.0713, -0.0419, -0.0571, -0.0467, -0.0418, -0.0490, 0.0738, -0.0400, -0.0301, -0.0170, -0.0531, -0.0633, -0.0971, -0.0163, 0.0523, -0.0569, -0.0549, -0.0704, -0.0681, -0.0159, -0.0273, -0.0775, -0.0234, -0.0789, -0.0864, -0.0989, -0.0440, -0.0541, -0.0680, -0.0684, -0.0556, -0.0485, -0.0612, -0.0966, -0.0602, -0.0668, -0.0229, -0.0583, -0.0491, -0.0801, -0.0348, -0.0748, -0.0370, -0.0675, -0.0611, -0.0693, -0.0999, -0.0672, -0.0532, -0.0382, -0.0872, -0.0616, -0.1054, -0.0288, -0.0518, -0.0606, -0.0356, -0.0360, -0.0892, -0.0721, -0.0653, -0.0723, -0.0390, -0.0600, -0.0641, -0.0605, -0.0720, -0.0979, -0.0766, -0.0765, 0.0060, -0.0450, -0.0724, -0.0966, -0.0684, -0.1185, -0.1142, -0.0691, -0.0472, -0.0616, -0.0799, -0.0867, -0.0117, -0.1317, -0.0930, -0.0424, -0.0620, -0.0025, -0.0761, -0.0675, -0.0364, -0.0298, -0.0331, 0.0058, -0.0755, -0.0550, -0.0279, -0.0517, -0.0665, -0.0301, -0.0301, -0.0959, -0.0505, -0.0854, 0.0050, -0.0336, -0.0728, -0.0660, -0.0854, -0.0114, -0.0581, -0.0293, -0.0171, -0.0712, -0.0279, -0.1016, -0.0537, -0.0097, -0.0449, -0.0819, -0.0209, -0.0667, -0.0850, -0.0485, -0.0558, -0.0108, -0.0655, 0.0071, -0.0609, -0.0851, -0.0671, -0.1133, -0.0785, -0.1045, -0.0725, -0.0496, -0.0647, -0.0752, -0.0680, -0.0469, -0.0604, -0.1045, -0.0760, -0.0234, -0.0530, -0.0244, -0.0325, -0.0969, -0.0614, -0.0722, -0.0906, 0.0024, -0.0508, -0.1023, -0.0649, -0.0712, -0.0686, -0.0831, -0.1304, -0.0606, -0.0698, -0.0601, -0.0576, -0.0475, -0.0407, -0.0615, -0.0475, -0.1023, -0.1358, -0.0771, -0.0892, -0.1005, -0.0196, -0.0425, -0.0510, -0.0332, 0.0064, -0.0224, -0.0623, -0.0629, -0.0676, -0.0557, -0.0235, -0.0592, -0.0055, -0.0697, -0.0723, -0.1061, -0.0688, -0.0467, 0.0004, -0.0769, -0.0475, -0.0470, -0.0769, -0.1106, -0.0517, -0.0332, -0.0330, 0.0157, -0.1219, -0.0649, -0.1063, -0.0601, -0.0579, -0.1187, -0.0278, 0.0015, -0.0488, -0.0575, -0.0279, -0.0709, 0.0560, -0.0677, -0.0527, -0.0492, -0.0820, -0.0749, -0.0805, 0.0083, -0.0730, -0.0528, -0.1052, -0.0447, -0.0735, -0.0898, 0.0081], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn2.running_var&#39;, tensor([0.0134, 0.0056, 0.0166, 0.0017, 0.0049, 0.0052, 0.0068, 0.0046, 0.0081, 0.0024, 0.0038, 0.0049, 0.0076, 0.0035, 0.0058, 0.0059, 0.0043, 0.0070, 0.0035, 0.0047, 0.0045, 0.0037, 0.0050, 0.0046, 0.0026, 0.0041, 0.0112, 0.0052, 0.0023, 0.0088, 0.0059, 0.0038, 0.0029, 0.0029, 0.0089, 0.0064, 0.0044, 0.0033, 0.0034, 0.0034, 0.0067, 0.0067, 0.0041, 0.0062, 0.0053, 0.0062, 0.0052, 0.0079, 0.0037, 0.0053, 0.0063, 0.0029, 0.0061, 0.0077, 0.0082, 0.0040, 0.0059, 0.0069, 0.0041, 0.0056, 0.0067, 0.0062, 0.0135, 0.0043, 0.0050, 0.0041, 0.0043, 0.0043, 0.0083, 0.0047, 0.0051, 0.0043, 0.0054, 0.0038, 0.0045, 0.0089, 0.0052, 0.0035, 0.0047, 0.0044, 0.0043, 0.0086, 0.0071, 0.0060, 0.0069, 0.0034, 0.0073, 0.0058, 0.0071, 0.0082, 0.0121, 0.0024, 0.0023, 0.0056, 0.0038, 0.0083, 0.0070, 0.0046, 0.0053, 0.0033, 0.0034, 0.0041, 0.0110, 0.0097, 0.0081, 0.0076, 0.0062, 0.0046, 0.0053, 0.0047, 0.0068, 0.0032, 0.0157, 0.0146, 0.0026, 0.0045, 0.0017, 0.0061, 0.0036, 0.0049, 0.0016, 0.0056, 0.0046, 0.0065, 0.0028, 0.0026, 0.0073, 0.0053, 0.0023, 0.0031, 0.0068, 0.0024, 0.0063, 0.0074, 0.0021, 0.0091, 0.0064, 0.0087, 0.0028, 0.0038, 0.0033, 0.0049, 0.0046, 0.0046, 0.0086, 0.0039, 0.0025, 0.0035, 0.0053, 0.0035, 0.0062, 0.0108, 0.0061, 0.0050, 0.0040, 0.0058, 0.0042, 0.0042, 0.0073, 0.0057, 0.0073, 0.0053, 0.0110, 0.0044, 0.0041, 0.0038, 0.0081, 0.0044, 0.0045, 0.0044, 0.0073, 0.0037, 0.0064, 0.0032, 0.0067, 0.0025, 0.0089, 0.0049, 0.0041, 0.0039, 0.0080, 0.0059, 0.0151, 0.0070, 0.0035, 0.0077, 0.0055, 0.0144, 0.0045, 0.0050, 0.0058, 0.0059, 0.0041, 0.0045, 0.0061, 0.0032, 0.0108, 0.0114, 0.0185, 0.0040, 0.0094, 0.0039, 0.0046, 0.0050, 0.0032, 0.0025, 0.0025, 0.0045, 0.0039, 0.0062, 0.0048, 0.0035, 0.0048, 0.0025, 0.0085, 0.0077, 0.0057, 0.0055, 0.0041, 0.0019, 0.0061, 0.0048, 0.0040, 0.0058, 0.0073, 0.0088, 0.0083, 0.0069, 0.0095, 0.0134, 0.0085, 0.0118, 0.0062, 0.0031, 0.0093, 0.0025, 0.0016, 0.0044, 0.0058, 0.0078, 0.0052, 0.0066, 0.0040, 0.0061, 0.0075, 0.0060, 0.0060, 0.0043, 0.0032, 0.0034, 0.0038, 0.0095, 0.0064, 0.0064, 0.0053, 0.0016], device=&#39;cuda:0&#39;)), (&#39;0.6.5.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.7.0.conv1.weight&#39;, tensor([[[[ 2.0941e-02, 4.6348e-02, 5.6821e-02], [ 1.6350e-02, 1.5828e-02, 2.7295e-02], [-4.3294e-03, 2.5888e-02, 1.5249e-02]], [[-6.6726e-03, -1.9313e-02, -1.5172e-02], [-3.0082e-02, -2.4693e-02, -5.9190e-03], [ 3.0416e-03, -1.8047e-03, 1.1523e-03]], [[-5.6318e-04, 3.7426e-03, 1.5745e-02], [ 1.8759e-03, 1.6955e-03, 8.2727e-03], [ 6.4345e-03, 1.7712e-03, 8.4429e-04]], ..., [[-1.8545e-02, -3.8693e-02, -3.5857e-02], [-6.6886e-03, -2.7872e-02, -4.3433e-02], [-1.9652e-03, -1.5597e-02, -7.5711e-03]], [[ 6.9629e-03, 2.4198e-02, -2.1541e-03], [ 1.9238e-03, -8.6671e-03, -5.9519e-03], [ 1.3358e-04, -1.2012e-02, -1.0842e-02]], [[-6.9945e-03, 1.1744e-02, 3.4882e-03], [-8.8727e-03, 1.3012e-03, -8.2420e-03], [-6.6021e-03, -3.1696e-04, -7.1417e-03]]], [[[ 2.6128e-02, 1.7872e-02, 2.8137e-02], [ 8.4712e-03, -4.7378e-03, 1.4578e-02], [ 1.3359e-02, 2.5657e-02, 1.5883e-02]], [[-1.5863e-02, -1.5006e-02, -1.2111e-02], [-1.7584e-02, -2.6682e-02, -2.9063e-02], [-1.9969e-02, -2.2944e-02, -1.5111e-02]], [[-3.4809e-03, -9.4970e-04, 1.9687e-02], [ 2.5624e-02, 2.3700e-02, 4.1360e-02], [ 5.9180e-03, 1.3761e-02, 1.0942e-02]], ..., [[ 7.4052e-03, 1.1459e-02, 6.6881e-03], [ 2.0509e-03, 8.4452e-03, -7.4795e-03], [ 4.5503e-04, 6.1111e-03, 2.0958e-03]], [[-1.5887e-02, -3.1863e-02, -2.7443e-02], [-2.7406e-02, -5.9519e-02, -5.2699e-02], [-1.0036e-02, -4.0834e-02, -3.7848e-02]], [[-5.8156e-02, -5.9594e-02, -4.8919e-02], [-3.6961e-02, -2.5529e-02, -2.3295e-02], [-3.1122e-02, -2.0780e-02, -1.1321e-02]]], [[[-1.3666e-02, -3.1149e-02, -4.1083e-02], [-2.2438e-02, -2.4895e-02, -2.7002e-02], [-2.2477e-02, -1.7896e-02, -9.7238e-03]], [[-2.3509e-04, 1.6524e-02, 1.3317e-02], [ 1.5527e-02, 2.2391e-02, 3.1734e-02], [ 1.4889e-02, 1.7463e-02, 2.0685e-02]], [[-2.0463e-02, -2.1202e-02, -3.9279e-02], [ 1.6780e-03, -1.1015e-03, -7.9353e-03], [ 1.3785e-02, 1.9946e-02, 1.3613e-02]], ..., [[-3.5639e-03, -1.0223e-02, -7.6358e-03], [-1.2042e-02, -2.7348e-03, -1.8830e-02], [ 1.6215e-02, -1.1990e-02, -4.2765e-03]], [[ 6.2853e-03, 6.9069e-03, 1.7837e-02], [-2.4309e-03, 1.0841e-02, 1.6127e-02], [ 5.2028e-03, 2.0577e-02, 7.6640e-03]], [[-1.5163e-02, 4.6519e-04, -3.1979e-03], [-5.7002e-03, 1.6351e-02, 7.2954e-03], [-2.9814e-03, 4.5317e-03, -5.9728e-05]]], ..., [[[ 4.8551e-02, 5.1152e-02, 2.0420e-02], [ 1.9945e-02, 3.3355e-02, 5.3192e-03], [-1.5430e-03, 6.9672e-04, 2.3237e-03]], [[-1.6059e-02, -1.5206e-02, -3.5686e-03], [-5.9842e-03, -1.0456e-02, -6.9827e-03], [ 3.3092e-04, 6.5783e-03, -5.7808e-03]], [[-6.0372e-05, -1.2364e-03, 7.7428e-03], [-4.9454e-03, -2.5870e-03, -4.4399e-03], [-1.4118e-03, -3.2486e-03, -5.5856e-03]], ..., [[ 2.7879e-02, 3.2275e-02, 2.4979e-02], [ 1.8670e-02, 3.4146e-02, 2.2155e-02], [-9.7674e-03, 6.5475e-03, 6.5901e-03]], [[-1.7213e-02, -4.4695e-03, -5.1377e-03], [-1.2978e-02, -2.3418e-02, -2.6561e-02], [-2.9579e-03, -1.1226e-02, -2.1355e-02]], [[ 1.1923e-02, 1.1573e-02, 1.4053e-02], [-4.3069e-03, -9.0171e-03, -5.3192e-03], [-1.1294e-02, -2.1205e-02, -2.2352e-02]]], [[[ 4.9104e-03, 1.1155e-02, 1.1255e-02], [-6.3542e-03, -7.1739e-03, -6.2689e-03], [-1.9782e-02, -2.7550e-02, -1.8992e-02]], [[ 2.0268e-03, 3.9438e-03, 1.0967e-02], [ 8.0548e-03, -4.5215e-03, -1.2755e-02], [-6.6393e-03, -2.7092e-03, -1.1500e-02]], [[ 9.3845e-03, -2.5176e-03, -5.3101e-03], [-3.9737e-03, 1.7489e-03, 1.5008e-03], [-1.3474e-02, -4.5229e-03, -1.4284e-02]], ..., [[-1.4248e-03, 2.0591e-02, 3.8805e-02], [-1.1358e-03, 4.6621e-02, 4.7043e-02], [-3.2059e-03, -7.7921e-03, 2.9406e-03]], [[-5.0517e-03, 4.3438e-03, 2.9688e-03], [-1.0311e-02, -2.4590e-02, -2.3732e-02], [-2.8009e-03, -1.7044e-02, -1.8675e-02]], [[-1.2638e-02, -5.1443e-03, -1.7591e-02], [ 1.1744e-02, 1.9409e-02, 7.9362e-03], [ 1.0547e-02, 3.1458e-03, 1.3118e-02]]], [[[-1.1782e-02, 3.2188e-03, -2.4166e-02], [ 1.8936e-03, -1.6306e-02, -1.8679e-02], [-9.5260e-03, -3.6810e-03, -1.4917e-02]], [[-1.2973e-02, -2.3185e-03, -5.2207e-03], [-1.3090e-02, -4.6515e-03, -5.3223e-03], [-1.1198e-02, -1.4789e-02, -4.6116e-04]], [[ 4.5412e-03, 1.9573e-02, 3.5386e-02], [-1.1767e-02, -2.3801e-03, 1.0960e-04], [-2.7131e-02, -2.6020e-02, -2.5324e-02]], ..., [[ 1.9345e-02, -1.5844e-03, -6.3089e-03], [ 3.4569e-03, -5.7211e-03, 9.9851e-03], [ 3.7631e-04, 3.0230e-03, 6.0162e-03]], [[ 7.2380e-03, 6.6426e-03, 1.1840e-02], [-7.7853e-03, -5.2313e-03, -3.6967e-03], [-7.6766e-03, -2.3007e-02, -2.5065e-02]], [[-2.3814e-02, -3.5600e-02, -3.0267e-02], [-4.1423e-03, -6.5250e-03, -1.3855e-02], [-2.6393e-03, 7.8800e-03, -3.6987e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn1.weight&#39;, tensor([0.2744, 0.2592, 0.2823, 0.2772, 0.2523, 0.2426, 0.2067, 0.2608, 0.2368, 0.2450, 0.2593, 0.2776, 0.3081, 0.2925, 0.2253, 0.2738, 0.2202, 0.2327, 0.2447, 0.2638, 0.2689, 0.2738, 0.1525, 0.2322, 0.2541, 0.2554, 0.2899, 0.2628, 0.2331, 0.2612, 0.2282, 0.2383, 0.2683, 0.2497, 0.2485, 0.2762, 0.2641, 0.2876, 0.2689, 0.2773, 0.2416, 0.2666, 0.2648, 0.2527, 0.2062, 0.2308, 0.1943, 0.2752, 0.2394, 0.2821, 0.2851, 0.2717, 0.2276, 0.2292, 0.2345, 0.2631, 0.2181, 0.2260, 0.2914, 0.2773, 0.2520, 0.2399, 0.2416, 0.2064, 0.2665, 0.2313, 0.2422, 0.3037, 0.2613, 0.2810, 0.2424, 0.2553, 0.2189, 0.2769, 0.2850, 0.2621, 0.2618, 0.2393, 0.2474, 0.3048, 0.2511, 0.2813, 0.2122, 0.2576, 0.2537, 0.2710, 0.2593, 0.2346, 0.2314, 0.2832, 0.2633, 0.3110, 0.3150, 0.2561, 0.2210, 0.2465, 0.2882, 0.2526, 0.2368, 0.2639, 0.2734, 0.2828, 0.2193, 0.2573, 0.2371, 0.2448, 0.2482, 0.2797, 0.2785, 0.2271, 0.2489, 0.2940, 0.1964, 0.2578, 0.2433, 0.2159, 0.2409, 0.2529, 0.2537, 0.2588, 0.2670, 0.2659, 0.2661, 0.2493, 0.1941, 0.2231, 0.2517, 0.2633, 0.1863, 0.2353, 0.2831, 0.2785, 0.2373, 0.2060, 0.2686, 0.2978, 0.2540, 0.2344, 0.2591, 0.2439, 0.2587, 0.2914, 0.2378, 0.2399, 0.2252, 0.2355, 0.2939, 0.2518, 0.2333, 0.2222, 0.2155, 0.2463, 0.2619, 0.2845, 0.2639, 0.2656, 0.2505, 0.2436, 0.2314, 0.2594, 0.2798, 0.2292, 0.2576, 0.2396, 0.2657, 0.2394, 0.2468, 0.2354, 0.2321, 0.2472, 0.2789, 0.2351, 0.2709, 0.2542, 0.2632, 0.2389, 0.2432, 0.2658, 0.2212, 0.2557, 0.2409, 0.2833, 0.2303, 0.2833, 0.2455, 0.2676, 0.2736, 0.2462, 0.2870, 0.2300, 0.2706, 0.2499, 0.2772, 0.2323, 0.2537, 0.2547, 0.2454, 0.2613, 0.2490, 0.2500, 0.3029, 0.2643, 0.2793, 0.2372, 0.2269, 0.2507, 0.2475, 0.2268, 0.2679, 0.2501, 0.2605, 0.2169, 0.2297, 0.2579, 0.2395, 0.2314, 0.2096, 0.2332, 0.2885, 0.2484, 0.2384, 0.2928, 0.2642, 0.2338, 0.2799, 0.2877, 0.2332, 0.2453, 0.2842, 0.2339, 0.2831, 0.2193, 0.2304, 0.2221, 0.2472, 0.2759, 0.2296, 0.2386, 0.2915, 0.2832, 0.1630, 0.2145, 0.2424, 0.2480, 0.2413, 0.2535, 0.2763, 0.2599, 0.3274, 0.2754, 0.2249, 0.2494, 0.2798, 0.2663, 0.2876, 0.2513, 0.3013, 0.2857, 0.2869, 0.2165, 0.2639, 0.2947, 0.2709, 0.2599, 0.2582, 0.2580, 0.3287, 0.2351, 0.2214, 0.2036, 0.2859, 0.2485, 0.2534, 0.2788, 0.2553, 0.2627, 0.2437, 0.2813, 0.2711, 0.2467, 0.2561, 0.2809, 0.2485, 0.2785, 0.2512, 0.2705, 0.2868, 0.2745, 0.2550, 0.2570, 0.2483, 0.2567, 0.2383, 0.2138, 0.2358, 0.2823, 0.2773, 0.2964, 0.2366, 0.2739, 0.3379, 0.2839, 0.2622, 0.2685, 0.3023, 0.2355, 0.2495, 0.2426, 0.2334, 0.2727, 0.2741, 0.2227, 0.3495, 0.2535, 0.2820, 0.2232, 0.2795, 0.2576, 0.2394, 0.2122, 0.2427, 0.3151, 0.2617, 0.2389, 0.2334, 0.2376, 0.2405, 0.2230, 0.2446, 0.2902, 0.2299, 0.2269, 0.2715, 0.2681, 0.2530, 0.2413, 0.2389, 0.2245, 0.3079, 0.2411, 0.2343, 0.2565, 0.2186, 0.2319, 0.2788, 0.2318, 0.2761, 0.2442, 0.2693, 0.2844, 0.2482, 0.2578, 0.2528, 0.2600, 0.3069, 0.2577, 0.2609, 0.2698, 0.2840, 0.2589, 0.2561, 0.2668, 0.2655, 0.2346, 0.3086, 0.2630, 0.2613, 0.2547, 0.2279, 0.2558, 0.2527, 0.2591, 0.2566, 0.2673, 0.2510, 0.2800, 0.2726, 0.2557, 0.1082, 0.2552, 0.2053, 0.2249, 0.2566, 0.2725, 0.2593, 0.2816, 0.2558, 0.2506, 0.2332, 0.2619, 0.2465, 0.2527, 0.2340, 0.2449, 0.2489, 0.2570, 0.2655, 0.2327, 0.2992, 0.2878, 0.2169, 0.2436, 0.2258, 0.2340, 0.2772, 0.2761, 0.2522, 0.2378, 0.2881, 0.2689, 0.2616, 0.2709, 0.2609, 0.2808, 0.2583, 0.2438, 0.2546, 0.2716, 0.2633, 0.2502, 0.2580, 0.2677, 0.2863, 0.2791, 0.2586, 0.2285, 0.2922, 0.2758, 0.3007, 0.2181, 0.2481, 0.3049, 0.3134, 0.2874, 0.2530, 0.2471, 0.2322, 0.2420, 0.2640, 0.2558, 0.2791, 0.2090, 0.2306, 0.2905, 0.2890, 0.2225, 0.2665, 0.2708, 0.2742, 0.2762, 0.2440, 0.2564, 0.2953, 0.2625, 0.2532, 0.2902, 0.2491, 0.1656, 0.2163, 0.2533, 0.2615, 0.2650, 0.2759, 0.2110, 0.2182, 0.2650, 0.2465, 0.2200, 0.2522, 0.2863, 0.2566, 0.2449, 0.2625, 0.1142, 0.2623, 0.2300, 0.2769, 0.2548, 0.2442, 0.2214, 0.2575, 0.2706, 0.2477, 0.2472, 0.2264, 0.2395, 0.2917, 0.2276, 0.2331, 0.3186, 0.2517, 0.2699, 0.2292, 0.2282, 0.2366, 0.2391, 0.2403, 0.2484, 0.2639, 0.2659, 0.2948, 0.2118, 0.2567, 0.2202, 0.2220, 0.2523, 0.2361, 0.2716, 0.2742, 0.2403, 0.2478, 0.2504], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn1.bias&#39;, tensor([-0.2717, -0.2027, -0.1708, -0.2247, -0.1989, -0.2093, -0.0932, -0.2243, -0.1635, -0.2126, -0.2158, -0.2019, -0.1761, -0.2220, -0.1455, -0.1952, -0.0861, -0.2024, -0.1631, -0.2056, -0.2308, -0.2126, 0.0018, -0.1877, -0.2697, -0.2147, -0.2358, -0.2305, -0.1592, -0.2448, -0.1367, -0.2008, -0.2313, -0.2019, -0.2020, -0.2602, -0.1900, -0.2212, -0.1830, -0.1506, -0.1688, -0.1778, -0.2101, -0.1817, -0.1581, -0.1732, -0.0833, -0.1722, -0.1618, -0.1976, -0.2320, -0.2456, -0.1822, -0.2014, -0.1548, -0.2176, -0.1265, -0.0958, -0.2491, -0.2521, -0.1906, -0.1285, -0.1500, -0.1117, -0.2349, -0.1286, -0.1604, -0.1794, -0.2291, -0.1613, -0.1773, -0.2374, -0.1612, -0.2581, -0.2354, -0.2516, -0.1880, -0.1261, -0.2536, -0.2780, -0.1015, -0.1916, -0.0907, -0.1636, -0.2818, -0.2568, -0.2239, -0.1100, -0.1568, -0.2007, -0.2135, -0.2327, -0.1983, -0.1747, -0.1830, -0.1753, -0.2152, -0.2374, -0.1845, -0.2362, -0.3036, -0.2289, -0.1363, -0.1570, -0.2182, -0.2141, -0.2031, -0.2619, -0.2890, -0.1658, -0.2303, -0.1800, -0.0606, -0.2057, -0.1457, -0.1316, -0.1526, -0.2368, -0.1682, -0.2657, -0.1621, -0.2760, -0.1988, -0.1889, -0.1158, -0.1303, -0.2336, -0.2156, -0.0588, -0.1932, -0.2554, -0.2601, -0.1674, -0.1120, -0.2043, -0.2220, -0.2235, -0.2053, -0.1958, -0.1863, -0.1753, -0.1723, -0.2123, -0.1429, -0.1240, -0.1632, -0.2521, -0.2526, -0.1427, -0.1669, -0.1324, -0.1480, -0.2232, -0.2053, -0.1202, -0.1792, -0.1556, -0.2246, -0.1559, -0.2160, -0.1341, -0.1338, -0.1695, -0.1459, -0.2112, -0.2048, -0.1702, -0.1314, -0.1213, -0.1724, -0.1879, -0.0995, -0.2243, -0.1930, -0.1768, -0.1956, -0.1295, -0.2334, -0.1258, -0.2421, -0.1975, -0.2832, -0.1583, -0.2555, -0.2125, -0.1845, -0.2469, -0.2138, -0.1824, -0.1522, -0.1429, -0.1576, -0.2352, -0.2031, -0.1737, -0.2486, -0.1618, -0.2499, -0.1613, -0.1879, -0.2545, -0.2134, -0.3185, -0.1533, -0.1166, -0.2085, -0.2139, -0.1593, -0.1712, -0.1279, -0.2222, -0.1586, -0.1503, -0.1963, -0.1643, -0.1516, -0.1227, -0.2138, -0.2891, -0.1756, -0.2033, -0.1579, -0.1899, -0.1550, -0.1829, -0.1405, -0.1486, -0.1146, -0.1492, -0.1590, -0.3126, -0.1245, -0.1409, -0.1379, -0.1771, -0.2631, -0.1331, -0.1808, -0.1705, -0.1548, 0.0074, -0.1530, -0.0881, -0.1936, -0.1284, -0.1995, -0.2494, -0.1539, -0.3848, -0.2565, -0.1034, -0.1980, -0.2233, -0.1491, -0.1610, -0.1474, -0.2329, -0.2227, -0.2103, -0.1281, -0.2647, -0.3194, -0.2930, -0.2296, -0.1798, -0.2313, -0.2745, -0.1487, -0.1760, -0.1323, -0.2334, -0.1501, -0.1936, -0.2458, -0.2307, -0.1843, -0.2025, -0.1845, -0.2187, -0.2371, -0.1831, -0.2023, -0.1933, -0.2847, -0.1801, -0.2711, -0.2080, -0.2727, -0.2115, -0.2406, -0.1964, -0.2050, -0.1573, -0.1042, -0.2071, -0.2311, -0.2578, -0.2720, -0.1300, -0.1022, -0.2601, -0.2435, -0.1189, -0.2222, -0.2493, -0.1432, -0.2193, -0.1236, -0.1465, -0.2377, -0.1707, -0.1377, -0.3628, -0.1923, -0.3252, -0.1767, -0.2004, -0.1816, -0.2215, -0.1260, -0.1882, -0.3110, -0.1949, -0.1394, -0.1747, -0.1626, -0.1416, -0.1637, -0.2447, -0.2661, -0.1473, -0.1287, -0.2533, -0.2603, -0.2094, -0.2124, -0.2039, -0.1727, -0.3121, -0.2014, -0.1992, -0.1664, -0.1420, -0.1389, -0.2300, -0.1136, -0.2884, -0.1653, -0.2578, -0.3057, -0.1903, -0.2045, -0.1844, -0.2237, -0.2843, -0.1881, -0.1560, -0.2102, -0.2458, -0.1821, -0.1619, -0.2744, -0.2082, -0.1091, -0.2372, -0.2154, -0.1610, -0.2076, -0.1747, -0.2102, -0.1956, -0.2134, -0.1531, -0.2641, -0.1918, -0.2304, -0.1431, -0.2295, 0.0965, -0.2193, -0.0975, -0.1744, -0.2868, -0.2652, -0.2457, -0.2572, -0.2182, -0.2252, -0.2052, -0.2270, -0.1476, -0.1435, -0.1562, -0.1605, -0.1875, -0.1899, -0.2042, -0.1463, -0.2260, -0.1993, -0.1346, -0.1821, -0.1443, -0.2280, -0.1868, -0.1899, -0.1661, -0.2221, -0.2600, -0.1668, -0.1748, -0.2404, -0.1611, -0.1869, -0.1736, -0.1411, -0.2219, -0.2404, -0.2167, -0.2302, -0.1990, -0.2010, -0.2283, -0.1486, -0.2043, -0.1512, -0.2253, -0.2337, -0.3706, -0.0532, -0.1900, -0.2632, -0.1688, -0.2368, -0.1708, -0.1811, -0.1768, -0.1806, -0.2361, -0.2245, -0.2393, -0.1119, -0.1581, -0.2980, -0.1939, -0.1185, -0.1980, -0.2283, -0.2003, -0.1964, -0.1823, -0.1459, -0.2879, -0.2466, -0.2018, -0.2399, -0.1814, -0.0169, -0.1265, -0.1669, -0.2632, -0.2522, -0.2466, -0.1235, -0.1444, -0.2192, -0.2245, -0.1676, -0.2499, -0.2760, -0.2228, -0.2109, -0.2390, 0.1140, -0.2458, -0.1573, -0.2439, -0.2279, -0.1680, -0.1411, -0.2306, -0.2897, -0.1531, -0.1882, -0.1307, -0.1724, -0.2851, -0.1484, -0.2202, -0.3421, -0.1674, -0.2459, -0.1785, -0.0956, -0.1701, -0.1207, -0.1581, -0.1722, -0.2268, -0.2688, -0.1798, -0.2114, -0.2285, -0.1783, -0.1238, -0.2305, -0.1887, -0.1937, -0.2468, -0.2487, -0.1691, -0.1791], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn1.running_mean&#39;, tensor([-0.4148, -0.3124, -0.1049, -0.2903, -0.2502, -0.1461, 0.1239, -0.1890, -0.1377, -0.0336, -0.2865, 0.0287, -0.1798, -0.2182, 0.0863, -0.0131, -0.0495, 0.0542, -0.1915, -0.2712, -0.0437, -0.1241, -0.1096, -0.0735, -0.2313, -0.2011, -0.3447, 0.1100, -0.2635, -0.2748, -0.3271, -0.1397, -0.2692, -0.0854, -0.1895, -0.3157, -0.2718, -0.2747, -0.0875, -0.2931, -0.0992, -0.2601, -0.2081, -0.0982, -0.2994, -0.1123, 0.0516, -0.1061, -0.2169, -0.4079, -0.2235, -0.2221, -0.3482, -0.0613, -0.2233, 0.1129, -0.2944, -0.2439, -0.0700, -0.1843, -0.1828, -0.2646, -0.0943, 0.0019, -0.2402, -0.2129, 0.0332, -0.3757, 0.0175, -0.1655, -0.1200, -0.0962, -0.0509, -0.2215, -0.2875, -0.1856, -0.3685, -0.1832, -0.1804, -0.3326, -0.2448, -0.1608, -0.1113, -0.3153, -0.0658, -0.1590, -0.2879, -0.1337, -0.1585, -0.0470, -0.1236, -0.4011, -0.4028, -0.1131, -0.3638, -0.1029, -0.0720, -0.0724, -0.1757, -0.0390, -0.1368, -0.2924, -0.1269, -0.1919, -0.0951, -0.0045, -0.1280, -0.0971, -0.1923, -0.3159, 0.0354, -0.2436, -0.1500, -0.2146, -0.0594, -0.4192, 0.0961, -0.0086, -0.3842, -0.2318, -0.1463, 0.1338, -0.3389, -0.0587, -0.1383, 0.0622, 0.0387, 0.0202, -0.0862, -0.3525, -0.1435, -0.1587, 0.0768, 0.2065, -0.1205, -0.2255, -0.2696, -0.1289, -0.3306, -0.1816, -0.2063, -0.4010, 0.0639, -0.2390, -0.2173, -0.0526, -0.0777, -0.1300, -0.0186, -0.0587, -0.0701, -0.0447, -0.2682, -0.2060, -0.2360, -0.5506, -0.2611, -0.0121, -0.1235, -0.2212, -0.4093, 0.0577, -0.3405, -0.3457, -0.1324, 0.0031, -0.0369, -0.3734, -0.1048, -0.2974, -0.3226, -0.4569, 0.0720, -0.1727, -0.1662, -0.0332, -0.2968, -0.0581, 0.0787, -0.2264, 0.0176, -0.1450, 0.1353, -0.1367, -0.1377, -0.1333, -0.2228, -0.1438, -0.1090, 0.0252, -0.0865, -0.3206, -0.3055, 0.0744, -0.1451, -0.1258, -0.1791, -0.1253, 0.1608, -0.2951, -0.3857, -0.1845, -0.1542, -0.3094, -0.1945, -0.4616, -0.1311, 0.0695, -0.2445, -0.2875, -0.2327, -0.0416, 0.0129, -0.3720, -0.1744, -0.1664, -0.0623, -0.0424, -0.1729, -0.0503, -0.0551, -0.2243, -0.0901, -0.2340, -0.2747, -0.1232, -0.3606, -0.1488, -0.2046, -0.0147, -0.2930, -0.1609, -0.1148, -0.1760, -0.0997, -0.0441, -0.0567, -0.0774, -0.2681, -0.2519, -0.5540, -0.0306, -0.3027, -0.1489, -0.0184, -0.1258, -0.1060, -0.4138, -0.4201, -0.1008, -0.0738, -0.3799, -0.4024, -0.2715, -0.1108, 0.1037, -0.0758, -0.4568, -0.1642, 0.0978, 0.0742, -0.2986, -0.0773, -0.1911, -0.3026, 0.0098, -0.0383, -0.2328, 0.0982, 0.0262, -0.0905, -0.2833, -0.0552, -0.0956, -0.3301, -0.3938, -0.0242, -0.2824, -0.1360, 0.0237, -0.1615, -0.3148, -0.2518, -0.2597, -0.1188, 0.0103, -0.2125, -0.2697, -0.3214, -0.1006, -0.0959, -0.0566, -0.2438, -0.1360, -0.2148, 0.0062, -0.2868, -0.2651, -0.2298, -0.3103, -0.3632, -0.2397, -0.2448, -0.2434, -0.3914, -0.2300, -0.1879, -0.0811, 0.0157, 0.0200, -0.2444, -0.3112, -0.1151, -0.3146, -0.1371, -0.1226, -0.1956, 0.1598, -0.1465, -0.1148, -0.1889, -0.2344, -0.0136, -0.0786, -0.2826, -0.2422, -0.1243, -0.1130, -0.0430, -0.3322, -0.1521, -0.0279, -0.2207, -0.0645, -0.1990, -0.0951, -0.1167, -0.1184, -0.1762, -0.2118, -0.3368, -0.0769, -0.2163, 0.0043, -0.2150, -0.1898, -0.1220, -0.1591, -0.1001, -0.1080, -0.1857, -0.0676, -0.1406, -0.2541, -0.3812, -0.1430, -0.2794, -0.0669, -0.1243, -0.1919, -0.1779, -0.1257, -0.2392, -0.3166, -0.1598, -0.0736, -0.4322, -0.3723, -0.1562, -0.2192, 0.0421, -0.2576, -0.2610, -0.3382, 0.0860, -0.1459, -0.3729, -0.2262, -0.0283, -0.1303, -0.0104, -0.2772, -0.1460, -0.2051, 0.0445, -0.0749, -0.0847, 0.1282, -0.0214, -0.3276, -0.2145, -0.2082, 0.1063, 0.2853, -0.2532, -0.4312, -0.1526, -0.1404, -0.0868, -0.2003, -0.2325, 0.1968, -0.0412, 0.0478, -0.3302, -0.3428, -0.1840, -0.2189, -0.2035, -0.2181, -0.3972, -0.0933, -0.1362, -0.2023, -0.1820, -0.0860, -0.1633, -0.4345, 0.0305, -0.1626, -0.2087, -0.2850, -0.4614, -0.1411, -0.3501, -0.1387, -0.1565, -0.1661, -0.3152, -0.2564, 0.0906, -0.1437, -0.3041, -0.1221, -0.1057, 0.0549, -0.1202, 0.0216, -0.1970, -0.1706, -0.1013, -0.1171, -0.0380, -0.2174, -0.3275, -0.0364, -0.2588, -0.1635, -0.1742, -0.2425, -0.1132, -0.2145, -0.1414, -0.0914, 0.0160, -0.2493, -0.0606, 0.0056, -0.1180, -0.3145, -0.1871, -0.3649, -0.3179, 0.0761, -0.0959, -0.2356, -0.3670, 0.0857, 0.1223, -0.3764, -0.2393, -0.1965, -0.3637, 0.3496, -0.1580, -0.2995, -0.3101, -0.0756, -0.0657, -0.1526, -0.1604, -0.1124, 0.0549, 0.0301, -0.0635, -0.0360, -0.2866, -0.0547, -0.1546, -0.3257, -0.0676, -0.0736, -0.0190, -0.2250, -0.0926, -0.2806, 0.0811, -0.2598, 0.0445, -0.2130, -0.1876, 0.2748, -0.3083, -0.2184, -0.0963, -0.2846, -0.0236, -0.2063, -0.1760, -0.1245, -0.0927, -0.0780], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn1.running_var&#39;, tensor([0.1135, 0.1304, 0.1451, 0.1151, 0.1505, 0.1096, 0.1257, 0.1224, 0.1862, 0.1214, 0.1168, 0.1295, 0.1752, 0.1450, 0.1176, 0.1108, 0.1835, 0.1313, 0.2207, 0.1167, 0.1192, 0.1703, 0.1637, 0.1233, 0.1344, 0.1157, 0.1920, 0.1268, 0.1220, 0.1715, 0.1527, 0.1242, 0.1307, 0.1468, 0.1525, 0.1710, 0.1450, 0.1465, 0.1833, 0.1690, 0.1629, 0.2373, 0.1338, 0.1970, 0.1114, 0.1144, 0.1265, 0.1405, 0.2173, 0.1815, 0.1309, 0.1541, 0.0921, 0.1144, 0.1570, 0.1102, 0.1496, 0.2476, 0.1592, 0.1535, 0.1109, 0.1230, 0.1637, 0.1076, 0.1103, 0.1710, 0.1882, 0.1813, 0.2086, 0.2189, 0.1714, 0.1316, 0.1145, 0.1080, 0.1484, 0.1349, 0.1080, 0.1381, 0.1580, 0.1638, 0.1892, 0.1618, 0.1024, 0.2172, 0.0816, 0.1395, 0.1586, 0.1467, 0.1626, 0.1702, 0.1434, 0.1732, 0.2805, 0.2160, 0.1117, 0.1065, 0.1728, 0.1307, 0.1414, 0.1410, 0.0850, 0.1660, 0.1793, 0.1630, 0.1104, 0.1194, 0.1284, 0.1556, 0.1261, 0.1470, 0.1232, 0.2755, 0.1206, 0.1015, 0.1541, 0.0986, 0.1894, 0.1137, 0.1460, 0.1026, 0.2042, 0.1826, 0.1423, 0.1867, 0.0939, 0.1701, 0.1264, 0.1475, 0.0995, 0.1068, 0.1358, 0.0988, 0.0941, 0.1193, 0.1575, 0.1704, 0.1182, 0.1123, 0.1397, 0.1831, 0.1123, 0.2547, 0.1142, 0.1574, 0.1328, 0.1097, 0.1726, 0.0772, 0.1285, 0.1392, 0.1297, 0.0939, 0.1443, 0.1732, 0.1667, 0.2190, 0.2105, 0.1219, 0.1416, 0.1521, 0.2421, 0.1552, 0.1817, 0.1291, 0.1428, 0.1426, 0.1595, 0.1356, 0.1354, 0.1730, 0.1136, 0.1296, 0.1627, 0.1079, 0.1497, 0.0981, 0.1326, 0.1093, 0.1867, 0.1506, 0.1133, 0.2010, 0.1624, 0.1456, 0.1346, 0.1286, 0.1370, 0.1545, 0.2017, 0.1388, 0.2334, 0.1796, 0.1226, 0.1138, 0.0950, 0.1114, 0.1413, 0.1053, 0.2076, 0.1555, 0.1472, 0.1344, 0.1032, 0.1452, 0.1600, 0.1240, 0.1476, 0.1404, 0.1275, 0.1682, 0.1346, 0.0980, 0.1401, 0.1498, 0.1188, 0.1302, 0.0948, 0.1035, 0.1136, 0.1278, 0.1349, 0.1563, 0.1283, 0.1224, 0.1959, 0.1523, 0.1284, 0.2024, 0.1866, 0.1584, 0.1213, 0.1233, 0.1242, 0.1928, 0.1625, 0.1304, 0.1302, 0.1104, 0.2054, 0.2130, 0.1873, 0.1116, 0.2033, 0.1287, 0.1519, 0.1047, 0.1517, 0.1242, 0.1338, 0.1519, 0.1773, 0.1373, 0.1444, 0.1866, 0.1567, 0.1393, 0.1359, 0.1827, 0.1516, 0.1375, 0.1673, 0.1583, 0.1464, 0.1246, 0.1070, 0.1372, 0.1871, 0.1157, 0.1182, 0.1427, 0.1951, 0.1459, 0.1108, 0.1679, 0.1429, 0.2639, 0.1212, 0.1355, 0.2165, 0.1391, 0.1284, 0.1249, 0.1339, 0.1571, 0.1215, 0.1652, 0.1530, 0.1223, 0.1374, 0.1104, 0.1356, 0.1220, 0.1310, 0.2282, 0.0969, 0.1709, 0.1231, 0.1545, 0.1713, 0.2182, 0.1959, 0.1579, 0.1762, 0.1761, 0.1565, 0.1296, 0.1314, 0.1442, 0.1674, 0.1903, 0.1828, 0.1344, 0.1195, 0.1630, 0.1023, 0.0748, 0.1482, 0.1612, 0.0877, 0.0751, 0.1329, 0.0934, 0.1479, 0.1304, 0.1561, 0.1206, 0.1655, 0.1392, 0.0982, 0.2908, 0.1201, 0.1048, 0.1465, 0.0998, 0.1085, 0.1515, 0.1097, 0.1109, 0.1015, 0.1634, 0.0894, 0.1738, 0.1219, 0.1191, 0.1474, 0.1404, 0.1617, 0.1311, 0.1014, 0.1247, 0.2078, 0.1293, 0.1147, 0.1080, 0.1123, 0.1757, 0.1292, 0.1589, 0.1341, 0.1113, 0.1180, 0.1134, 0.1666, 0.2153, 0.1390, 0.1638, 0.2949, 0.1385, 0.1025, 0.1079, 0.1704, 0.1362, 0.1390, 0.1119, 0.1208, 0.1128, 0.2628, 0.1028, 0.1716, 0.1198, 0.1398, 0.1100, 0.1015, 0.0968, 0.1268, 0.1452, 0.1465, 0.1006, 0.1076, 0.1453, 0.1390, 0.1950, 0.1109, 0.2124, 0.1704, 0.1680, 0.1162, 0.1213, 0.1636, 0.2559, 0.0852, 0.1282, 0.1690, 0.1291, 0.1764, 0.1941, 0.1603, 0.1154, 0.1521, 0.2463, 0.1599, 0.1255, 0.1819, 0.3356, 0.1672, 0.1941, 0.1998, 0.1576, 0.1177, 0.0907, 0.1291, 0.1424, 0.1458, 0.2467, 0.1092, 0.1527, 0.2119, 0.1659, 0.0812, 0.2261, 0.1697, 0.1366, 0.3230, 0.1572, 0.2160, 0.1409, 0.1663, 0.1589, 0.1515, 0.1150, 0.1311, 0.1477, 0.1160, 0.1015, 0.1829, 0.1129, 0.1385, 0.1633, 0.1377, 0.1153, 0.1248, 0.1528, 0.1233, 0.1141, 0.2012, 0.1083, 0.1187, 0.1228, 0.1179, 0.1406, 0.0974, 0.1170, 0.1279, 0.1245, 0.1195, 0.1141, 0.1415, 0.1498, 0.1069, 0.1919, 0.1500, 0.1018, 0.1326, 0.1328, 0.2102, 0.1451, 0.1576, 0.1341, 0.1628, 0.1306, 0.1454, 0.1274, 0.1789, 0.1431, 0.1710, 0.1835, 0.1581, 0.1753, 0.1460, 0.1718, 0.2440, 0.1392, 0.1086, 0.2138, 0.1469, 0.1689, 0.1452, 0.1360, 0.1279, 0.1053, 0.1952, 0.1084, 0.1456, 0.1041, 0.0995, 0.1413, 0.1100, 0.1685, 0.1170, 0.0971, 0.1267, 0.1228], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.7.0.conv2.weight&#39;, tensor([[[[ 1.4143e-03, 5.6297e-04, -2.1441e-03], [-1.1256e-02, -1.7954e-02, -1.2768e-02], [-9.0979e-03, -8.5109e-03, -9.8235e-03]], [[-2.1394e-03, -1.0871e-02, -3.9537e-03], [-1.1703e-03, -7.5180e-03, -3.9838e-03], [-2.4222e-02, -2.4017e-02, -3.0018e-02]], [[-7.1585e-04, -9.9493e-03, -1.1389e-02], [-1.5678e-02, -1.7343e-02, -1.7915e-02], [-1.2234e-02, -1.1386e-02, -1.3149e-02]], ..., [[ 1.7497e-03, 6.3011e-03, 1.2635e-02], [-4.8234e-03, -7.9232e-03, -6.8524e-03], [ 1.8247e-02, 9.5564e-03, 1.8220e-02]], [[ 1.7648e-02, 1.6218e-02, 1.9899e-02], [ 2.2609e-02, 1.7268e-02, 1.8636e-02], [ 3.3335e-03, 7.5194e-03, 9.3755e-03]], [[-2.0491e-03, -1.4589e-03, -5.2148e-03], [-6.3209e-03, -5.6688e-05, -1.1114e-02], [-1.8070e-02, -1.2462e-02, -2.2673e-02]]], [[[-5.8612e-03, -3.8013e-03, -1.3363e-04], [-5.8905e-04, 3.9274e-03, 1.7368e-03], [ 2.1947e-03, 1.1592e-03, -4.4369e-03]], [[-1.9498e-03, 2.0591e-03, 5.5965e-03], [-1.4156e-02, -1.8777e-02, -1.1558e-02], [-3.1155e-02, -3.6877e-02, -2.8249e-02]], [[-6.5898e-03, -6.5394e-03, -6.5503e-03], [-3.0619e-02, -3.0693e-02, -3.4687e-02], [-2.1230e-02, -3.1497e-02, -3.1529e-02]], ..., [[ 1.5149e-02, 1.0284e-02, 1.4446e-02], [-7.8637e-03, -4.8426e-03, 7.9970e-03], [-1.3596e-02, -2.1426e-02, -8.8823e-03]], [[-6.7308e-04, -1.4126e-02, -6.9149e-03], [-6.3580e-05, 7.0691e-03, 2.4787e-03], [-6.1295e-04, 5.6631e-03, -2.7299e-03]], [[ 4.5363e-03, 1.7187e-02, 1.2873e-02], [ 9.9326e-03, 3.4032e-02, 2.7382e-02], [ 1.6118e-03, 2.0271e-02, 2.7323e-02]]], [[[-2.5612e-03, 4.2742e-03, 2.1490e-03], [-8.0211e-03, -1.7570e-02, -6.4573e-03], [-1.0585e-02, -2.3597e-02, -8.1952e-03]], [[ 1.3921e-02, 1.6175e-02, 1.6799e-02], [ 1.8943e-02, 1.5803e-02, 2.5586e-02], [ 2.8117e-03, -1.4174e-03, 1.0512e-03]], [[-1.4018e-03, 4.1685e-03, -1.1248e-02], [-3.1157e-03, 3.4279e-03, -1.9218e-03], [ 6.1478e-03, 3.8621e-03, 1.3440e-02]], ..., [[-3.0815e-03, -3.9870e-03, -6.7375e-03], [ 8.3872e-03, -4.7045e-04, 4.9719e-03], [ 6.0926e-03, 1.4196e-02, -5.9666e-03]], [[ 1.5321e-02, 1.4697e-02, 1.0399e-02], [ 1.4348e-02, 3.1620e-02, 1.9087e-02], [ 2.7191e-03, 1.2681e-02, 8.9802e-03]], [[-5.0742e-03, -2.1729e-02, -9.9776e-03], [-1.4683e-02, -2.5606e-02, -1.6114e-02], [ 1.9247e-03, 2.7647e-04, 6.3674e-03]]], ..., [[[-2.2527e-03, 2.6974e-04, 7.7345e-03], [ 4.7223e-03, 1.2053e-02, 2.1177e-03], [-7.1058e-03, 4.4189e-03, -5.5626e-03]], [[ 2.9855e-02, 3.0359e-02, 3.3380e-02], [ 1.7681e-02, 2.0364e-02, 2.0999e-02], [ 1.6392e-02, 1.6673e-02, 1.7830e-02]], [[ 1.5447e-02, 1.6388e-02, 6.1316e-03], [-4.2566e-03, -3.2604e-03, -5.9049e-03], [ 3.2168e-03, 9.1696e-03, -9.4913e-03]], ..., [[ 1.5444e-02, 6.6538e-03, 5.2027e-03], [ 9.0796e-03, 8.6308e-03, 1.6175e-02], [-5.8447e-03, -5.2765e-03, -8.0530e-03]], [[-1.1262e-03, -1.0443e-02, -1.3592e-02], [-8.7644e-03, -4.2217e-03, -1.0785e-02], [-3.1703e-03, -1.0590e-02, -1.5116e-02]], [[ 1.8439e-03, 1.6846e-05, -8.3033e-03], [ 1.6005e-02, 1.4815e-02, -2.6095e-03], [ 1.0797e-02, 6.0982e-03, 8.5319e-03]]], [[[ 1.5449e-02, 1.9379e-02, 2.4453e-02], [-8.2671e-03, -3.1136e-03, -1.1272e-02], [-2.2751e-02, -1.7661e-02, -2.4222e-02]], [[-1.5567e-04, 6.8961e-03, 7.9915e-03], [-8.2037e-03, 1.3278e-02, 1.5326e-02], [ 2.4302e-03, 8.9262e-03, -8.3978e-03]], [[ 1.5296e-02, 1.0601e-02, 5.9473e-03], [-5.6766e-04, -1.4735e-02, -6.9817e-03], [ 1.0452e-02, 3.5118e-05, 2.3090e-03]], ..., [[-9.8157e-03, -2.4526e-02, -1.6381e-02], [-3.6321e-02, -3.9651e-02, -4.4554e-02], [-3.7024e-02, -4.4793e-02, -3.2673e-02]], [[-1.3818e-02, -6.2505e-03, -1.4857e-02], [ 2.7870e-03, 1.8952e-02, 1.0708e-02], [-7.8022e-03, 1.4748e-02, -2.2831e-03]], [[-4.8654e-03, 4.5838e-04, 5.4555e-03], [ 3.1975e-03, 1.4557e-02, 1.5148e-02], [ 4.8452e-03, 4.5664e-03, -3.4913e-03]]], [[[ 8.0266e-03, 1.4178e-03, -3.5432e-03], [ 1.3765e-02, -2.8459e-03, 1.1555e-03], [ 1.3365e-02, 1.2617e-02, 1.5632e-02]], [[-1.0262e-03, 2.0437e-03, 5.7843e-03], [ 2.0691e-03, -7.9473e-03, -4.0350e-04], [-1.1550e-02, -1.3279e-02, -5.8504e-03]], [[-8.5547e-04, -2.5176e-03, 2.1498e-03], [ 5.7375e-03, 5.0775e-03, 7.0579e-04], [ 1.4624e-02, 1.4539e-02, 1.2692e-02]], ..., [[ 1.0951e-02, 1.7389e-02, 7.9093e-03], [-5.0052e-04, -3.0944e-03, 3.6127e-03], [ 2.7981e-03, -1.5528e-03, 6.5102e-03]], [[-5.2832e-03, -6.9448e-03, 2.1588e-03], [-1.4308e-02, -1.4005e-02, -1.1656e-02], [-5.9489e-03, -1.1936e-02, -1.8381e-02]], [[ 1.1614e-02, 1.7839e-02, 1.4509e-02], [-4.2270e-03, -6.2658e-03, 9.3574e-03], [ 6.1721e-03, 4.3114e-03, 3.8757e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn2.weight&#39;, tensor([0.6991, 0.6653, 0.8050, 0.6972, 0.7429, 0.7166, 0.8169, 0.7117, 0.7871, 0.7409, 0.7381, 0.7587, 0.7115, 0.7473, 0.6901, 0.8133, 0.7270, 0.7608, 0.7326, 0.7939, 0.7090, 0.7229, 0.7582, 0.7321, 0.7245, 0.8275, 0.6900, 0.8018, 0.7766, 0.7495, 0.6455, 0.7062, 0.7924, 0.7297, 0.6831, 0.7350, 0.6992, 0.7060, 0.8206, 0.7431, 0.8019, 0.7098, 0.7645, 0.7423, 0.7268, 0.7646, 0.8384, 0.7852, 0.7227, 0.7361, 0.6984, 0.7788, 0.8081, 0.7278, 0.7378, 0.7122, 0.7698, 0.6474, 0.7863, 0.7304, 0.7230, 0.7180, 0.6955, 0.6493, 0.7447, 0.8010, 0.7296, 0.7169, 0.7342, 0.7522, 0.7489, 0.7548, 0.7062, 0.7508, 0.7236, 0.7829, 0.7772, 0.7272, 0.4848, 0.6827, 0.7334, 0.7375, 0.7069, 0.6927, 0.7186, 0.7404, 0.7580, 0.7383, 0.7011, 0.7267, 0.8583, 0.7200, 0.6374, 0.7166, 0.7377, 0.8138, 0.7864, 0.7273, 0.6848, 0.7562, 0.7536, 0.8241, 0.7619, 0.7601, 0.7533, 0.7521, 0.7676, 0.7201, 0.7233, 0.7026, 0.7447, 0.7547, 0.7035, 0.7402, 0.7694, 0.7801, 0.7642, 0.7017, 0.7654, 0.6534, 0.7203, 0.7242, 0.7440, 0.7151, 0.6988, 0.7726, 0.6821, 0.6942, 0.7860, 0.8226, 0.7281, 0.6979, 0.7458, 0.7211, 0.6999, 0.8198, 0.6694, 0.7578, 0.7138, 0.7883, 0.7139, 0.6345, 0.7663, 0.7315, 0.7366, 0.7222, 0.7494, 0.7455, 0.6998, 0.7535, 0.7184, 0.7623, 0.7175, 0.6909, 0.7052, 0.7552, 0.7182, 0.7804, 0.7189, 0.7335, 0.6760, 0.7161, 0.7675, 0.7648, 0.9492, 0.6751, 0.6900, 0.6859, 0.6784, 0.7635, 0.8123, 0.7230, 0.7256, 0.7209, 0.6943, 0.6410, 0.7425, 0.7202, 0.7104, 0.7782, 0.7586, 0.7319, 0.7272, 0.7827, 0.7557, 0.7488, 0.6957, 0.7004, 0.7164, 0.8190, 0.7998, 0.7532, 0.7421, 0.8098, 0.7643, 0.7078, 0.7375, 0.7159, 0.8365, 0.7369, 0.7080, 0.7904, 0.7349, 0.6932, 0.7060, 0.7000, 0.6970, 0.7555, 0.7784, 0.7041, 0.7606, 0.7275, 0.7521, 0.7813, 0.7344, 0.7590, 0.7539, 0.6640, 0.7080, 0.7839, 0.7489, 0.5723, 0.7198, 0.7229, 0.7760, 0.7353, 0.7413, 0.7337, 0.7359, 0.7356, 0.7246, 0.6873, 0.7580, 0.7230, 0.7096, 0.7408, 0.6619, 0.8955, 0.7002, 0.6899, 0.7169, 0.7072, 0.7628, 0.7723, 0.7296, 0.7624, 0.8232, 0.7252, 0.7065, 0.7577, 0.7307, 0.7288, 0.6989, 0.7440, 0.7526, 0.7261, 0.7537, 0.7291, 0.7376, 0.7562, 0.7272, 0.8050, 0.7056, 0.7499, 0.6009, 0.5898, 0.7299, 0.7144, 0.7480, 0.7520, 0.7170, 0.7209, 0.7617, 0.8394, 0.7232, 0.7102, 0.7452, 0.7077, 0.7312, 0.7082, 0.7525, 0.7822, 0.7300, 0.6869, 0.6453, 0.7689, 0.7758, 0.7137, 0.7030, 0.7523, 0.7892, 0.7387, 0.8440, 0.7017, 0.7532, 0.8680, 0.8041, 0.7410, 0.7866, 0.7458, 0.7551, 0.7478, 0.7532, 0.7307, 0.7267, 0.7469, 0.7792, 0.6833, 0.7519, 0.7331, 0.6890, 0.7329, 0.7633, 0.7286, 0.7748, 0.8623, 0.7044, 0.7278, 0.7248, 0.7368, 0.7880, 0.8391, 0.7452, 0.7594, 0.7004, 0.7620, 0.6836, 0.7356, 0.6905, 0.7733, 0.7806, 0.7320, 0.6464, 0.7431, 0.6887, 0.7845, 0.7810, 0.7577, 0.7486, 0.7205, 0.7759, 0.7122, 0.7077, 0.7994, 0.7711, 0.6925, 0.6866, 0.8042, 0.9293, 0.7254, 0.7075, 0.7278, 0.7147, 0.7514, 0.7479, 0.7147, 0.7274, 0.7229, 0.7539, 0.7595, 0.8068, 0.8283, 0.7511, 0.7297, 0.7734, 0.7748, 0.7371, 0.7527, 0.7549, 0.8246, 0.7781, 0.7708, 0.7329, 0.7241, 0.7188, 0.6960, 0.7100, 0.7084, 0.7443, 0.7306, 0.7413, 0.6804, 0.7337, 0.7244, 0.7483, 0.7126, 0.7304, 0.7206, 0.7292, 0.8022, 0.6661, 0.7331, 0.7961, 0.7604, 0.7437, 0.7990, 0.8034, 0.7254, 0.8667, 0.7501, 0.7658, 0.7278, 0.7034, 0.7790, 0.6968, 0.7195, 0.8099, 0.7336, 0.7108, 0.7174, 0.7439, 0.7306, 0.7255, 0.7403, 0.7282, 0.8664, 0.7177, 0.7997, 0.8339, 0.7293, 0.8138, 0.7778, 0.7736, 0.8170, 0.7409, 0.7977, 0.6940, 0.7868, 0.7872, 0.7106, 0.7141, 0.7047, 0.7124, 0.7720, 0.7903, 0.7023, 0.7302, 0.7361, 0.8106, 0.6486, 0.7403, 0.7290, 0.7048, 0.8713, 0.7356, 0.7247, 0.7511, 0.7374, 0.7388, 0.6822, 0.7548, 0.7504, 0.7000, 0.7360, 0.7641, 0.7400, 0.7195, 0.6925, 0.7364, 0.7237, 0.7998, 0.8104, 0.7358, 0.7242, 0.7299, 0.7248, 0.6738, 0.8221, 0.7322, 0.7186, 0.7062, 0.6882, 0.8020, 0.7538, 0.6641, 0.7923, 0.7735, 0.7172, 0.7724, 0.7505, 0.7162, 0.6575, 0.7682, 0.7293, 0.8312, 0.7261, 0.7500, 0.7210, 0.8675, 0.7169, 0.6830, 0.7308, 0.7440, 0.7780, 0.8315, 0.6733, 0.6958, 0.8438, 0.7144, 0.8013, 0.6875, 0.7297, 0.7081, 0.7067, 0.7372, 0.7203, 0.7971, 0.7448, 0.7151, 0.7326, 0.7243, 0.7273], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn2.bias&#39;, tensor([-0.0718, -0.1286, -0.1493, -0.0744, -0.0649, -0.0929, -0.1494, -0.0459, -0.1435, -0.0730, -0.0600, -0.1669, -0.0041, -0.1363, -0.0996, -0.1205, -0.0034, -0.1271, -0.0909, -0.1694, 0.0484, -0.0884, -0.0386, -0.0923, -0.1021, -0.1650, -0.0849, -0.1437, -0.0981, -0.1403, 0.0363, -0.0946, -0.1033, -0.0929, -0.1199, -0.0225, -0.0064, -0.1181, -0.1104, -0.1687, -0.1562, -0.1032, -0.1465, -0.1057, -0.1462, -0.1018, -0.1949, -0.0211, -0.0760, -0.1065, -0.0945, -0.0335, -0.1761, -0.0584, -0.1295, -0.1371, -0.0947, -0.1725, -0.1884, -0.1186, -0.0924, -0.0615, -0.0482, -0.0859, -0.0582, -0.1984, -0.0704, -0.0686, -0.1015, -0.0867, -0.0999, -0.0726, -0.0899, -0.1283, -0.0865, -0.0354, -0.1268, 0.0130, 0.2167, -0.0866, -0.0722, -0.0912, -0.0514, -0.0724, -0.1234, -0.1730, -0.0448, -0.1102, -0.0185, -0.1650, -0.0233, -0.1048, 0.0173, -0.0371, -0.0792, -0.1729, -0.0856, -0.0557, -0.0355, -0.1315, -0.0830, -0.1655, -0.1899, -0.1306, -0.1089, -0.1708, -0.1031, -0.0818, -0.1300, -0.1357, -0.0709, -0.1645, -0.0269, -0.0370, -0.1302, -0.0937, -0.1219, 0.0805, -0.0656, -0.0193, -0.1115, -0.0660, -0.1306, -0.0574, -0.1049, -0.0505, -0.0814, 0.0019, -0.1400, -0.1933, -0.0917, -0.0589, -0.1108, -0.1186, -0.0895, -0.1606, 0.0315, -0.0646, -0.0556, -0.1850, -0.1003, -0.0254, -0.1381, -0.1253, -0.1327, -0.1113, -0.0321, -0.1603, -0.0192, -0.0922, -0.0742, -0.1285, -0.1207, 0.0376, -0.1421, -0.1206, -0.0620, -0.0729, -0.0199, -0.0370, 0.0011, -0.0758, -0.1083, -0.1321, -0.1583, -0.1156, -0.0644, -0.0788, -0.0628, -0.0999, -0.1828, -0.1163, -0.1047, -0.0947, -0.0511, -0.0239, -0.0858, -0.1063, -0.1166, -0.1541, -0.1213, -0.1462, -0.1297, -0.1335, -0.1383, -0.0828, -0.1184, -0.0850, -0.1351, -0.1022, -0.0519, -0.1700, -0.1429, -0.1193, -0.1254, -0.0572, -0.0720, -0.0935, -0.1221, -0.0956, -0.0881, -0.1542, -0.1381, -0.0851, -0.1075, -0.0179, 0.0013, -0.0388, -0.1176, -0.0410, -0.1454, -0.1026, -0.1594, -0.0628, -0.0921, -0.1172, -0.1813, -0.1091, -0.0798, -0.1148, -0.1525, 0.1250, -0.1130, -0.0998, -0.1274, -0.1203, -0.0754, -0.1045, -0.0514, -0.1108, -0.1299, -0.0609, -0.1163, -0.0494, -0.0267, -0.0782, -0.0832, -0.1769, -0.0677, -0.0459, -0.0694, -0.0023, -0.1079, -0.0862, -0.1188, -0.1120, -0.2029, -0.0587, -0.0775, -0.0902, -0.0887, -0.1336, -0.0718, -0.0884, -0.0858, -0.0569, -0.1429, -0.1310, -0.1481, -0.0965, -0.0912, -0.1724, -0.1175, -0.0453, 0.0062, 0.1795, -0.0873, -0.0470, -0.0920, -0.1565, -0.0631, 0.0179, -0.0758, -0.0499, -0.1444, -0.1084, -0.0910, -0.0733, -0.1307, -0.0966, -0.0452, -0.1798, -0.0804, -0.0599, 0.2107, -0.1302, 0.1526, -0.0741, -0.0907, -0.1789, -0.1473, -0.0433, -0.0602, -0.0653, -0.1043, -0.1622, -0.1468, -0.0880, 0.2565, -0.1110, -0.1342, -0.1370, -0.0679, -0.1088, -0.0793, -0.1028, -0.1222, -0.1113, -0.1435, -0.0182, -0.0755, -0.1122, -0.1379, -0.1371, -0.1840, -0.1786, -0.0820, -0.1177, -0.0675, -0.0556, -0.0807, -0.1944, -0.0963, 0.1515, -0.0464, -0.1246, -0.0357, -0.0908, -0.0802, -0.0253, -0.0282, -0.0681, 0.0245, -0.1030, -0.0896, -0.0972, -0.1879, -0.1414, -0.1068, -0.0961, -0.1241, -0.0657, -0.0799, -0.1484, -0.0982, -0.0724, -0.1364, -0.1065, -0.1284, -0.1143, -0.0862, -0.0650, -0.0637, -0.1178, -0.0955, -0.0798, -0.0612, -0.1284, -0.1019, -0.1232, -0.1071, 0.0051, -0.0991, -0.0820, -0.1202, -0.1035, -0.0827, -0.1028, -0.0346, -0.1360, -0.1129, -0.1055, -0.0386, -0.1077, -0.1096, -0.1447, -0.1167, -0.0626, -0.1161, 0.0139, -0.0839, -0.0885, -0.0673, -0.0870, 0.0331, -0.0954, -0.0657, -0.0439, -0.0442, -0.1788, -0.1236, -0.1410, -0.0907, -0.1502, -0.1018, -0.1067, -0.2293, -0.1209, 0.0291, -0.1311, -0.0508, -0.0931, -0.1180, -0.1258, -0.0451, -0.1072, -0.1630, -0.0541, -0.1362, -0.0423, -0.1221, -0.0532, -0.1161, -0.0100, 0.0090, -0.1349, 0.0133, -0.1182, -0.1610, -0.0348, -0.1500, -0.0826, -0.0924, -0.2296, -0.1187, -0.1691, -0.0680, -0.1254, -0.1092, -0.0588, -0.0795, -0.0832, -0.0742, -0.0974, -0.2125, -0.1240, -0.0197, -0.1180, -0.1364, -0.1052, -0.0646, -0.1082, -0.0779, -0.1867, -0.0628, -0.2091, -0.0946, -0.0606, -0.0619, -0.0755, -0.1135, -0.1600, -0.0964, -0.1264, -0.1024, -0.1634, -0.0781, -0.0815, -0.1395, -0.0685, -0.0735, -0.1079, -0.0919, 0.0445, -0.0236, -0.0890, 0.0403, -0.1676, -0.0925, -0.0067, -0.1251, -0.0777, -0.1265, -0.1043, -0.0488, -0.1049, -0.1290, -0.0279, -0.1284, -0.1064, -0.0643, -0.0162, -0.0833, 0.0223, -0.1599, -0.0744, -0.0919, -0.1191, -0.0832, -0.0406, -0.0226, -0.0177, -0.0667, -0.0809, -0.0756, -0.0209, -0.1041, -0.1947, -0.1014, -0.0400, -0.0859, -0.0644, -0.0477, -0.0633, -0.0797, -0.0160, -0.1687, -0.1526, -0.0688, -0.0886, -0.1336, -0.0408], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn2.running_mean&#39;, tensor([-0.0073, -0.0088, -0.0550, -0.0594, -0.0868, -0.0740, -0.0326, -0.0327, -0.0135, -0.1679, -0.0994, -0.0388, -0.0501, -0.0486, -0.0385, -0.0153, -0.0302, -0.0794, -0.0433, -0.0016, -0.1600, -0.0575, -0.0310, -0.0566, -0.0480, -0.0411, -0.0462, -0.0483, -0.0455, -0.0225, -0.1092, -0.0439, -0.0048, -0.0469, -0.0407, -0.0829, -0.0549, -0.0184, -0.0229, -0.0788, -0.0733, -0.0137, -0.0136, -0.0479, -0.0541, -0.0359, -0.0655, -0.0524, -0.0183, -0.0398, -0.0681, -0.0549, -0.0175, 0.0111, -0.0498, -0.0289, -0.0521, -0.0559, -0.0309, -0.0740, -0.0559, -0.0422, -0.0268, -0.0656, -0.1239, -0.0725, -0.0712, -0.0916, -0.0497, -0.0331, -0.0770, -0.0193, -0.0433, -0.0638, -0.0501, -0.0322, -0.0060, -0.0352, 0.0512, -0.0380, -0.1020, -0.0167, -0.0181, -0.0211, -0.0895, -0.0455, -0.0108, -0.0155, -0.0505, -0.0448, -0.0353, -0.0466, 0.0081, -0.0379, -0.0358, -0.0196, -0.0108, -0.1024, 0.0045, -0.0578, -0.0832, -0.1037, -0.0410, -0.0261, -0.0870, -0.0923, -0.0463, -0.0529, -0.1030, -0.0811, -0.0566, -0.0483, -0.0229, -0.0589, -0.0158, -0.0779, -0.0521, 0.0348, -0.1063, -0.0274, -0.0749, -0.0474, -0.0546, -0.0150, 0.0003, -0.0736, -0.0098, -0.0706, -0.0228, -0.0197, -0.0566, 0.0021, -0.0233, -0.0130, -0.0131, -0.0939, 0.0326, -0.0507, -0.0370, -0.0695, -0.0423, -0.0168, -0.0350, -0.0303, -0.0522, -0.0297, -0.0512, -0.0213, -0.0240, -0.0693, 0.0018, -0.0493, -0.0524, -0.0486, -0.0868, -0.0586, -0.0621, -0.0924, -0.0308, -0.0777, -0.0210, -0.0698, -0.0315, -0.0101, -0.0861, -0.0526, -0.0267, -0.0735, -0.0322, -0.0368, -0.0530, -0.0336, -0.0612, -0.0729, -0.0223, -0.0471, -0.0567, -0.0164, -0.0309, -0.0868, -0.0725, -0.0635, -0.1747, -0.0245, 0.0009, -0.0459, -0.0680, -0.0905, -0.0300, -0.0599, -0.0875, -0.0562, -0.0260, -0.0926, -0.0460, -0.0013, -0.0428, -0.0349, -0.0465, -0.0780, -0.0295, -0.0526, -0.0526, -0.0270, -0.0608, -0.0109, -0.0047, -0.0264, -0.0880, -0.0195, -0.0474, -0.0221, -0.0507, -0.0715, -0.0139, -0.0429, -0.0216, -0.0583, -0.0881, -0.0090, -0.0714, -0.1718, -0.0360, -0.0884, -0.0490, -0.0075, -0.0247, -0.0297, 0.0051, -0.0759, -0.0215, -0.0824, -0.0265, -0.0496, -0.0565, -0.0702, -0.0369, -0.0406, -0.0696, -0.0772, -0.0296, -0.0401, -0.0235, -0.0362, 0.0125, -0.0210, -0.0669, -0.0053, 0.0172, -0.0216, -0.0390, -0.1014, -0.0707, -0.0631, -0.0831, -0.0098, 0.0013, -0.1013, -0.0066, -0.0964, -0.0343, -0.0591, -0.0774, -0.0251, -0.0370, 0.1591, -0.0905, -0.0620, -0.0247, -0.0421, -0.0396, -0.0600, -0.0473, -0.0799, -0.0384, -0.0448, -0.1015, -0.0253, -0.0073, -0.0387, -0.0930, -0.0350, -0.0595, -0.0337, -0.2035, -0.0843, 0.0443, -0.0407, -0.0438, -0.0704, -0.0646, -0.0545, 0.0098, -0.0511, -0.0580, -0.0124, -0.0365, -0.0329, 0.0083, -0.0580, -0.0440, -0.0008, -0.0779, -0.0129, -0.0032, -0.1136, -0.1173, -0.0249, -0.0023, -0.0404, -0.0535, -0.0874, -0.0570, -0.0944, -0.0631, -0.0652, -0.1014, -0.0292, -0.0256, -0.0256, -0.0544, -0.0750, -0.0474, -0.0517, -0.0474, -0.0392, -0.0148, -0.0607, -0.0187, -0.0530, -0.0548, -0.0293, -0.0319, -0.0795, -0.0477, -0.0626, -0.0257, -0.0684, -0.0025, -0.0924, 0.0003, -0.0465, -0.0855, -0.0010, -0.0264, -0.0598, -0.0547, -0.0458, -0.0641, 0.0047, -0.1025, -0.0547, -0.0266, -0.0108, -0.0702, -0.0529, -0.0751, -0.0677, -0.0399, -0.0416, -0.0792, -0.0598, -0.0434, -0.0553, -0.0354, -0.0425, -0.0265, -0.0708, -0.0865, -0.0279, -0.0253, -0.0825, -0.0499, -0.0348, -0.0386, -0.0553, -0.0385, -0.0538, -0.0238, -0.1505, -0.0694, -0.0665, 0.0387, -0.0122, 0.0082, -0.0421, -0.0664, -0.0524, -0.0754, -0.0436, -0.0726, -0.0527, -0.0093, -0.1035, -0.0193, -0.0522, -0.0676, -0.0436, -0.0565, -0.0192, -0.0221, -0.0552, -0.0510, -0.0724, -0.0281, -0.0572, -0.0539, -0.0461, 0.0090, -0.0445, -0.0383, -0.0101, -0.0092, -0.0566, -0.0536, -0.0680, -0.0568, -0.0675, -0.0487, -0.0525, -0.0961, -0.0640, -0.0378, -0.0658, -0.0100, -0.0671, -0.0418, -0.0468, -0.0234, -0.1025, -0.0617, -0.0422, -0.0347, -0.0604, -0.0524, -0.0788, -0.0369, -0.0667, -0.0328, -0.0340, -0.0557, -0.0136, -0.0403, -0.0154, -0.0885, -0.0400, -0.0361, -0.0342, -0.0053, -0.0960, -0.0766, -0.0180, -0.0539, 0.0078, -0.0963, -0.0759, -0.0017, -0.1149, -0.0061, -0.0519, -0.0482, -0.0450, -0.0619, -0.1088, -0.0146, -0.0705, -0.1154, -0.0197, -0.0045, -0.0329, -0.0834, -0.0339, -0.0944, -0.0072, -0.0008, -0.0513, -0.0745, 0.0177, -0.1264, -0.0572, -0.0256, -0.0619, -0.0701, -0.0441, -0.0869, -0.0461, -0.0286, -0.0608, -0.0515, -0.0329, -0.0751, -0.0145, -0.0591, -0.0389, 0.0539, -0.0733, -0.0332, -0.1259, -0.0313, -0.1067, -0.0497, -0.0360, -0.0751, -0.0620, -0.0727, 0.0163, -0.1029, -0.0724, -0.0291, -0.0754, -0.0306, -0.0186], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn2.running_var&#39;, tensor([0.0164, 0.0138, 0.0155, 0.0142, 0.0147, 0.0207, 0.0157, 0.0146, 0.0113, 0.0281, 0.0167, 0.0103, 0.0194, 0.0143, 0.0131, 0.0120, 0.0150, 0.0152, 0.0161, 0.0148, 0.0201, 0.0151, 0.0211, 0.0139, 0.0146, 0.0140, 0.0185, 0.0154, 0.0144, 0.0169, 0.0094, 0.0110, 0.0145, 0.0146, 0.0120, 0.0199, 0.0161, 0.0194, 0.0244, 0.0094, 0.0126, 0.0192, 0.0136, 0.0165, 0.0136, 0.0165, 0.0182, 0.0184, 0.0126, 0.0159, 0.0168, 0.0185, 0.0156, 0.0137, 0.0145, 0.0124, 0.0155, 0.0125, 0.0108, 0.0134, 0.0123, 0.0191, 0.0135, 0.0155, 0.0148, 0.0131, 0.0163, 0.0137, 0.0166, 0.0175, 0.0131, 0.0186, 0.0122, 0.0125, 0.0113, 0.0145, 0.0176, 0.0134, 0.0160, 0.0145, 0.0126, 0.0135, 0.0162, 0.0142, 0.0145, 0.0127, 0.0147, 0.0165, 0.0151, 0.0160, 0.0186, 0.0131, 0.0110, 0.0141, 0.0145, 0.0102, 0.0132, 0.0179, 0.0120, 0.0185, 0.0131, 0.0176, 0.0122, 0.0147, 0.0120, 0.0114, 0.0207, 0.0121, 0.0126, 0.0134, 0.0206, 0.0142, 0.0134, 0.0196, 0.0144, 0.0161, 0.0126, 0.0238, 0.0156, 0.0163, 0.0124, 0.0134, 0.0183, 0.0138, 0.0121, 0.0170, 0.0164, 0.0128, 0.0205, 0.0172, 0.0147, 0.0131, 0.0151, 0.0125, 0.0159, 0.0179, 0.0165, 0.0110, 0.0133, 0.0137, 0.0118, 0.0109, 0.0142, 0.0151, 0.0127, 0.0160, 0.0110, 0.0132, 0.0124, 0.0125, 0.0156, 0.0135, 0.0119, 0.0131, 0.0127, 0.0148, 0.0164, 0.0151, 0.0138, 0.0148, 0.0153, 0.0130, 0.0139, 0.0139, 0.0162, 0.0114, 0.0124, 0.0202, 0.0145, 0.0173, 0.0138, 0.0110, 0.0132, 0.0114, 0.0147, 0.0100, 0.0185, 0.0126, 0.0162, 0.0111, 0.0143, 0.0195, 0.0121, 0.0181, 0.0155, 0.0144, 0.0108, 0.0206, 0.0158, 0.0137, 0.0230, 0.0188, 0.0129, 0.0130, 0.0149, 0.0163, 0.0148, 0.0159, 0.0173, 0.0221, 0.0112, 0.0116, 0.0135, 0.0136, 0.0128, 0.0128, 0.0106, 0.0145, 0.0140, 0.0173, 0.0116, 0.0112, 0.0182, 0.0175, 0.0134, 0.0180, 0.0105, 0.0101, 0.0157, 0.0163, 0.0135, 0.0160, 0.0166, 0.0147, 0.0149, 0.0152, 0.0157, 0.0129, 0.0118, 0.0182, 0.0181, 0.0129, 0.0161, 0.0119, 0.0159, 0.0144, 0.0120, 0.0158, 0.0156, 0.0180, 0.0122, 0.0130, 0.0094, 0.0132, 0.0148, 0.0169, 0.0151, 0.0128, 0.0133, 0.0156, 0.0149, 0.0138, 0.0117, 0.0134, 0.0183, 0.0128, 0.0156, 0.0129, 0.0128, 0.0194, 0.0167, 0.0186, 0.0119, 0.0131, 0.0098, 0.0278, 0.0122, 0.0183, 0.0140, 0.0134, 0.0142, 0.0132, 0.0165, 0.0153, 0.0106, 0.0105, 0.0135, 0.0142, 0.0198, 0.0128, 0.0177, 0.0140, 0.0233, 0.0127, 0.0173, 0.0129, 0.0498, 0.0153, 0.0137, 0.0124, 0.0153, 0.0134, 0.0113, 0.0123, 0.0186, 0.0113, 0.0166, 0.0129, 0.0226, 0.0141, 0.0131, 0.0117, 0.0167, 0.0128, 0.0162, 0.0181, 0.0138, 0.0163, 0.0113, 0.0169, 0.0154, 0.0121, 0.0156, 0.0154, 0.0131, 0.0171, 0.0256, 0.0156, 0.0142, 0.0136, 0.0112, 0.0149, 0.0130, 0.0450, 0.0139, 0.0112, 0.0108, 0.0106, 0.0148, 0.0157, 0.0221, 0.0156, 0.0112, 0.0200, 0.0126, 0.0133, 0.0220, 0.0119, 0.0152, 0.0144, 0.0225, 0.0146, 0.0193, 0.0209, 0.0142, 0.0148, 0.0093, 0.0143, 0.0201, 0.0128, 0.0178, 0.0164, 0.0163, 0.0141, 0.0128, 0.0147, 0.0151, 0.0198, 0.0166, 0.0155, 0.0157, 0.0187, 0.0181, 0.0132, 0.0143, 0.0175, 0.0234, 0.0129, 0.0163, 0.0128, 0.0215, 0.0150, 0.0158, 0.0144, 0.0134, 0.0112, 0.0133, 0.0128, 0.0122, 0.0173, 0.0166, 0.0159, 0.0177, 0.0119, 0.0140, 0.0117, 0.0163, 0.0216, 0.0143, 0.0132, 0.0151, 0.0176, 0.0110, 0.0120, 0.0138, 0.0142, 0.0116, 0.0130, 0.0134, 0.0146, 0.0124, 0.0183, 0.0142, 0.0125, 0.0119, 0.0132, 0.0217, 0.0150, 0.0144, 0.0132, 0.0183, 0.0135, 0.0195, 0.0190, 0.0167, 0.0243, 0.0205, 0.0134, 0.0160, 0.0200, 0.0200, 0.0161, 0.0132, 0.0123, 0.0125, 0.0203, 0.0141, 0.0115, 0.0145, 0.0116, 0.0151, 0.0153, 0.0126, 0.0168, 0.0114, 0.0139, 0.0157, 0.0121, 0.0114, 0.0096, 0.0173, 0.0122, 0.0156, 0.0229, 0.0213, 0.0179, 0.0150, 0.0155, 0.0151, 0.0151, 0.0163, 0.0176, 0.0156, 0.0127, 0.0233, 0.0173, 0.0197, 0.0183, 0.0208, 0.0130, 0.0180, 0.0118, 0.0141, 0.0307, 0.0183, 0.0202, 0.0128, 0.0106, 0.0169, 0.0151, 0.0204, 0.0159, 0.0171, 0.0168, 0.0136, 0.0210, 0.0140, 0.0135, 0.0166, 0.0132, 0.0148, 0.0159, 0.0171, 0.0116, 0.0135, 0.0143, 0.0109, 0.0120, 0.0150, 0.0168, 0.0186, 0.0147, 0.0168, 0.0145, 0.0134, 0.0107, 0.0193, 0.0127, 0.0150, 0.0163, 0.0152, 0.0207, 0.0159, 0.0178, 0.0196, 0.0109, 0.0144, 0.0234, 0.0174, 0.0125, 0.0149, 0.0157], device=&#39;cuda:0&#39;)), (&#39;0.7.0.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.7.0.downsample.0.weight&#39;, tensor([[[[-0.0029]], [[-0.0336]], [[ 0.0036]], ..., [[-0.0303]], [[-0.0022]], [[ 0.0017]]], [[[ 0.0403]], [[-0.0193]], [[-0.0065]], ..., [[ 0.0011]], [[ 0.0305]], [[ 0.0071]]], [[[ 0.0504]], [[ 0.0113]], [[ 0.0352]], ..., [[ 0.0631]], [[ 0.0031]], [[-0.0149]]], ..., [[[ 0.0133]], [[-0.0159]], [[ 0.0001]], ..., [[ 0.0017]], [[-0.0090]], [[ 0.0263]]], [[[ 0.0203]], [[ 0.0038]], [[ 0.0407]], ..., [[-0.0139]], [[-0.0001]], [[-0.0122]]], [[[ 0.0221]], [[-0.0322]], [[-0.0084]], ..., [[ 0.0069]], [[ 0.0171]], [[ 0.0574]]]], device=&#39;cuda:0&#39;)), (&#39;0.7.0.downsample.1.weight&#39;, tensor([0.3250, 0.3834, 0.5027, 0.4226, 0.4536, 0.5763, 0.4685, 0.3915, 0.6548, 0.5460, 0.4586, 0.4677, 0.3328, 0.4221, 0.3631, 0.7673, 0.4885, 0.4276, 0.4112, 0.4369, 0.6012, 0.3685, 0.3885, 0.4665, 0.3411, 0.4756, 0.4674, 0.4750, 0.3988, 0.6695, 0.3386, 0.4501, 0.4831, 0.3157, 0.3423, 0.4527, 0.3406, 0.4460, 0.3656, 0.4043, 0.4454, 0.3106, 0.4188, 0.3916, 0.3902, 0.4701, 0.5480, 0.6338, 0.4531, 0.3977, 0.3916, 0.5528, 0.4476, 0.4611, 0.4938, 0.4106, 0.4888, 0.6435, 0.4728, 0.4412, 0.4284, 0.4646, 0.4672, 0.4173, 0.3691, 0.3946, 0.3356, 0.5159, 0.4511, 0.4531, 0.4261, 0.4699, 0.4415, 0.4058, 0.3645, 0.6059, 0.4200, 0.3070, 1.0595, 0.3047, 0.3782, 0.5279, 0.3698, 0.4669, 0.4430, 0.5685, 0.4929, 0.4763, 0.4459, 0.5875, 0.7491, 0.4703, 0.5618, 0.3934, 0.4325, 0.5552, 0.3869, 0.4419, 0.4466, 0.4682, 0.3890, 0.5115, 0.4621, 0.3563, 0.3880, 0.4055, 0.3651, 0.3597, 0.4124, 0.4050, 0.3348, 0.3862, 0.3791, 0.3262, 0.4593, 0.4239, 0.3686, 0.2685, 0.5155, 0.3619, 0.3881, 0.5126, 0.4441, 0.3479, 0.4142, 0.3728, 0.3800, 0.5218, 0.5471, 0.5647, 0.3806, 0.3225, 0.3301, 0.3337, 0.3883, 0.5133, 0.3261, 0.5344, 0.3263, 0.3664, 0.4491, 0.3577, 0.5034, 0.4392, 0.3830, 0.4821, 0.5571, 0.3608, 0.4713, 0.4268, 0.3959, 0.4936, 0.4290, 0.4823, 0.3536, 0.3954, 0.4018, 0.4707, 0.4692, 0.3782, 0.5108, 0.4699, 0.4076, 0.4764, 0.6825, 0.3475, 0.4536, 0.3663, 0.3282, 0.4265, 0.3222, 0.4041, 0.4027, 0.4389, 0.4106, 0.3374, 0.6146, 0.4741, 0.4052, 0.3984, 0.3542, 0.3781, 0.4210, 0.5501, 0.4629, 0.4260, 0.2929, 0.3979, 0.5060, 0.5583, 0.4561, 0.5595, 0.3937, 0.4143, 0.5314, 0.5002, 0.3943, 0.3763, 0.5813, 0.4239, 0.4446, 0.4072, 0.4326, 0.4302, 0.4326, 0.3592, 0.3654, 0.3284, 0.5398, 0.3229, 0.4407, 0.3419, 0.4951, 0.4680, 0.4604, 0.4368, 0.3915, 0.3272, 0.4853, 0.4748, 0.3311, 0.4233, 0.4947, 0.4231, 0.4814, 0.4305, 0.3617, 0.3674, 0.3938, 0.4515, 0.5455, 0.4802, 0.5028, 0.3819, 0.4862, 0.3895, 0.4401, 0.4718, 0.3796, 0.4050, 0.4191, 0.3709, 0.6933, 0.3908, 0.5307, 0.3951, 0.4750, 0.4268, 0.3823, 0.3854, 0.4991, 0.4120, 0.3390, 0.4738, 0.4872, 0.5858, 0.5000, 0.5899, 0.4939, 0.4426, 0.4195, 0.4584, 0.4117, 0.4378, 0.4582, 0.3287, 0.4077, 0.3728, 0.3843, 0.4831, 0.4265, 0.5137, 0.5418, 0.5297, 0.4290, 0.3940, 0.3990, 0.3686, 0.3988, 0.4784, 0.3850, 0.5549, 0.4272, 0.3594, 0.3851, 0.4928, 0.1924, 0.4093, 0.3377, 0.4698, 0.3929, 0.3469, 0.6176, 0.4146, 0.4934, 0.5896, 0.4654, 0.3609, 0.1849, 0.3432, 0.3431, 0.4914, 0.4041, 0.5053, 0.3594, 0.4739, 0.4169, 0.4321, 0.4754, 0.5325, 0.4254, 0.4344, 0.5271, 0.4518, 0.5068, 0.5821, 0.5462, 0.3526, 0.4532, 0.4073, 0.5322, 0.4356, 0.3868, 0.2195, 0.3746, 0.3709, 0.4545, 0.3932, 0.3224, 0.4821, 0.5341, 0.3858, 0.2080, 0.3914, 0.3646, 0.3705, 0.5625, 0.4866, 0.3847, 0.4779, 0.5337, 0.5136, 0.3433, 0.4043, 0.5089, 0.3960, 0.3829, 0.5480, 0.6141, 0.3766, 0.3783, 0.3354, 0.6754, 0.4383, 0.3938, 0.4490, 0.3434, 0.5758, 0.4947, 0.5310, 0.4056, 0.4958, 0.4212, 0.5204, 0.4814, 0.6066, 0.4300, 0.3581, 0.3643, 0.4418, 0.4001, 0.5419, 0.3677, 0.3723, 0.5029, 0.3809, 0.3726, 0.3344, 0.3695, 0.3177, 0.4048, 0.4034, 0.3990, 0.3308, 0.4846, 0.3759, 0.4331, 0.3829, 0.3986, 0.3756, 0.3973, 0.5071, 0.6502, 0.4161, 0.4372, 0.4799, 0.4028, 0.5288, 0.6576, 0.3826, 0.3073, 0.4317, 0.3479, 0.4323, 0.3863, 0.4330, 0.4416, 0.4627, 0.3749, 0.3545, 0.4626, 0.5550, 0.4105, 0.2914, 0.3809, 0.4698, 0.3789, 0.4414, 0.4851, 0.4267, 0.7626, 0.4766, 0.3134, 0.5354, 0.4583, 0.4856, 0.4173, 0.3755, 0.3704, 0.4080, 0.3457, 0.3861, 0.4308, 0.4514, 0.4023, 0.3733, 0.3433, 0.3563, 0.4302, 0.3800, 0.4142, 0.3946, 0.3403, 0.6283, 0.3672, 1.0468, 0.5066, 0.4525, 0.5402, 0.4471, 0.3699, 0.5108, 0.3987, 0.5170, 0.4635, 0.4160, 0.5328, 0.3681, 0.5344, 0.3756, 0.5411, 0.5095, 0.4111, 0.2794, 0.4018, 0.3740, 0.3746, 0.5531, 0.5024, 0.5238, 0.3613, 0.2979, 0.4108, 0.4025, 0.3061, 0.4335, 0.3597, 0.4905, 0.4599, 0.4749, 0.3564, 0.6121, 0.3909, 0.3777, 0.4020, 0.3463, 0.5329, 0.3442, 0.4969, 0.4166, 0.3600, 0.4255, 0.3856, 0.4406, 0.6040, 0.3699, 0.4254, 0.4396, 0.5339, 0.4839, 0.4250, 0.3453, 0.3734, 0.4012, 0.5657, 0.4842, 0.3518, 0.3740, 0.3961, 0.3578, 0.3881, 0.4615], device=&#39;cuda:0&#39;)), (&#39;0.7.0.downsample.1.bias&#39;, tensor([-0.0718, -0.1286, -0.1493, -0.0744, -0.0649, -0.0929, -0.1494, -0.0459, -0.1435, -0.0730, -0.0600, -0.1669, -0.0041, -0.1363, -0.0996, -0.1205, -0.0034, -0.1271, -0.0909, -0.1694, 0.0484, -0.0884, -0.0386, -0.0923, -0.1021, -0.1650, -0.0849, -0.1437, -0.0981, -0.1403, 0.0363, -0.0946, -0.1033, -0.0929, -0.1199, -0.0225, -0.0064, -0.1181, -0.1104, -0.1687, -0.1562, -0.1032, -0.1465, -0.1057, -0.1462, -0.1018, -0.1949, -0.0211, -0.0760, -0.1065, -0.0945, -0.0335, -0.1761, -0.0584, -0.1295, -0.1371, -0.0947, -0.1725, -0.1884, -0.1186, -0.0924, -0.0615, -0.0482, -0.0859, -0.0582, -0.1984, -0.0704, -0.0686, -0.1015, -0.0867, -0.0999, -0.0726, -0.0899, -0.1283, -0.0865, -0.0354, -0.1268, 0.0130, 0.2167, -0.0866, -0.0722, -0.0912, -0.0514, -0.0724, -0.1234, -0.1730, -0.0448, -0.1102, -0.0185, -0.1650, -0.0233, -0.1048, 0.0173, -0.0371, -0.0792, -0.1729, -0.0856, -0.0557, -0.0355, -0.1315, -0.0830, -0.1655, -0.1899, -0.1306, -0.1089, -0.1708, -0.1031, -0.0818, -0.1300, -0.1357, -0.0709, -0.1645, -0.0269, -0.0370, -0.1302, -0.0937, -0.1219, 0.0805, -0.0656, -0.0193, -0.1115, -0.0660, -0.1306, -0.0574, -0.1049, -0.0505, -0.0814, 0.0019, -0.1400, -0.1933, -0.0917, -0.0589, -0.1108, -0.1186, -0.0895, -0.1606, 0.0315, -0.0646, -0.0556, -0.1850, -0.1003, -0.0254, -0.1381, -0.1253, -0.1327, -0.1113, -0.0321, -0.1603, -0.0192, -0.0922, -0.0742, -0.1285, -0.1207, 0.0376, -0.1421, -0.1206, -0.0620, -0.0729, -0.0199, -0.0370, 0.0011, -0.0758, -0.1083, -0.1321, -0.1583, -0.1156, -0.0644, -0.0788, -0.0628, -0.0999, -0.1828, -0.1163, -0.1047, -0.0947, -0.0511, -0.0239, -0.0858, -0.1063, -0.1166, -0.1541, -0.1213, -0.1462, -0.1297, -0.1335, -0.1383, -0.0828, -0.1184, -0.0850, -0.1351, -0.1022, -0.0519, -0.1700, -0.1429, -0.1193, -0.1254, -0.0572, -0.0720, -0.0935, -0.1221, -0.0956, -0.0881, -0.1542, -0.1381, -0.0851, -0.1075, -0.0179, 0.0013, -0.0388, -0.1176, -0.0410, -0.1454, -0.1026, -0.1594, -0.0628, -0.0921, -0.1172, -0.1813, -0.1091, -0.0798, -0.1148, -0.1525, 0.1250, -0.1130, -0.0998, -0.1274, -0.1203, -0.0754, -0.1045, -0.0514, -0.1108, -0.1299, -0.0609, -0.1163, -0.0494, -0.0267, -0.0782, -0.0832, -0.1769, -0.0677, -0.0459, -0.0694, -0.0023, -0.1079, -0.0862, -0.1188, -0.1120, -0.2029, -0.0587, -0.0775, -0.0902, -0.0887, -0.1336, -0.0718, -0.0884, -0.0858, -0.0569, -0.1429, -0.1310, -0.1481, -0.0965, -0.0912, -0.1724, -0.1175, -0.0453, 0.0062, 0.1795, -0.0873, -0.0470, -0.0920, -0.1565, -0.0631, 0.0179, -0.0758, -0.0499, -0.1444, -0.1084, -0.0910, -0.0733, -0.1307, -0.0966, -0.0452, -0.1798, -0.0804, -0.0599, 0.2107, -0.1302, 0.1526, -0.0741, -0.0907, -0.1789, -0.1473, -0.0433, -0.0602, -0.0653, -0.1043, -0.1622, -0.1468, -0.0880, 0.2565, -0.1110, -0.1342, -0.1370, -0.0679, -0.1088, -0.0793, -0.1028, -0.1222, -0.1113, -0.1435, -0.0182, -0.0755, -0.1122, -0.1379, -0.1371, -0.1840, -0.1786, -0.0820, -0.1177, -0.0675, -0.0556, -0.0807, -0.1944, -0.0963, 0.1515, -0.0464, -0.1246, -0.0357, -0.0908, -0.0802, -0.0253, -0.0282, -0.0681, 0.0245, -0.1030, -0.0896, -0.0972, -0.1879, -0.1414, -0.1068, -0.0961, -0.1241, -0.0657, -0.0799, -0.1484, -0.0982, -0.0724, -0.1364, -0.1065, -0.1284, -0.1143, -0.0862, -0.0650, -0.0637, -0.1178, -0.0955, -0.0798, -0.0612, -0.1284, -0.1019, -0.1232, -0.1071, 0.0051, -0.0991, -0.0820, -0.1202, -0.1035, -0.0827, -0.1028, -0.0346, -0.1360, -0.1129, -0.1055, -0.0386, -0.1077, -0.1096, -0.1447, -0.1167, -0.0626, -0.1161, 0.0139, -0.0839, -0.0885, -0.0673, -0.0870, 0.0331, -0.0954, -0.0657, -0.0439, -0.0442, -0.1788, -0.1236, -0.1410, -0.0907, -0.1502, -0.1018, -0.1067, -0.2293, -0.1209, 0.0291, -0.1311, -0.0508, -0.0931, -0.1180, -0.1258, -0.0451, -0.1072, -0.1630, -0.0541, -0.1362, -0.0423, -0.1221, -0.0532, -0.1161, -0.0100, 0.0090, -0.1349, 0.0133, -0.1182, -0.1610, -0.0348, -0.1500, -0.0826, -0.0924, -0.2296, -0.1187, -0.1691, -0.0680, -0.1254, -0.1092, -0.0588, -0.0795, -0.0832, -0.0742, -0.0974, -0.2125, -0.1240, -0.0197, -0.1180, -0.1364, -0.1052, -0.0646, -0.1082, -0.0779, -0.1867, -0.0628, -0.2091, -0.0946, -0.0606, -0.0619, -0.0755, -0.1135, -0.1600, -0.0964, -0.1264, -0.1024, -0.1634, -0.0781, -0.0815, -0.1395, -0.0685, -0.0735, -0.1079, -0.0919, 0.0445, -0.0236, -0.0890, 0.0403, -0.1676, -0.0925, -0.0067, -0.1251, -0.0777, -0.1265, -0.1043, -0.0488, -0.1049, -0.1290, -0.0279, -0.1284, -0.1064, -0.0643, -0.0162, -0.0833, 0.0223, -0.1599, -0.0744, -0.0919, -0.1191, -0.0832, -0.0406, -0.0226, -0.0177, -0.0667, -0.0809, -0.0756, -0.0209, -0.1041, -0.1947, -0.1014, -0.0400, -0.0859, -0.0644, -0.0477, -0.0633, -0.0797, -0.0160, -0.1687, -0.1526, -0.0688, -0.0886, -0.1336, -0.0408], device=&#39;cuda:0&#39;)), (&#39;0.7.0.downsample.1.running_mean&#39;, tensor([ 0.0102, -0.0167, -0.0639, -0.0321, -0.0219, 0.0977, 0.0154, -0.0142, 0.0387, 0.0161, 0.0175, -0.0170, -0.0510, -0.0283, -0.0046, -0.0019, 0.0168, 0.0338, -0.0265, -0.0146, -0.0132, 0.0138, 0.0114, 0.0131, -0.0291, -0.0106, 0.0121, 0.0239, 0.0972, -0.0486, 0.0047, 0.0193, -0.0476, 0.0420, 0.0424, 0.0546, 0.0803, -0.0030, -0.0260, 0.0070, 0.0068, -0.0004, -0.0045, -0.0330, -0.0236, 0.0162, -0.0198, 0.1089, -0.0298, -0.0233, 0.0863, 0.0997, 0.0177, 0.0899, -0.0258, 0.0216, 0.0124, 0.1509, 0.0214, 0.0169, 0.0067, -0.0235, 0.0512, 0.0095, -0.0360, -0.0177, -0.0392, 0.0122, -0.0033, 0.0157, -0.0208, -0.0074, 0.0347, 0.0234, 0.0966, 0.0631, -0.0218, 0.0463, 0.1982, 0.0021, 0.0117, 0.0062, 0.0740, 0.0435, 0.0507, -0.0442, 0.0757, 0.0489, 0.0544, 0.0183, 0.0175, 0.0655, 0.0120, -0.0482, 0.0137, 0.0265, -0.0122, -0.0720, 0.1634, -0.0171, 0.0145, 0.0773, 0.0117, 0.0083, 0.0641, -0.0256, 0.0135, -0.0787, 0.0515, -0.0292, 0.0252, -0.0271, -0.0436, -0.0164, -0.0213, -0.0802, -0.0860, -0.0307, 0.0089, 0.0280, -0.0132, 0.0120, -0.0101, 0.0211, -0.0198, -0.0537, 0.0584, -0.0226, -0.0272, -0.0149, 0.0020, -0.0131, -0.0715, -0.0317, -0.0136, -0.0297, -0.0553, -0.1271, -0.0022, 0.0364, 0.0601, -0.0017, -0.0490, -0.0437, -0.0575, 0.0473, -0.0035, -0.0195, 0.0905, -0.0305, 0.0452, 0.0252, -0.0402, 0.0926, -0.0552, -0.0360, 0.0729, -0.0298, 0.0239, 0.1011, 0.1349, -0.0440, -0.0099, -0.0910, -0.0026, -0.0025, -0.0437, 0.0202, -0.0734, -0.0191, 0.0097, -0.0033, -0.0143, 0.0787, 0.0059, 0.0009, 0.0652, 0.0095, 0.0375, -0.0198, 0.0660, -0.0461, 0.0098, -0.0067, 0.0051, -0.0255, 0.0364, -0.0631, 0.0365, 0.0003, -0.0114, 0.0318, -0.0580, 0.0111, -0.0588, 0.0811, -0.0165, 0.0278, -0.0099, 0.0143, 0.0161, -0.0009, 0.0056, 0.0950, 0.1092, 0.0352, 0.0130, 0.0027, -0.0080, -0.0111, -0.0184, 0.0080, -0.0297, 0.0152, -0.0495, -0.0596, -0.0168, 0.0282, 0.0379, -0.0127, -0.0325, -0.0764, -0.0386, 0.0080, -0.0154, 0.0276, -0.0124, 0.0309, 0.0242, 0.0641, 0.0343, 0.0487, 0.0343, -0.0096, 0.1314, -0.0416, -0.0151, -0.0242, -0.0746, -0.0724, 0.0553, 0.0340, 0.0420, 0.0362, -0.0404, -0.0280, -0.0557, 0.0585, 0.0038, 0.0141, 0.1010, -0.0419, -0.0317, 0.0498, 0.0323, -0.0382, 0.0148, -0.0117, 0.0301, -0.0111, 0.0044, -0.0032, -0.0318, -0.0736, 0.0441, 0.1301, -0.0235, -0.0594, 0.0402, 0.0505, 0.0035, 0.0499, 0.0764, -0.0150, 0.0841, 0.0474, -0.0069, 0.0386, -0.0014, 0.0425, -0.0510, -0.0599, -0.0073, 0.0535, -0.2526, -0.0095, -0.0391, -0.0302, -0.0260, 0.0258, -0.0026, 0.0212, -0.0660, -0.0151, -0.0090, 0.0710, -0.0023, -0.0056, -0.0845, -0.0405, 0.0234, 0.0397, -0.0028, 0.0596, -0.0507, 0.0402, -0.0569, -0.0073, 0.0657, 0.1046, -0.0025, 0.0704, -0.0357, -0.0446, -0.0307, -0.0386, 0.1157, -0.0166, 0.0498, 0.0151, 0.0221, 0.0181, 0.0060, -0.1406, -0.0101, 0.0559, 0.0337, 0.0226, 0.0082, -0.0748, 0.0626, -0.0443, -0.0448, -0.0054, -0.0954, -0.0765, 0.0074, 0.0521, -0.0164, -0.0336, -0.0162, 0.0025, 0.0337, -0.0204, 0.0139, 0.0378, -0.0865, 0.0197, -0.0625, 0.0264, -0.0175, -0.0162, 0.0817, -0.0021, -0.0712, 0.0113, 0.0202, 0.0456, 0.0378, -0.0010, -0.0364, 0.0308, -0.1055, 0.0451, 0.0067, 0.0574, 0.0037, -0.0473, 0.0150, -0.0369, -0.0219, 0.0073, -0.0026, 0.0298, 0.0907, -0.0017, -0.0048, 0.0259, 0.0239, -0.0617, 0.0433, 0.0596, 0.0038, -0.0308, -0.0843, -0.0212, 0.0972, -0.0183, 0.0327, -0.0408, 0.0183, -0.0616, -0.0170, 0.0459, -0.0696, -0.0316, 0.0640, -0.1003, -0.0388, 0.0321, -0.0647, -0.0576, -0.0150, -0.0064, 0.0418, -0.0012, -0.0359, -0.0098, 0.0371, 0.0125, 0.0522, -0.0208, -0.0210, -0.0034, 0.0500, -0.0803, -0.0530, -0.0124, -0.0130, 0.0293, 0.0446, -0.0540, 0.0369, 0.0337, 0.0259, -0.0010, -0.0084, 0.0182, 0.0320, -0.0145, 0.0372, 0.0345, 0.0179, 0.0353, 0.0352, -0.0132, -0.0040, -0.0672, 0.0254, 0.0320, -0.0389, 0.0627, -0.0907, -0.0417, -0.0087, 0.2259, 0.0146, 0.0198, 0.0333, 0.0095, -0.0605, -0.0670, 0.0116, -0.0195, 0.0434, -0.0598, 0.0695, 0.0099, -0.0636, 0.0323, 0.0848, -0.0230, -0.0522, 0.0370, -0.0098, 0.0018, 0.0784, -0.0523, -0.0127, 0.1053, -0.0440, 0.0483, 0.0272, -0.0246, -0.0274, -0.0109, -0.0529, 0.1086, 0.0352, 0.0194, 0.0105, 0.1299, -0.0098, 0.0019, -0.0399, 0.1015, 0.0029, 0.0147, -0.0267, -0.0062, 0.0801, 0.0195, -0.0731, -0.0653, -0.0017, 0.0182, -0.0096, 0.0212, 0.0414, 0.0822, 0.0554, -0.0269, -0.0490, 0.0041, 0.1320, 0.0480, -0.0430, -0.0039, 0.0333, -0.0943, -0.0393, -0.0090], device=&#39;cuda:0&#39;)), (&#39;0.7.0.downsample.1.running_var&#39;, tensor([0.0085, 0.0102, 0.0162, 0.0140, 0.0133, 0.0215, 0.0095, 0.0085, 0.0161, 0.0207, 0.0157, 0.0093, 0.0097, 0.0097, 0.0081, 0.0188, 0.0120, 0.0129, 0.0114, 0.0142, 0.0285, 0.0085, 0.0109, 0.0125, 0.0071, 0.0086, 0.0179, 0.0140, 0.0097, 0.0229, 0.0083, 0.0160, 0.0130, 0.0070, 0.0063, 0.0120, 0.0102, 0.0121, 0.0117, 0.0080, 0.0093, 0.0105, 0.0091, 0.0080, 0.0101, 0.0218, 0.0145, 0.0173, 0.0117, 0.0096, 0.0106, 0.0185, 0.0115, 0.0114, 0.0121, 0.0087, 0.0118, 0.0135, 0.0082, 0.0116, 0.0174, 0.0143, 0.0125, 0.0090, 0.0093, 0.0100, 0.0094, 0.0166, 0.0114, 0.0169, 0.0139, 0.0127, 0.0117, 0.0084, 0.0111, 0.0145, 0.0118, 0.0065, 0.0603, 0.0079, 0.0101, 0.0145, 0.0110, 0.0133, 0.0135, 0.0167, 0.0195, 0.0165, 0.0138, 0.0178, 0.0217, 0.0159, 0.0142, 0.0080, 0.0109, 0.0092, 0.0102, 0.0122, 0.0105, 0.0135, 0.0124, 0.0206, 0.0096, 0.0087, 0.0083, 0.0079, 0.0106, 0.0087, 0.0110, 0.0098, 0.0096, 0.0107, 0.0104, 0.0136, 0.0111, 0.0126, 0.0070, 0.0095, 0.0097, 0.0106, 0.0077, 0.0180, 0.0172, 0.0086, 0.0101, 0.0102, 0.0114, 0.0130, 0.0225, 0.0154, 0.0103, 0.0101, 0.0079, 0.0083, 0.0132, 0.0110, 0.0083, 0.0103, 0.0071, 0.0082, 0.0108, 0.0085, 0.0133, 0.0107, 0.0092, 0.0143, 0.0104, 0.0078, 0.0174, 0.0140, 0.0153, 0.0132, 0.0106, 0.0110, 0.0094, 0.0074, 0.0101, 0.0106, 0.0118, 0.0111, 0.0148, 0.0117, 0.0127, 0.0098, 0.0163, 0.0079, 0.0131, 0.0141, 0.0081, 0.0119, 0.0067, 0.0100, 0.0101, 0.0112, 0.0161, 0.0058, 0.0311, 0.0161, 0.0105, 0.0068, 0.0083, 0.0116, 0.0142, 0.0140, 0.0118, 0.0117, 0.0046, 0.0125, 0.0139, 0.0108, 0.0101, 0.0178, 0.0094, 0.0138, 0.0138, 0.0255, 0.0126, 0.0101, 0.0207, 0.0112, 0.0103, 0.0075, 0.0090, 0.0125, 0.0118, 0.0071, 0.0092, 0.0069, 0.0128, 0.0121, 0.0110, 0.0071, 0.0150, 0.0267, 0.0135, 0.0101, 0.0087, 0.0056, 0.0150, 0.0130, 0.0061, 0.0131, 0.0164, 0.0116, 0.0172, 0.0132, 0.0077, 0.0083, 0.0082, 0.0149, 0.0156, 0.0146, 0.0131, 0.0086, 0.0157, 0.0083, 0.0105, 0.0141, 0.0159, 0.0093, 0.0091, 0.0088, 0.0129, 0.0116, 0.0140, 0.0095, 0.0089, 0.0100, 0.0099, 0.0131, 0.0236, 0.0150, 0.0085, 0.0120, 0.0154, 0.0150, 0.0196, 0.0221, 0.0122, 0.0118, 0.0133, 0.0176, 0.0087, 0.0106, 0.0112, 0.0124, 0.0120, 0.0103, 0.0100, 0.0119, 0.0143, 0.0155, 0.0302, 0.0150, 0.0096, 0.0078, 0.0086, 0.0096, 0.0140, 0.0146, 0.0107, 0.0144, 0.0113, 0.0111, 0.0158, 0.0106, 0.0087, 0.0109, 0.0069, 0.0104, 0.0094, 0.0106, 0.0103, 0.0104, 0.0197, 0.0114, 0.0096, 0.0090, 0.0080, 0.0065, 0.0080, 0.0110, 0.0102, 0.0162, 0.0147, 0.0185, 0.0112, 0.0115, 0.0091, 0.0299, 0.0135, 0.0096, 0.0124, 0.0120, 0.0110, 0.0196, 0.0341, 0.0114, 0.0149, 0.0111, 0.0119, 0.0094, 0.0094, 0.0116, 0.0103, 0.0099, 0.0159, 0.0122, 0.0092, 0.0095, 0.0140, 0.0098, 0.0067, 0.0146, 0.0095, 0.0055, 0.0171, 0.0091, 0.0081, 0.0117, 0.0187, 0.0142, 0.0118, 0.0119, 0.0144, 0.0108, 0.0078, 0.0115, 0.0149, 0.0086, 0.0111, 0.0075, 0.0365, 0.0092, 0.0110, 0.0110, 0.0093, 0.0188, 0.0151, 0.0128, 0.0103, 0.0161, 0.0110, 0.0253, 0.0125, 0.0415, 0.0131, 0.0079, 0.0095, 0.0111, 0.0160, 0.0097, 0.0084, 0.0141, 0.0192, 0.0084, 0.0112, 0.0072, 0.0083, 0.0071, 0.0100, 0.0129, 0.0149, 0.0065, 0.0088, 0.0070, 0.0120, 0.0161, 0.0169, 0.0100, 0.0114, 0.0210, 0.0158, 0.0125, 0.0120, 0.0100, 0.0075, 0.0172, 0.0096, 0.0086, 0.0065, 0.0101, 0.0075, 0.0089, 0.0109, 0.0113, 0.0107, 0.0173, 0.0091, 0.0087, 0.0125, 0.0152, 0.0135, 0.0073, 0.0093, 0.0085, 0.0148, 0.0094, 0.0133, 0.0092, 0.0470, 0.0157, 0.0071, 0.0150, 0.0110, 0.0180, 0.0112, 0.0090, 0.0094, 0.0096, 0.0100, 0.0086, 0.0099, 0.0156, 0.0084, 0.0091, 0.0082, 0.0070, 0.0114, 0.0082, 0.0115, 0.0083, 0.0111, 0.0170, 0.0110, 0.0275, 0.0171, 0.0198, 0.0105, 0.0140, 0.0101, 0.0148, 0.0100, 0.0122, 0.0114, 0.0105, 0.0198, 0.0068, 0.0190, 0.0086, 0.0115, 0.0093, 0.0076, 0.0094, 0.0122, 0.0106, 0.0109, 0.0176, 0.0158, 0.0198, 0.0139, 0.0064, 0.0105, 0.0121, 0.0060, 0.0151, 0.0069, 0.0120, 0.0134, 0.0108, 0.0081, 0.0177, 0.0098, 0.0075, 0.0097, 0.0111, 0.0158, 0.0108, 0.0111, 0.0137, 0.0080, 0.0093, 0.0109, 0.0119, 0.0112, 0.0074, 0.0131, 0.0085, 0.0128, 0.0204, 0.0100, 0.0113, 0.0102, 0.0118, 0.0320, 0.0090, 0.0079, 0.0135, 0.0154, 0.0074, 0.0099, 0.0093], device=&#39;cuda:0&#39;)), (&#39;0.7.0.downsample.1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.7.1.conv1.weight&#39;, tensor([[[[ 4.9603e-03, -4.5666e-03, 6.6231e-03], [ 2.5145e-03, 3.3227e-03, 1.4076e-02], [-6.7722e-03, -2.3659e-04, 1.4401e-02]], [[ 1.2507e-03, -1.3401e-02, -9.4420e-03], [-5.0731e-03, -1.6727e-02, -8.8509e-03], [ 2.0906e-03, -7.3602e-03, 6.8586e-03]], [[ 2.1464e-02, 2.4983e-02, 1.0530e-02], [ 4.7156e-03, 1.3456e-03, -1.2494e-03], [ 3.8962e-03, -4.4342e-03, -2.2015e-03]], ..., [[ 7.1665e-03, 1.5908e-02, 6.3351e-03], [ 7.7807e-03, 2.1198e-02, 1.0450e-02], [ 9.6712e-03, 1.8090e-02, 1.2071e-02]], [[-4.6700e-03, -4.2699e-03, 3.0721e-03], [-2.3985e-02, -2.7729e-02, -2.1145e-02], [-1.2901e-02, -2.3873e-02, -2.0643e-02]], [[-2.4421e-02, -2.0803e-02, -1.5865e-02], [ 3.4097e-03, 9.6807e-03, 1.0724e-02], [ 1.9219e-03, 1.2004e-02, 1.3836e-02]]], [[[ 5.3572e-03, 1.6567e-02, 1.6641e-02], [ 1.3303e-02, 2.4417e-02, 1.9018e-02], [-4.2973e-03, 6.4345e-04, -9.9706e-03]], [[-1.5918e-02, -2.0494e-02, -1.8980e-02], [-1.1058e-02, -1.3912e-02, -2.0067e-02], [-1.3867e-02, -1.0353e-02, -5.2365e-03]], [[-2.5294e-02, -3.5527e-02, -2.4557e-02], [-3.3334e-02, -5.1523e-02, -3.5564e-02], [-9.8460e-03, -1.8708e-02, -1.3866e-02]], ..., [[ 8.3368e-03, 1.0393e-02, 5.9014e-03], [-5.4410e-03, -7.6284e-03, 1.0900e-03], [-6.5007e-04, -1.7607e-02, -2.7968e-03]], [[-1.0134e-02, -1.3750e-02, -1.4538e-02], [ 1.1233e-02, 1.2865e-02, 1.2988e-02], [ 1.7162e-02, 1.4159e-02, 1.5815e-02]], [[ 1.2842e-02, 1.4041e-02, 1.2388e-02], [ 9.6333e-03, 1.2347e-02, 1.9282e-02], [ 3.6128e-03, -1.2043e-03, 4.1414e-04]]], [[[-2.6474e-03, -6.9338e-03, -8.8880e-03], [ 1.6454e-02, 2.0267e-02, 1.2614e-02], [ 8.1384e-03, 3.4534e-03, 7.0030e-05]], [[-1.1021e-02, -1.0703e-02, -2.1523e-02], [-2.6150e-02, -2.3810e-02, -2.8718e-02], [-1.7089e-02, -2.0402e-02, -2.0642e-02]], [[-2.8896e-02, -3.5007e-02, -3.1300e-02], [-4.8524e-03, -1.1899e-02, -1.5609e-02], [-8.6981e-03, -7.0205e-03, -1.3066e-02]], ..., [[-2.0946e-02, -2.7598e-02, -2.3069e-02], [-1.3460e-02, -2.1098e-02, -1.9600e-02], [-6.5300e-03, -1.3931e-02, -1.3258e-02]], [[-1.1174e-02, -2.1261e-02, -9.0047e-03], [ 1.0243e-03, -1.0026e-02, -7.6535e-03], [ 5.6214e-03, -1.4817e-03, -6.7885e-03]], [[-3.5087e-03, -9.1673e-03, -1.2705e-03], [ 1.2542e-02, 1.9342e-02, 6.2324e-03], [ 2.9913e-02, 3.6524e-02, 2.1879e-02]]], ..., [[[-7.0885e-03, -5.6009e-03, -9.8806e-03], [-1.6232e-02, -7.3401e-03, -6.2806e-03], [-1.8415e-02, -2.2268e-02, -2.2944e-02]], [[ 8.4261e-04, -7.0929e-03, -9.4298e-04], [-1.7673e-02, -2.7186e-02, -1.2510e-02], [-1.5940e-02, -2.2691e-02, -1.2200e-02]], [[-2.4072e-03, -3.7826e-03, 5.7798e-03], [-2.9846e-03, -1.0128e-02, -6.0865e-03], [ 6.1434e-03, -7.5624e-03, -9.6931e-04]], ..., [[-2.1616e-02, -2.6096e-02, -1.5421e-02], [-1.2628e-02, -9.6632e-03, -3.8632e-03], [-8.8674e-03, -1.0841e-02, -1.5723e-02]], [[-2.4071e-02, -2.2853e-02, -1.1575e-02], [-1.0268e-02, -4.0133e-03, 6.0966e-03], [-2.1934e-03, -1.8983e-04, 7.6070e-03]], [[ 1.6752e-03, 1.9345e-02, 7.0260e-03], [ 6.5946e-03, 1.7333e-02, -4.9502e-03], [ 4.3930e-03, 1.5847e-02, -1.0456e-02]]], [[[-1.3875e-02, -1.4840e-02, -1.0108e-02], [ 2.1311e-03, -2.0477e-03, -3.1773e-03], [ 2.2225e-02, 1.8826e-02, 1.1481e-02]], [[-1.6880e-02, 8.1104e-04, 1.7466e-02], [-9.0771e-03, 2.2798e-03, 6.4911e-03], [ 1.3609e-03, -4.1811e-03, -2.2478e-02]], [[-8.4229e-03, -3.4737e-03, 1.9481e-02], [-1.0650e-02, -1.8056e-02, -1.4926e-03], [-1.3438e-02, -9.9269e-03, 9.0620e-03]], ..., [[-1.7811e-02, -1.4326e-03, 2.6963e-03], [-8.2402e-04, 6.8059e-06, 5.6128e-04], [ 6.3452e-05, -4.3707e-03, -5.2190e-04]], [[ 6.2117e-03, -1.9158e-03, 2.4776e-04], [ 1.8535e-02, 6.0397e-04, 2.5043e-03], [ 1.3323e-02, -5.1949e-04, -8.4859e-03]], [[-1.2460e-02, -1.7692e-03, 6.2690e-03], [ 1.7787e-04, -6.6068e-03, -7.7386e-03], [-9.3910e-03, -6.0159e-03, 7.5292e-03]]], [[[ 2.9203e-03, 8.8502e-03, 1.7668e-02], [ 1.9211e-02, 2.3569e-02, 2.3970e-02], [ 2.4522e-02, 2.8411e-02, 1.6571e-02]], [[-1.4786e-02, -1.8653e-02, -1.5443e-02], [-6.9179e-03, -6.9374e-03, -1.3178e-02], [ 6.7411e-04, -1.1382e-03, -1.8377e-03]], [[ 1.1556e-02, 7.4238e-03, 3.5646e-03], [ 1.7068e-03, 5.4289e-03, 5.4699e-03], [ 8.7627e-03, 7.3887e-03, 1.0159e-02]], ..., [[ 2.9958e-02, 3.2263e-02, 3.3074e-02], [ 2.2381e-02, 1.9015e-02, 2.5242e-02], [-1.5857e-02, -2.2501e-02, -4.9816e-03]], [[ 4.8222e-03, -4.3394e-03, 3.1569e-03], [-1.2405e-02, -2.3917e-02, -5.7814e-03], [-6.0499e-03, -1.3851e-02, -1.0667e-02]], [[ 3.0372e-03, 4.1986e-03, 2.6740e-03], [-4.0551e-03, 9.2846e-04, -9.2553e-04], [-3.3984e-03, 2.1850e-04, -3.4711e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn1.weight&#39;, tensor([0.2470, 0.2283, 0.2101, 0.2611, 0.2895, 0.2245, 0.3467, 0.2380, 0.1911, 0.2564, 0.2098, 0.2902, 0.2658, 0.1832, 0.2409, 0.1622, 0.2483, 0.2540, 0.2243, 0.2435, 0.2441, 0.1896, 0.2171, 0.2313, 0.3126, 0.2189, 0.2772, 0.2349, 0.2393, 0.2267, 0.2449, 0.2485, 0.2282, 0.2233, 0.2224, 0.2543, 0.2755, 0.2603, 0.2602, 0.2977, 0.2987, 0.2126, 0.1966, 0.2285, 0.2243, 0.2489, 0.2668, 0.2362, 0.2218, 0.2280, 0.1950, 0.2620, 0.2134, 0.2419, 0.2426, 0.2256, 0.2221, 0.2370, 0.2445, 0.2174, 0.2175, 0.2232, 0.3168, 0.2421, 0.2233, 0.1751, 0.1929, 0.2521, 0.2615, 0.2095, 0.2181, 0.1970, 0.2256, 0.2787, 0.2421, 0.2276, 0.2727, 0.2277, 0.2343, 0.2629, 0.2635, 0.2022, 0.2284, 0.2080, 0.2451, 0.2356, 0.1971, 0.2405, 0.1264, 0.1779, 0.2458, 0.1999, 0.2300, 0.2795, 0.2870, 0.2684, 0.2378, 0.2035, 0.2303, 0.2398, 0.2341, 0.2021, 0.2069, 0.2399, 0.2293, 0.2238, 0.2379, 0.2426, 0.2109, 0.2284, 0.2091, 0.2757, 0.2332, 0.2349, 0.2167, 0.2246, 0.3198, 0.2531, 0.2493, 0.2486, 0.2085, 0.2364, 0.2228, 0.2013, 0.2309, 0.2432, 0.2213, 0.2282, 0.2333, 0.2314, 0.2411, 0.2200, 0.2481, 0.2403, 0.2367, 0.2131, 0.2143, 0.2323, 0.2453, 0.3000, 0.2233, 0.2501, 0.2267, 0.2325, 0.2698, 0.2253, 0.2557, 0.2253, 0.2555, 0.2188, 0.2345, 0.2466, 0.2313, 0.2423, 0.2647, 0.2086, 0.2758, 0.2114, 0.2561, 0.2135, 0.2003, 0.1997, 0.2408, 0.2029, 0.2005, 0.2226, 0.2269, 0.2544, 0.2263, 0.2213, 0.3117, 0.2665, 0.2628, 0.2495, 0.2501, 0.2703, 0.2253, 0.2062, 0.2479, 0.2695, 0.2670, 0.2620, 0.2058, 0.2223, 0.2042, 0.2662, 0.2537, 0.2186, 0.2218, 0.2284, 0.2447, 0.2182, 0.2056, 0.2222, 0.1778, 0.2728, 0.2221, 0.2385, 0.2519, 0.2004, 0.1980, 0.2300, 0.2411, 0.2418, 0.2355, 0.2377, 0.2843, 0.2239, 0.2644, 0.1278, 0.2355, 0.2238, 0.2688, 0.2734, 0.1891, 0.2018, 0.2401, 0.2622, 0.2186, 0.3373, 0.2870, 0.2301, 0.2145, 0.2582, 0.2185, 0.2177, 0.2565, 0.2314, 0.2267, 0.2351, 0.2152, 0.2009, 0.2048, 0.2273, 0.2430, 0.2511, 0.2426, 0.2371, 0.2322, 0.2345, 0.2812, 0.2231, 0.2307, 0.2532, 0.1844, 0.2064, 0.2377, 0.2173, 0.2654, 0.2168, 0.2330, 0.2300, 0.2344, 0.1901, 0.1866, 0.2436, 0.2267, 0.2797, 0.2098, 0.2487, 0.2306, 0.2014, 0.1818, 0.2384, 0.2293, 0.2027, 0.2152, 0.2350, 0.2393, 0.2255, 0.2363, 0.2098, 0.2270, 0.2454, 0.2988, 0.1589, 0.2177, 0.2473, 0.2299, 0.2352, 0.2250, 0.2532, 0.1666, 0.2172, 0.2589, 0.2105, 0.2524, 0.2311, 0.1976, 0.2225, 0.2254, 0.2387, 0.2436, 0.2034, 0.2783, 0.2428, 0.2769, 0.2474, 0.2210, 0.2664, 0.2571, 0.2478, 0.2021, 0.2242, 0.2277, 0.2505, 0.2217, 0.2151, 0.2404, 0.2286, 0.1986, 0.2516, 0.2160, 0.2658, 0.1936, 0.2791, 0.1956, 0.2325, 0.2699, 0.2392, 0.2585, 0.1935, 0.2068, 0.2140, 0.2318, 0.2292, 0.2231, 0.2190, 0.2407, 0.2074, 0.2926, 0.2449, 0.2653, 0.2556, 0.2216, 0.2428, 0.2636, 0.2577, 0.2304, 0.2254, 0.2157, 0.2415, 0.2234, 0.2393, 0.2673, 0.2731, 0.2389, 0.2509, 0.2361, 0.2244, 0.2797, 0.2259, 0.2557, 0.2205, 0.1598, 0.2556, 0.2428, 0.2988, 0.2205, 0.2100, 0.2549, 0.2110, 0.2584, 0.2772, 0.2990, 0.1912, 0.2644, 0.2335, 0.2115, 0.2132, 0.2398, 0.1384, 0.2121, 0.1924, 0.2065, 0.2381, 0.2520, 0.2208, 0.2383, 0.2614, 0.2738, 0.1842, 0.2232, 0.2101, 0.2306, 0.2453, 0.2709, 0.2329, 0.2126, 0.1898, 0.2620, 0.2486, 0.2425, 0.2378, 0.2294, 0.2522, 0.2621, 0.2361, 0.2090, 0.2318, 0.2614, 0.2377, 0.1856, 0.2237, 0.2034, 0.2449, 0.2550, 0.2310, 0.2354, 0.2250, 0.2128, 0.1996, 0.2195, 0.2785, 0.2354, 0.2298, 0.1493, 0.2379, 0.2368, 0.2362, 0.2508, 0.2659, 0.1975, 0.2124, 0.2471, 0.2274, 0.2358, 0.2212, 0.2519, 0.2470, 0.2030, 0.2335, 0.2099, 0.2075, 0.2322, 0.1920, 0.2233, 0.2214, 0.2037, 0.2197, 0.2245, 0.2156, 0.2284, 0.2457, 0.2912, 0.2336, 0.2322, 0.2342, 0.2319, 0.2333, 0.2190, 0.2876, 0.2280, 0.3019, 0.2616, 0.2314, 0.2217, 0.2303, 0.2351, 0.2046, 0.2120, 0.2261, 0.2519, 0.1886, 0.2660, 0.1972, 0.2152, 0.2432, 0.2490, 0.2023, 0.2735, 0.2796, 0.1850, 0.2620, 0.2093, 0.2472, 0.2076, 0.2230, 0.2116, 0.2685, 0.2417, 0.2797, 0.2219, 0.2077, 0.2207, 0.2459, 0.2261, 0.2419, 0.2152, 0.2539, 0.2288, 0.2655, 0.2009, 0.2744, 0.2646, 0.2537, 0.2305, 0.2513, 0.2819, 0.2907, 0.2066, 0.1506, 0.2411, 0.2204, 0.2187, 0.2285, 0.2080, 0.2025, 0.2263, 0.2542, 0.1904, 0.2139], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn1.bias&#39;, tensor([-0.2681, -0.2449, -0.1973, -0.2467, -0.3254, -0.2167, -0.1905, -0.2515, -0.1603, -0.2133, -0.1694, -0.2859, -0.2416, -0.1360, -0.2462, -0.1441, -0.2149, -0.2604, -0.2210, -0.2039, -0.2034, -0.1476, -0.1817, -0.2266, -0.3802, -0.2112, -0.3038, -0.2148, -0.2058, -0.1735, -0.2465, -0.2526, -0.1870, -0.2078, -0.1886, -0.2356, -0.2580, -0.2928, -0.2330, -0.3358, -0.2756, -0.1847, -0.1390, -0.1530, -0.2188, -0.2584, -0.2655, -0.2510, -0.1638, -0.1939, -0.1508, -0.2830, -0.2010, -0.2367, -0.2584, -0.2207, -0.1674, -0.2294, -0.2033, -0.2078, -0.2096, -0.1843, -0.3274, -0.1597, -0.1825, -0.1508, -0.1440, -0.2319, -0.2120, -0.1906, -0.1716, -0.1626, -0.2065, -0.2838, -0.2248, -0.2395, -0.2726, -0.2047, -0.1887, -0.2586, -0.2978, -0.1589, -0.2155, -0.1801, -0.2288, -0.2083, -0.2024, -0.2603, 0.0396, -0.1321, -0.2263, -0.2073, -0.2170, -0.3012, -0.2904, -0.2409, -0.2072, -0.2109, -0.1926, -0.2106, -0.2284, -0.1294, -0.2054, -0.2069, -0.1372, -0.1970, -0.1506, -0.2039, -0.1836, -0.1879, -0.1500, -0.2807, -0.2282, -0.1808, -0.1402, -0.2028, -0.2954, -0.2642, -0.2871, -0.2348, -0.1994, -0.1964, -0.1878, -0.2047, -0.2137, -0.2285, -0.2040, -0.1928, -0.2424, -0.1901, -0.2561, -0.2200, -0.2558, -0.2436, -0.2309, -0.1715, -0.2454, -0.1979, -0.2007, -0.2786, -0.1917, -0.2773, -0.1906, -0.1796, -0.2150, -0.2186, -0.2897, -0.1940, -0.2599, -0.1957, -0.2155, -0.2165, -0.2095, -0.2119, -0.2652, -0.1645, -0.3205, -0.1356, -0.2938, -0.0981, -0.1596, -0.2017, -0.1253, -0.1493, -0.1648, -0.2072, -0.1632, -0.2516, -0.1622, -0.1538, -0.3178, -0.2620, -0.2615, -0.2438, -0.2539, -0.2585, -0.2194, -0.1582, -0.2421, -0.2317, -0.1966, -0.2400, -0.1808, -0.2186, -0.1755, -0.2905, -0.2484, -0.1695, -0.2159, -0.1905, -0.1912, -0.2040, -0.1388, -0.1934, -0.2243, -0.3048, -0.1684, -0.2125, -0.2487, -0.1678, -0.1796, -0.2377, -0.2086, -0.2021, -0.1726, -0.2272, -0.3598, -0.1917, -0.1991, 0.0148, -0.2147, -0.1820, -0.3347, -0.2890, -0.1793, -0.1489, -0.2668, -0.3080, -0.1819, -0.3805, -0.3069, -0.2174, -0.1761, -0.2553, -0.1838, -0.1134, -0.2542, -0.2148, -0.2203, -0.2170, -0.1876, -0.1578, -0.1606, -0.1920, -0.2126, -0.2498, -0.2583, -0.2371, -0.2712, -0.2328, -0.3142, -0.1726, -0.1894, -0.2398, -0.2011, -0.1638, -0.2156, -0.1362, -0.1816, -0.1747, -0.1827, -0.2265, -0.2083, -0.1484, -0.1399, -0.2156, -0.2167, -0.3354, -0.1692, -0.2201, -0.2616, -0.1674, -0.1519, -0.2040, -0.2434, -0.1475, -0.1948, -0.2090, -0.2273, -0.2141, -0.2564, -0.1553, -0.1848, -0.2182, -0.2982, -0.0975, -0.2130, -0.2467, -0.2518, -0.1956, -0.1515, -0.2507, -0.1148, -0.1685, -0.2665, -0.2075, -0.2504, -0.2101, -0.1566, -0.1904, -0.1544, -0.1900, -0.1990, -0.1671, -0.2738, -0.2407, -0.3129, -0.2224, -0.1876, -0.2199, -0.2510, -0.2654, -0.1874, -0.2214, -0.1693, -0.2395, -0.2066, -0.2145, -0.2064, -0.2251, -0.1640, -0.2638, -0.1822, -0.2872, -0.1264, -0.2704, -0.1493, -0.2393, -0.2686, -0.2262, -0.2417, -0.1593, -0.1630, -0.1882, -0.2530, -0.1659, -0.1904, -0.1399, -0.2194, -0.1702, -0.3848, -0.1968, -0.2547, -0.2318, -0.1882, -0.2184, -0.2427, -0.2992, -0.1919, -0.1615, -0.1833, -0.2125, -0.1993, -0.2094, -0.2756, -0.2961, -0.2074, -0.2432, -0.2272, -0.1966, -0.2879, -0.2048, -0.2396, -0.1963, -0.0389, -0.2399, -0.2091, -0.3291, -0.1827, -0.1797, -0.2535, -0.1873, -0.2729, -0.2705, -0.2729, -0.1563, -0.2316, -0.1958, -0.2051, -0.1860, -0.2010, -0.0211, -0.1595, -0.1307, -0.1890, -0.2071, -0.2116, -0.1893, -0.2741, -0.2648, -0.2063, -0.1774, -0.1925, -0.1656, -0.2121, -0.2130, -0.2712, -0.2189, -0.1703, -0.1582, -0.2942, -0.2279, -0.2050, -0.2267, -0.2315, -0.2491, -0.2045, -0.2138, -0.1617, -0.2303, -0.2988, -0.2446, -0.1287, -0.1815, -0.1644, -0.2303, -0.2257, -0.1711, -0.2306, -0.2443, -0.1625, -0.1455, -0.2128, -0.3214, -0.2025, -0.2141, 0.0647, -0.2220, -0.2432, -0.2485, -0.2269, -0.2471, -0.1817, -0.2361, -0.2344, -0.2335, -0.2072, -0.2107, -0.2420, -0.2012, -0.1687, -0.2120, -0.1733, -0.1348, -0.1856, -0.1758, -0.1754, -0.1888, -0.1696, -0.1974, -0.1576, -0.2243, -0.1700, -0.2727, -0.3282, -0.2316, -0.2316, -0.2287, -0.1753, -0.2344, -0.2202, -0.2634, -0.2412, -0.3316, -0.2841, -0.1974, -0.1931, -0.2345, -0.1994, -0.1878, -0.1756, -0.2127, -0.2546, -0.1448, -0.2446, -0.1515, -0.2014, -0.2254, -0.2200, -0.1439, -0.2845, -0.2683, -0.2153, -0.2417, -0.1286, -0.2019, -0.1679, -0.1645, -0.1917, -0.3235, -0.2670, -0.2873, -0.1538, -0.1665, -0.1926, -0.2358, -0.2318, -0.1406, -0.1229, -0.2387, -0.2467, -0.3020, -0.1576, -0.2544, -0.2711, -0.2529, -0.1675, -0.2901, -0.2641, -0.2820, -0.1890, -0.0498, -0.2742, -0.2398, -0.1934, -0.2291, -0.1716, -0.1697, -0.2155, -0.2143, -0.1379, -0.2128], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn1.running_mean&#39;, tensor([-1.8364e+00, -1.6431e+00, -1.3023e+00, -1.3870e+00, -1.8145e+00, -8.2497e-01, -2.7780e+00, -1.6116e+00, -1.4736e+00, -2.9520e+00, -1.4194e+00, -1.6729e+00, -2.0480e+00, -1.1267e+00, -1.4410e+00, 4.7541e-01, -2.4857e+00, -2.2752e+00, -1.3608e+00, -2.2450e+00, -2.0190e+00, -5.3007e-01, -1.1721e+00, -1.4708e+00, -2.5862e+00, -1.0701e+00, -1.4829e+00, -1.9224e+00, -1.9426e+00, -1.8873e+00, -1.4936e+00, -1.5816e+00, -1.7658e+00, -1.6273e+00, -2.0672e+00, -1.5368e+00, -1.1357e+00, -2.0344e+00, -1.8303e+00, -1.7885e+00, -2.7478e+00, -1.0370e+00, -1.2069e+00, -1.7899e+00, -9.4325e-01, -1.4526e+00, -1.9457e+00, -1.3340e+00, -2.4065e+00, -2.4477e+00, -1.2653e+00, -1.5065e+00, -1.1680e+00, -8.1217e-01, -1.7800e+00, -1.8380e+00, -1.5962e+00, -1.7220e+00, -9.9069e-01, -1.2502e+00, -1.5936e+00, -1.1494e+00, -2.6944e+00, -1.7510e+00, -2.1388e+00, -7.0107e-01, -1.6361e+00, -1.8787e+00, -1.8100e+00, -8.6790e-01, -1.1032e+00, -5.2191e-01, -1.2745e+00, -1.5634e+00, -1.1531e+00, -1.0155e+00, -2.1180e+00, -9.4004e-01, -1.5234e+00, -1.6353e+00, -1.9460e+00, -1.2211e+00, -1.6246e+00, -1.4445e+00, -8.9793e-01, -1.8857e+00, 4.5212e+00, -1.3880e+00, 1.0423e+00, -5.7671e-01, -1.5355e+00, -1.4793e-01, -1.2986e+00, -2.1820e+00, -2.6045e+00, -1.2626e+00, -1.7142e+00, -1.2234e+00, -1.5226e+00, -1.6726e+00, -1.3586e+00, -1.3978e+00, -6.6209e-01, -1.3759e+00, -2.4794e+00, -1.4454e+00, -3.4774e+00, -2.1721e+00, -1.4702e+00, -1.6821e+00, -1.3249e+00, -2.0606e+00, -1.0752e+00, -1.4748e+00, -1.9529e+00, -9.0856e-01, -2.8944e+00, -1.3577e+00, -1.4812e+00, -1.8188e+00, -8.0521e-01, -1.7735e+00, -1.5433e+00, 9.6352e-01, -1.6119e+00, -1.1154e+00, -1.2354e+00, -1.4752e+00, -1.2102e+00, -2.2659e+00, -1.8977e+00, -6.7696e-01, -1.9926e+00, -1.2094e+00, -9.0967e-01, -9.1693e-01, -3.2322e-01, -2.3041e+00, -1.4634e+00, -2.5813e+00, -1.2319e+00, -1.0212e+00, -1.2146e+00, -2.2107e+00, -2.2412e+00, -1.2087e+00, -1.7385e+00, -1.1760e+00, -1.3346e+00, -1.9097e+00, -2.6494e+00, -1.7401e+00, -1.2202e+00, -1.3031e+00, -2.1049e+00, -8.0226e-01, -1.8676e+00, -1.0951e+00, -1.6950e+00, -2.5768e+00, -7.8289e-01, -8.4544e-01, -3.5134e+00, -1.3394e+00, -1.2559e+00, -2.4437e+00, -2.1305e+00, -1.4284e+00, -1.7700e+00, -1.5591e+00, -1.9213e+00, -1.7282e+00, -2.1686e+00, -1.4045e+00, -1.5210e+00, -2.0760e+00, -2.0337e+00, -1.5828e+00, -1.4224e+00, -2.5695e+00, -2.6520e+00, -1.1755e+00, -1.2835e+00, -2.3677e+00, -1.5719e+00, -1.4080e+00, -1.9288e+00, -7.7823e-01, -1.3919e+00, -1.7228e+00, -1.5475e+00, -8.7509e-01, -1.5830e+00, -1.6898e+00, 3.5168e-01, -2.3429e+00, -1.8949e+00, -1.4852e+00, -1.5941e+00, -4.5877e-01, -4.8919e-01, -1.4481e+00, -1.6149e+00, -1.5434e+00, -1.7098e+00, -1.3876e+00, -2.1397e+00, -9.1512e-01, -2.0400e+00, 2.7782e-03, -1.2532e+00, -1.8397e+00, -1.6058e+00, -2.1751e+00, -1.3690e+00, -9.2390e-01, -7.0193e-01, -1.1754e+00, -5.5129e-01, -2.4405e+00, -1.2907e+00, -2.2013e+00, -1.0862e+00, -1.9481e+00, -1.9453e+00, -2.7840e+00, -2.2017e+00, -1.5886e+00, -1.0546e+00, -1.6065e+00, -7.9597e-01, -1.5615e+00, -1.7858e+00, -1.7027e+00, -2.0194e+00, -2.0443e+00, -1.4117e+00, -1.4466e+00, -1.4128e+00, -1.6859e+00, -1.1552e+00, -1.7154e+00, -1.5834e+00, -1.2568e+00, 4.9355e-02, -1.7217e+00, -1.4929e+00, -1.2280e+00, -2.4243e+00, -1.7705e+00, -1.9506e+00, -1.2058e+00, -1.5280e+00, -9.3923e-01, -1.0734e+00, -1.4754e+00, -1.3666e+00, -2.3354e+00, -1.2128e+00, -1.9159e+00, -9.8018e-01, -1.1770e+00, -1.3885e+00, -2.2204e+00, -7.4528e-01, -1.1074e+00, -1.8970e+00, -1.3890e+00, -1.2392e+00, -1.2791e+00, -2.0256e+00, -1.9353e+00, -1.1793e+00, -1.5807e+00, -2.1016e+00, -1.2645e-01, -1.7814e+00, -1.9742e+00, -1.4483e+00, -1.4181e+00, -1.1913e+00, -1.5319e+00, -6.4865e-01, -1.3310e+00, -1.6225e+00, -4.8717e-01, -2.1055e+00, -2.0639e+00, -2.1947e+00, -2.1118e+00, -2.2581e+00, -1.7148e+00, -2.1479e+00, -8.9946e-01, -1.9625e+00, -1.8071e+00, -2.4886e+00, -1.9287e+00, -8.3099e-01, -2.1683e+00, -1.8960e+00, -1.7830e+00, -1.3180e+00, -9.2421e-01, -2.0701e+00, -1.6841e+00, -1.8116e+00, -1.0348e+00, -1.8364e+00, -1.3895e+00, -1.0848e+00, -1.6725e+00, -1.5427e+00, -2.1061e+00, -1.9994e+00, -2.9829e+00, -1.0444e+00, -2.2917e+00, -1.6111e+00, -1.6674e+00, -1.7592e+00, -1.6356e+00, -1.0471e+00, -2.0638e+00, -1.7677e+00, -1.9260e+00, -5.4226e-01, -2.2288e+00, -1.2632e+00, -1.5291e+00, -2.1249e+00, -1.9172e+00, -1.5569e+00, -1.3191e+00, -1.1513e+00, -1.7850e+00, -1.4558e+00, -1.4446e+00, -6.9540e-01, -1.4761e+00, -1.1475e+00, -1.8969e+00, -1.6705e+00, -2.4483e+00, -2.1808e+00, -1.5926e+00, -1.6879e+00, -1.9261e+00, -1.7613e+00, -1.5595e+00, -1.9062e+00, -1.2709e+00, -2.1251e+00, -1.2771e+00, -5.0171e-01, -1.5696e+00, -1.8831e+00, -2.1503e+00, -1.6829e+00, -1.4519e+00, -1.5833e+00, -6.8792e-01, -1.4867e+00, -3.5452e+00, -2.9209e+00, -1.2403e+00, -2.0256e+00, -1.6287e+00, -1.2398e+00, -1.2273e+00, -1.6301e+00, -7.7899e-01, -9.0437e-01, -1.4415e+00, -6.2412e-01, -1.2959e+00, -1.9456e+00, -1.7237e+00, 1.1712e-01, -1.5885e+00, -2.0685e+00, -8.2296e-02, -1.8566e+00, -1.3931e+00, -1.7483e+00, -1.5583e+00, -2.0493e+00, -1.0538e+00, -1.4774e+00, -1.3328e+00, -1.2720e+00, -2.0770e+00, -1.7830e+00, -1.6733e+00, -1.5753e+00, -1.2555e+00, -2.4635e+00, -1.9606e+00, -1.6430e+00, -1.3587e+00, -1.4679e+00, -1.5352e+00, -9.2254e-01, -1.4857e+00, -1.2117e+00, -1.7375e+00, -1.8881e+00, -1.9141e+00, -1.0231e+00, -1.1486e+00, -1.9156e+00, -5.8154e-01, -1.1190e+00, -2.1610e+00, -1.8911e+00, -9.0702e-01, 1.0441e-01, -1.3828e+00, -1.4217e+00, -1.7364e+00, -1.8366e+00, -1.8724e+00, -8.6960e-01, -2.6777e-01, -1.4679e+00, -1.8076e+00, -1.5546e+00, -1.5331e+00, -1.9616e+00, -1.8108e+00, -1.4261e+00, -1.2723e+00, -9.8693e-01, -2.1698e+00, -1.3474e+00, -1.3609e+00, -1.8189e+00, -1.3946e+00, -2.0606e+00, -1.0572e+00, -1.6336e+00, -1.8274e+00, -1.6606e+00, -1.3638e+00, -2.9279e+00, -1.7729e+00, -1.1768e+00, -1.4678e+00, -1.3101e+00, -1.5003e+00, -1.4010e+00, -2.5073e+00, -6.2544e-01, -2.1091e+00, -2.2412e+00, -1.0576e+00, -1.2952e+00, -1.2492e+00, -1.8990e+00, -1.0715e+00, -1.5838e+00, -6.9510e-01, -1.7231e+00, -1.1578e+00, -2.5476e+00, -8.7279e-01, -6.4682e-01, -1.9113e+00, -1.3673e+00, -1.3368e+00, -2.1191e+00, -2.5048e+00, 2.9257e+00, -1.6732e+00, -1.9337e+00, -1.9978e+00, -2.0944e+00, -1.5570e+00, -8.8448e-01, -1.9216e+00, -8.3518e-01, -1.8613e+00, -1.0471e+00, -1.1300e+00, -7.5586e-01, -1.3320e+00, -1.8315e+00, -2.8022e+00, -2.2996e+00, -1.5575e+00, -9.0003e-01, -1.1582e+00, -5.0205e-01, -2.0075e+00, -1.9095e+00, -2.7258e+00, -1.7387e+00, -2.1532e+00, -2.1509e+00, -2.0474e+00, -6.6915e-01, 7.4175e-01, -9.8441e-01, -1.3164e+00, -9.5721e-01, -1.8659e+00, -5.5248e-01, -1.5465e+00, -1.6261e+00, -1.8306e+00, -1.2759e+00, -1.4174e+00], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn1.running_var&#39;, tensor([1.4641, 1.3767, 1.5139, 1.5806, 0.8666, 1.1215, 4.5627, 1.0126, 1.1085, 1.1810, 0.9017, 0.8100, 1.0538, 0.9739, 1.1982, 0.7941, 1.4844, 1.4028, 1.0097, 1.7232, 1.3301, 0.8800, 1.2394, 1.1953, 1.0053, 0.6741, 0.9358, 1.4309, 0.9774, 1.2831, 0.8655, 0.7966, 1.2813, 1.4519, 1.1157, 1.2659, 1.0299, 0.8631, 1.4080, 0.9475, 1.5194, 0.9873, 1.0591, 1.4590, 0.8068, 1.0431, 1.1388, 0.7970, 2.3228, 1.4563, 0.9092, 1.0355, 1.0342, 1.6366, 0.9482, 1.1340, 0.9849, 0.8311, 1.0162, 0.8609, 1.1730, 1.0897, 1.1166, 1.6764, 1.0732, 0.9601, 1.1202, 0.7209, 1.4641, 0.8795, 1.4907, 0.7479, 0.8896, 0.9324, 1.0155, 0.9441, 1.8628, 1.1720, 1.1318, 1.1396, 1.1871, 0.9002, 1.2039, 0.9451, 1.3858, 0.8844, 3.4339, 1.0835, 1.6092, 1.0446, 1.0999, 1.1943, 0.8181, 0.9299, 1.4495, 1.3411, 0.8353, 0.8824, 1.1294, 1.4127, 0.8898, 0.9557, 0.9751, 1.0693, 1.9210, 1.0302, 1.6566, 1.2573, 1.1498, 1.5023, 1.2381, 1.3158, 0.7209, 1.1938, 2.0948, 0.7727, 2.3820, 1.0520, 0.8240, 0.9093, 0.7620, 0.9006, 1.2873, 0.8711, 0.9257, 1.1930, 0.9387, 1.2891, 0.8849, 1.4784, 0.9236, 1.5012, 1.0335, 0.8531, 0.8191, 0.9842, 0.5656, 1.7209, 1.0823, 1.5808, 0.7222, 1.0994, 1.0274, 1.4411, 1.6160, 1.0096, 1.0529, 1.0391, 0.8516, 1.0262, 1.5057, 1.0059, 1.5960, 1.0030, 1.2396, 0.8022, 0.9438, 1.0846, 0.9682, 2.6639, 1.0650, 0.6897, 2.0094, 1.0305, 0.7492, 1.2685, 1.6447, 0.7951, 1.4518, 1.3472, 1.8921, 1.0288, 1.2676, 0.8320, 1.3155, 1.0507, 1.0823, 0.9504, 1.0456, 1.4832, 1.7895, 0.9353, 1.2867, 1.0324, 0.8236, 0.8350, 1.4260, 1.3095, 1.1683, 1.1320, 1.1929, 1.1586, 1.6336, 1.0859, 0.7170, 0.8934, 1.5628, 1.1156, 0.7928, 0.7958, 0.7800, 1.1862, 1.6638, 1.1418, 1.2356, 0.8298, 0.9439, 1.1637, 1.3876, 1.1611, 1.4735, 1.0624, 0.9350, 1.1873, 1.5186, 0.8611, 0.7585, 0.9520, 1.0119, 1.1288, 0.9598, 1.0087, 0.9178, 1.5843, 1.4807, 2.4797, 1.5124, 1.2565, 0.7503, 1.2538, 1.2747, 1.3108, 1.5404, 0.8760, 1.1434, 0.9487, 0.9239, 0.9266, 0.8113, 1.1377, 0.7992, 0.9248, 1.2055, 1.1454, 0.8343, 1.0205, 1.2171, 1.4671, 1.5322, 1.2226, 1.2394, 0.8398, 1.1595, 1.0100, 1.3434, 1.1327, 0.9348, 0.9947, 0.9437, 1.4445, 0.8296, 0.8899, 1.2207, 1.4370, 0.7168, 0.9989, 1.1088, 1.1804, 0.8015, 0.9101, 1.2437, 0.9395, 1.2856, 1.4459, 1.5499, 0.8964, 0.7678, 0.7539, 0.8280, 1.3717, 0.7770, 1.2428, 0.7897, 1.5066, 1.3139, 0.9738, 1.3623, 1.3629, 0.7916, 1.1603, 1.6464, 1.2474, 1.6123, 1.0860, 1.4272, 1.2869, 1.3561, 1.0856, 0.9352, 1.3153, 1.3552, 0.9682, 0.9788, 0.8810, 1.1037, 0.8625, 1.1035, 0.9030, 0.8498, 0.9147, 1.0847, 1.5719, 0.9248, 1.2124, 0.9970, 1.5547, 0.7169, 0.8922, 1.2533, 0.9298, 0.9392, 0.8669, 0.9127, 1.3718, 1.1658, 0.8538, 0.7851, 1.5801, 1.0932, 0.8696, 0.9959, 1.1678, 0.8181, 0.7148, 1.0067, 1.2041, 1.3852, 1.0401, 1.4459, 0.9882, 1.0394, 0.8625, 0.8630, 1.4820, 0.9891, 1.0759, 1.2308, 1.2651, 1.1407, 0.7685, 0.9831, 1.1505, 1.0289, 0.8314, 1.3417, 0.9405, 1.4331, 1.0827, 1.1329, 1.0176, 0.8874, 0.8201, 1.7006, 1.5031, 2.1213, 1.0687, 1.3414, 1.0193, 0.9477, 1.1482, 1.1392, 1.5127, 1.4681, 0.9409, 1.1353, 0.9280, 1.3123, 1.1096, 1.2842, 1.1588, 1.9379, 0.9613, 1.4488, 1.0353, 1.7789, 1.1859, 1.0003, 1.1522, 1.0496, 0.8918, 0.8323, 1.1231, 1.4779, 1.3270, 0.8246, 0.9057, 1.7235, 1.0116, 1.1860, 1.1447, 0.7592, 0.7377, 0.8637, 0.9086, 1.0204, 1.3201, 1.5963, 1.5473, 0.7634, 0.9439, 1.1488, 1.3368, 0.9389, 0.9311, 0.9588, 0.9155, 0.8342, 1.3497, 1.0177, 0.7687, 1.4526, 1.3002, 0.9715, 1.1080, 1.0954, 0.9167, 1.0625, 1.0493, 1.3674, 1.1351, 0.7794, 1.1933, 1.1973, 1.1468, 1.3423, 0.9556, 1.2222, 0.9760, 1.0651, 0.9369, 1.3613, 0.8107, 1.3056, 0.9610, 2.2319, 0.8620, 1.0193, 0.9195, 1.0538, 1.2515, 0.8000, 1.4626, 0.8045, 1.2728, 0.9499, 1.1127, 1.2786, 0.9136, 1.3327, 0.8868, 0.9251, 0.9579, 1.0833, 1.1677, 1.9021, 0.9013, 1.1757, 0.9666, 1.3318, 1.0117, 1.1247, 1.4499, 2.0188, 0.8738, 0.8874, 2.4652, 0.9900, 1.1743, 0.7876, 1.1962, 0.9066, 1.6236, 0.8502, 1.3608, 0.8586, 0.8501, 0.8591, 1.6616, 2.7253, 1.2990, 0.8221, 1.0947, 0.8219, 1.1591, 1.0624, 1.7274, 1.4394, 1.1080, 1.4645, 1.3629, 1.0394, 1.4562, 1.2039, 0.7822, 0.7577, 1.1883, 0.8219, 1.1692, 1.0061, 0.8269, 0.8686, 0.8106], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.7.1.conv2.weight&#39;, tensor([[[[ 8.4269e-04, 7.4227e-03, 3.9909e-03], [ 1.6880e-03, 7.4974e-03, 7.8223e-03], [ 2.4437e-03, 4.6291e-03, 2.4768e-03]], [[ 6.6184e-03, 1.4196e-02, 7.9142e-03], [ 1.2272e-02, 1.8084e-02, 1.3603e-02], [-3.3357e-03, 1.4529e-03, -6.4961e-04]], [[-2.7831e-03, -3.1750e-03, -6.4280e-03], [ 6.5917e-04, 8.4988e-04, -1.8507e-03], [-8.2531e-03, -8.4195e-03, -7.8756e-03]], ..., [[-8.5384e-03, -1.5691e-02, -1.2620e-02], [-1.3382e-02, -1.9666e-02, -1.3495e-02], [-1.0621e-02, -1.5947e-02, -8.4651e-03]], [[ 2.2030e-02, 2.0516e-02, 1.7607e-03], [ 1.8371e-02, 1.9983e-02, 4.2173e-03], [-3.2372e-03, 3.9954e-03, 2.0193e-03]], [[ 1.2254e-02, 1.9335e-02, 1.6247e-02], [ 2.4956e-02, 3.0145e-02, 2.9704e-02], [ 9.3686e-03, 5.0119e-03, 8.5414e-03]]], [[[-5.9220e-03, -1.0519e-02, -6.8316e-03], [-1.2064e-02, -2.0402e-02, -1.7688e-02], [-8.6935e-03, -1.1335e-02, -6.1261e-03]], [[ 1.3824e-02, 4.8823e-03, 9.2119e-03], [-5.8274e-03, -1.1977e-02, -3.6166e-03], [-2.0387e-03, -3.8174e-03, -4.8083e-03]], [[-9.5720e-03, -8.0556e-03, -1.3107e-03], [-1.2626e-02, -1.2894e-02, -8.0035e-03], [-1.3137e-02, -1.9319e-02, -1.2818e-02]], ..., [[ 1.4864e-02, 1.9655e-02, 2.0837e-02], [ 6.1578e-03, 9.2826e-03, 1.2681e-02], [ 1.9406e-02, 2.2611e-02, 2.1504e-02]], [[-2.5678e-03, -1.1810e-02, -1.0960e-02], [ 3.2970e-03, 1.0424e-02, 4.2753e-03], [ 1.3506e-02, 1.4638e-02, -7.7272e-03]], [[-6.7485e-03, -1.1467e-02, -1.3730e-02], [-1.5374e-03, -5.0226e-03, -4.5442e-03], [ 2.2135e-03, -2.0059e-03, -1.3161e-03]]], [[[-7.6874e-05, -4.1944e-05, 2.8755e-03], [-1.1427e-02, -1.5843e-02, -1.3075e-02], [ 2.1733e-03, -5.9721e-03, -6.9197e-03]], [[ 7.8735e-03, 3.4457e-04, 5.7468e-03], [ 1.3282e-02, 2.8912e-03, 2.9302e-03], [ 1.5465e-02, 6.4100e-03, 5.5333e-04]], [[-8.8434e-03, -1.3362e-02, -1.2873e-02], [-6.0801e-03, -3.7081e-03, -4.1329e-03], [-1.1102e-02, -1.5157e-02, -1.5425e-02]], ..., [[-1.1982e-02, -1.7718e-02, -1.3422e-02], [-9.9877e-03, -1.7654e-02, -1.7543e-02], [-5.5603e-03, -4.2351e-03, -2.3858e-03]], [[ 4.9779e-03, 1.3615e-03, -5.6275e-03], [ 1.2208e-03, -4.6355e-03, -1.0646e-02], [-8.8346e-04, -5.1090e-03, -1.1107e-02]], [[ 2.3228e-03, -1.7574e-03, 4.4337e-03], [ 6.0535e-03, 7.6616e-03, 8.8030e-03], [-1.4486e-03, 7.4707e-04, -3.6658e-04]]], ..., [[[ 4.5315e-03, 9.2580e-03, 1.0994e-02], [ 1.0506e-03, 2.3562e-03, 1.4973e-03], [-6.1388e-03, -7.3833e-04, -4.5912e-03]], [[-4.1607e-03, -2.5549e-04, -2.7917e-03], [ 2.1568e-03, 4.6719e-03, 5.9287e-03], [ 2.9518e-03, 5.8353e-03, 6.7088e-03]], [[-5.6075e-03, -8.9305e-03, -9.9386e-03], [-1.0395e-02, -1.0634e-02, -7.1008e-03], [-4.1862e-04, 7.1352e-04, -1.4964e-03]], ..., [[ 4.5554e-03, -1.6233e-03, 5.2532e-03], [ 1.0122e-02, 4.8130e-03, 1.5857e-02], [ 2.1629e-03, -2.5894e-03, 7.3130e-03]], [[-1.1586e-02, -8.8907e-03, -5.8095e-03], [-2.0736e-03, 1.9476e-03, 3.0934e-03], [ 1.6526e-03, 4.3045e-03, 7.8714e-03]], [[ 2.8054e-03, 4.5989e-03, 6.6381e-03], [ 2.2156e-02, 2.5174e-02, 2.6773e-02], [ 2.7199e-02, 2.5247e-02, 2.4614e-02]]], [[[-1.3905e-03, -4.7200e-03, -5.6724e-03], [-3.1079e-04, -1.9819e-03, -1.0309e-04], [ 1.2744e-02, 8.9516e-03, 1.1394e-02]], [[-2.6410e-03, -6.6363e-03, -4.2200e-03], [-1.4096e-02, -1.6792e-02, -1.0819e-02], [-2.3472e-02, -2.0112e-02, -1.7342e-02]], [[-7.8104e-03, -5.8973e-03, -6.8124e-03], [-7.4042e-03, -4.7268e-03, -7.7465e-03], [-8.8192e-03, -7.6443e-03, -1.0301e-02]], ..., [[-3.7695e-03, -5.8976e-03, -5.9438e-03], [ 6.3511e-03, 4.5243e-03, 4.8946e-03], [ 1.5002e-02, 1.2296e-02, 7.8296e-03]], [[ 3.2294e-03, 7.2168e-03, -6.4596e-03], [ 1.2928e-03, 3.2676e-03, -1.3662e-02], [-2.9027e-04, -3.0066e-03, -1.2365e-02]], [[ 4.2915e-03, -1.3108e-03, -1.6874e-03], [-1.2325e-02, -1.8239e-02, -1.6989e-02], [-1.9427e-02, -2.1363e-02, -1.7854e-02]]], [[[ 1.0223e-02, 6.3271e-03, 6.2748e-03], [ 1.0602e-02, 6.0994e-03, 4.9956e-03], [ 2.4643e-03, -1.6805e-03, -5.2371e-03]], [[ 6.9095e-04, 7.1853e-03, 5.5527e-03], [ 4.0149e-03, 7.6601e-03, 8.8821e-03], [-1.3823e-03, 6.5781e-04, 3.3657e-03]], [[ 5.2504e-03, 5.7831e-03, 8.1362e-03], [-3.9885e-03, -2.5717e-03, 6.2323e-03], [-3.2147e-03, -2.6872e-03, 1.7040e-03]], ..., [[-1.7749e-03, 5.5734e-03, -1.0271e-03], [-1.4221e-02, -9.2470e-03, -1.2631e-02], [-2.2306e-02, -1.6698e-02, -2.3222e-02]], [[ 8.0804e-03, 1.0037e-02, 1.1353e-02], [ 2.1771e-03, 6.9491e-03, 1.2658e-02], [-3.9415e-03, -4.8876e-03, 6.6193e-03]], [[-7.1798e-03, -7.9582e-03, -6.0305e-03], [-4.4702e-03, -5.5250e-03, -8.0253e-03], [-1.3987e-03, 5.6416e-04, -7.0237e-04]]]], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn2.weight&#39;, tensor([0.5936, 0.5946, 0.5255, 0.5737, 0.5483, 0.5459, 0.5348, 0.5466, 0.5753, 0.6611, 0.5685, 0.6221, 0.5789, 0.5245, 0.5620, 0.5158, 0.5612, 0.6433, 0.5681, 0.5853, 1.1573, 0.5565, 0.5802, 0.5669, 0.6375, 0.5675, 0.5837, 0.5897, 0.6885, 0.5489, 0.8259, 0.6639, 0.5328, 0.5840, 0.5916, 0.7279, 0.6166, 0.5016, 0.6322, 0.5527, 0.6266, 0.6369, 0.7288, 0.6782, 0.6018, 0.5514, 0.5697, 0.7266, 0.5531, 0.4910, 0.6091, 0.9051, 0.6520, 0.5848, 0.5689, 0.6646, 0.4656, 0.5383, 0.6185, 0.5576, 0.7523, 0.5460, 0.6994, 0.7382, 0.5453, 0.5959, 0.5550, 0.4830, 0.5210, 0.4660, 0.6234, 0.5329, 0.5505, 0.5787, 0.6655, 0.7442, 0.5930, 0.5702, 0.3305, 0.6639, 0.5619, 0.6424, 0.5963, 0.6262, 0.6183, 0.5223, 0.6361, 0.5590, 0.5540, 0.5568, 0.7191, 0.5493, 0.5985, 0.5849, 0.5287, 0.5297, 0.5876, 0.5953, 0.5859, 0.6216, 0.6451, 0.7064, 0.5637, 0.5978, 0.6050, 0.6669, 0.6366, 0.6900, 0.6255, 0.5397, 0.5902, 0.6606, 0.5560, 0.6932, 0.5397, 0.6715, 0.6828, 0.6843, 0.7964, 0.6085, 0.6527, 0.5999, 0.5444, 0.6033, 0.6099, 0.6938, 0.5486, 0.5339, 0.6002, 0.5755, 0.5480, 0.5849, 0.5773, 0.6320, 0.5495, 0.5917, 0.6099, 0.5959, 0.6064, 0.5512, 0.6454, 0.6904, 0.5097, 0.5997, 0.5886, 0.6046, 0.7444, 0.5623, 0.6835, 0.5652, 0.5779, 0.6000, 0.5006, 0.6305, 0.5915, 0.6206, 0.6192, 0.5049, 0.6018, 0.5134, 0.6666, 0.5688, 0.5989, 0.5588, 0.9148, 0.6610, 0.6617, 0.7054, 0.5203, 0.5221, 0.7028, 0.6093, 0.6161, 0.5727, 0.5831, 0.6873, 0.6587, 0.5204, 0.5759, 0.6282, 0.6014, 0.5911, 0.6575, 0.5486, 0.5360, 0.5402, 0.6111, 0.5322, 0.5671, 0.6107, 0.7052, 0.5652, 0.5331, 0.6306, 0.5270, 0.6497, 0.5595, 0.5727, 0.6146, 0.5838, 0.5597, 0.5610, 0.5305, 0.4957, 0.5772, 0.6768, 0.6158, 0.6941, 0.5780, 0.5963, 0.6182, 0.5173, 0.5834, 0.7408, 0.4772, 0.5613, 0.6650, 0.7566, 0.5036, 0.6085, 0.6375, 1.1218, 0.5013, 0.5459, 0.6053, 0.5446, 0.6048, 0.5830, 0.7209, 0.5080, 0.5527, 0.4873, 0.4939, 0.7636, 0.4662, 0.5238, 0.5446, 0.6569, 0.5585, 0.5707, 0.5915, 0.6352, 0.6241, 0.5211, 0.5521, 0.4976, 0.6191, 0.5456, 0.5434, 0.5729, 0.5963, 0.6677, 0.6100, 0.6604, 0.5536, 0.7094, 0.6363, 0.6654, 0.6064, 0.5093, 0.5646, 0.6067, 0.5418, 0.5434, 0.5562, 1.2533, 0.5718, 0.7615, 0.5788, 0.6383, 0.5876, 0.5891, 0.5587, 0.9019, 0.6058, 0.5638, 0.5919, 0.6592, 0.5506, 0.5583, 0.6786, 0.6164, 0.5298, 0.6667, 1.0299, 0.6451, 1.2309, 0.5026, 0.6232, 0.5716, 0.6053, 0.5907, 0.7668, 0.6300, 0.5832, 0.8216, 0.5221, 0.5345, 0.7488, 0.5877, 0.6337, 0.5961, 0.5875, 0.5664, 0.5409, 0.6319, 0.5576, 0.5762, 0.5923, 0.6496, 0.5541, 0.5751, 0.5180, 0.5841, 0.5682, 0.6486, 0.6410, 0.5944, 0.5435, 0.5633, 0.7709, 0.6229, 0.6267, 0.8722, 0.5010, 0.6101, 0.6666, 0.6278, 0.5525, 0.7389, 0.6971, 0.5749, 0.7319, 0.6119, 0.6092, 0.6626, 0.5513, 0.6554, 0.6511, 0.4970, 0.5262, 0.4940, 0.5133, 0.6209, 0.6162, 0.5436, 0.6209, 0.6806, 0.8033, 0.5731, 0.4581, 0.5467, 0.6219, 0.5099, 0.5474, 0.5517, 0.6303, 0.4896, 0.6361, 0.5519, 0.5892, 0.7995, 0.5545, 0.6202, 0.6301, 0.6682, 0.4927, 0.5628, 0.7277, 0.6801, 0.5643, 0.6632, 0.6327, 0.6213, 0.5780, 0.5937, 0.5516, 0.5677, 0.4979, 0.8195, 0.5007, 0.4759, 0.5917, 0.6342, 0.5413, 0.5928, 0.6089, 0.6253, 0.6111, 0.6295, 0.6146, 0.5763, 0.6446, 0.5428, 0.4891, 0.5643, 0.6047, 0.6248, 0.9969, 0.6174, 0.6127, 0.5603, 0.5800, 0.8286, 0.5540, 0.5432, 0.5257, 0.5724, 0.6402, 0.6159, 0.5731, 0.5332, 0.5543, 0.5935, 0.6654, 0.5946, 0.7265, 0.8078, 0.5997, 0.5871, 0.7203, 0.6505, 0.6370, 0.6517, 0.5862, 0.5759, 0.5720, 0.5678, 0.6170, 0.8433, 0.5630, 0.5712, 0.5708, 0.6008, 0.6195, 0.5496, 0.6636, 0.5897, 0.7277, 0.8268, 0.5538, 0.5030, 0.5658, 0.5617, 0.5440, 0.4927, 0.6235, 0.5701, 0.6785, 0.5109, 0.5709, 0.4755, 0.6239, 0.6194, 0.7907, 0.6078, 0.5877, 0.6445, 0.5454, 0.6781, 0.7228, 0.6745, 0.5516, 0.7803, 0.6112, 0.5523, 0.7538, 0.6021, 0.5636, 0.6648, 0.5924, 0.6555, 0.6265, 0.6015, 0.5452, 0.4677, 0.6565, 0.5525, 0.5466, 0.7796, 0.5906, 0.5330, 0.6479, 0.8235, 0.6529, 0.7341, 0.5837, 0.5768, 0.7053, 0.5686, 0.5687, 0.7145, 0.5703, 0.6948, 0.6415, 0.7008, 0.5751, 0.8074, 0.4811, 0.6318, 0.5769, 0.5734, 0.6341, 0.5394, 0.6204, 0.6004, 0.7819, 0.5611, 0.5438, 0.6126, 0.5891, 0.5284], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn2.bias&#39;, tensor([-0.1404, -0.1785, -0.1851, -0.1115, -0.1140, -0.1743, -0.1563, -0.1343, -0.1078, -0.1494, -0.1115, -0.1275, -0.0786, -0.1868, -0.1594, -0.0916, -0.0334, -0.1043, -0.1401, -0.2092, 0.3127, -0.1410, -0.0785, -0.1316, -0.1782, -0.2881, -0.1765, -0.2158, -0.1077, -0.1833, 0.0879, -0.0283, -0.1684, -0.1296, -0.1468, -0.0229, -0.1542, -0.1331, -0.1421, -0.1766, -0.2354, -0.1510, -0.1367, -0.1426, -0.1801, -0.1949, -0.2157, 0.0517, -0.0468, -0.1555, -0.1034, -0.0254, -0.2714, -0.0399, -0.1606, -0.2267, -0.1058, -0.0821, -0.2336, -0.2241, -0.0714, -0.0412, -0.0734, -0.1546, -0.1600, -0.2371, -0.1306, -0.1261, -0.1327, -0.1286, -0.1273, -0.0913, -0.1504, -0.1592, -0.1575, 0.0192, -0.1518, -0.0346, -0.0394, -0.1794, -0.0973, -0.0911, -0.0516, -0.1134, -0.1769, -0.2049, -0.0230, -0.2018, -0.0158, -0.1965, 0.1139, -0.1436, 0.0960, -0.1211, -0.1062, -0.1357, -0.0532, -0.1030, -0.0802, -0.1057, -0.1698, -0.2106, -0.2146, -0.1715, -0.1081, -0.2118, -0.1528, -0.1537, -0.1445, -0.1906, -0.1112, -0.1809, -0.0757, -0.1267, -0.1649, -0.0955, -0.1275, -0.1335, -0.0502, -0.0529, -0.1159, -0.0996, -0.1393, -0.1632, -0.1516, -0.1657, -0.1470, -0.0027, -0.2030, -0.2871, -0.1627, -0.1081, -0.1650, -0.1153, -0.0704, -0.1987, -0.0157, -0.0660, -0.1363, -0.2414, -0.0493, -0.0482, -0.1805, -0.1529, -0.1637, -0.1226, 0.0274, -0.1739, -0.0229, -0.1837, -0.1261, -0.1709, -0.1381, 0.0226, -0.1650, -0.1718, -0.0136, -0.0541, -0.0206, -0.1152, 0.0141, -0.0653, -0.1397, -0.1740, -0.0666, -0.1377, -0.0508, -0.0403, -0.0860, -0.1728, -0.1506, -0.2007, -0.1700, -0.0649, -0.1111, -0.0226, -0.0372, -0.1283, -0.1561, -0.1885, -0.0997, -0.1988, -0.1933, -0.1118, -0.2075, -0.1218, -0.1648, -0.1207, -0.1845, -0.0761, -0.0390, -0.2168, -0.1599, -0.2125, -0.1938, -0.1027, -0.1579, -0.1115, -0.1473, -0.1101, -0.1141, -0.1437, -0.1475, -0.0848, -0.1166, -0.0041, -0.0447, -0.1004, -0.1162, -0.0884, -0.1715, -0.1616, -0.2368, -0.0908, -0.1340, -0.1766, -0.1765, -0.0719, -0.1118, -0.1287, -0.2271, 0.2625, -0.1557, -0.1643, -0.1795, -0.1254, -0.1657, -0.1101, -0.0945, -0.1478, -0.1618, -0.0883, -0.1047, -0.0026, -0.0368, -0.1564, -0.1620, -0.2364, -0.1449, -0.1034, -0.1453, -0.0518, -0.0383, -0.0820, -0.0806, -0.1601, -0.2163, -0.1122, -0.1006, -0.1282, -0.0670, -0.1664, -0.0926, -0.0500, -0.1301, 0.0192, -0.2171, -0.2296, -0.1542, -0.1838, -0.1527, -0.1987, -0.1978, -0.0514, -0.0809, 0.0638, -0.1452, -0.0934, -0.1214, -0.2616, -0.0798, 0.0163, -0.1706, 0.1281, -0.1571, -0.1623, -0.1379, -0.0313, -0.1002, -0.1809, 0.0096, -0.1825, -0.1364, -0.1244, 0.0476, -0.1521, 0.1266, -0.1542, -0.1203, -0.2032, -0.1827, -0.1405, 0.0026, -0.0882, -0.1242, -0.1251, -0.1944, -0.1254, -0.1993, -0.1525, -0.1915, -0.0285, -0.1055, -0.1158, -0.1201, -0.1769, -0.2034, -0.1808, -0.1389, -0.0532, -0.1526, -0.0985, -0.1544, -0.1691, -0.1671, -0.2044, -0.1655, -0.1246, -0.1402, -0.0675, -0.0763, -0.2222, -0.1014, -0.0437, -0.0993, -0.1917, -0.0716, -0.1446, -0.1177, -0.0062, 0.0212, -0.1207, -0.1086, -0.1416, -0.1456, -0.1051, -0.2455, -0.1517, -0.1071, -0.0488, -0.1394, -0.0527, -0.1260, -0.2144, -0.1332, -0.1498, -0.1645, -0.0287, 0.0550, -0.1193, -0.1354, -0.1325, -0.0549, -0.1535, -0.1134, -0.1887, -0.1238, -0.1327, -0.1072, -0.1407, -0.1473, 0.0220, -0.1678, -0.1043, -0.1176, -0.1260, -0.0972, -0.1304, -0.0786, -0.2029, -0.1727, -0.0385, -0.0489, -0.1297, -0.1502, -0.1600, -0.1198, -0.0727, -0.1464, -0.0564, -0.1344, -0.1835, -0.1241, -0.1134, 0.0283, -0.1115, -0.1252, -0.0775, -0.0469, -0.1873, -0.1680, -0.1903, -0.0835, -0.1623, -0.1168, -0.1313, -0.2162, -0.1888, 0.1907, -0.1983, -0.0783, -0.2247, -0.1773, -0.0817, -0.1242, -0.1357, -0.2709, -0.0840, -0.1201, -0.1881, -0.1623, -0.1462, -0.1501, -0.0885, -0.0606, -0.1849, -0.1058, -0.0293, -0.3330, -0.0339, -0.1490, -0.1620, -0.1579, -0.2066, -0.1478, -0.2703, -0.1394, -0.2154, -0.1466, -0.0053, -0.1477, -0.1633, -0.0972, -0.1043, -0.1972, -0.1537, -0.0799, -0.1367, -0.0953, -0.0932, -0.1125, -0.1429, -0.1182, -0.2348, -0.0699, -0.0417, -0.1093, -0.1293, -0.0670, -0.0646, -0.1123, -0.1736, -0.1248, -0.1171, -0.0507, -0.1650, -0.1388, -0.1535, -0.1945, -0.2182, 0.0011, -0.0761, -0.1322, -0.1755, -0.1508, -0.0861, 0.0243, -0.2671, -0.1716, 0.0284, -0.1816, -0.1346, -0.1443, -0.1082, -0.1175, -0.1628, -0.1721, -0.0165, -0.0958, -0.1060, -0.1181, -0.0446, -0.1000, 0.0556, -0.1603, -0.0242, -0.0813, -0.1913, -0.0075, -0.0309, -0.0842, -0.0119, -0.0565, -0.1342, -0.0288, -0.0839, -0.0904, -0.1664, -0.0903, -0.0723, -0.1059, -0.0786, -0.1430, -0.1081, -0.0839, -0.0310, -0.1906, -0.1224, -0.0607, -0.1486, -0.1807, -0.0565], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn2.running_mean&#39;, tensor([-0.0373, -0.0063, -0.0047, -0.0410, 0.0019, 0.0065, -0.0038, -0.0146, -0.0033, 0.0007, 0.0023, -0.0201, -0.0200, -0.0318, -0.0388, 0.0148, -0.0090, -0.0470, -0.0442, -0.0017, -0.2008, -0.0449, -0.0572, -0.0185, -0.0729, -0.0257, -0.0425, -0.0232, 0.0225, 0.0045, 0.1124, -0.0316, -0.0208, -0.0254, -0.0518, -0.0264, -0.0152, -0.0095, 0.0095, -0.0088, -0.0243, -0.0180, 0.0148, 0.0012, -0.0140, -0.0676, -0.0400, 0.0203, -0.0082, -0.0168, -0.0059, -0.0222, -0.0366, -0.0113, -0.0211, -0.0493, -0.0289, 0.0010, -0.0169, -0.0144, 0.1747, -0.0404, 0.0237, -0.0423, 0.0340, -0.0408, -0.0306, -0.0288, -0.0146, -0.0400, -0.0380, -0.0267, -0.0352, -0.0423, -0.0058, -0.0094, -0.0195, -0.0269, 0.0612, -0.0155, -0.0171, 0.0050, -0.0540, -0.0063, -0.0215, -0.0009, -0.0112, -0.0428, -0.0242, -0.0067, 0.0459, -0.0478, -0.0098, -0.0074, -0.0312, -0.0148, -0.0374, -0.0056, -0.0617, -0.0296, 0.0218, 0.0032, -0.0124, -0.0414, -0.0446, -0.0403, -0.0118, -0.0182, -0.0463, -0.0453, -0.0112, -0.0292, -0.0029, 0.0033, -0.0313, -0.0372, -0.0269, -0.0465, 0.0722, -0.0420, -0.0584, -0.0751, -0.0523, -0.0537, -0.0184, -0.0141, 0.0032, 0.0167, -0.0027, -0.0222, -0.0454, -0.0306, -0.0440, -0.0403, -0.0228, -0.0284, -0.0239, -0.0064, -0.0219, -0.0605, -0.0301, -0.0339, -0.0249, -0.0041, -0.0349, -0.0131, 0.0040, -0.0375, 0.0174, -0.0192, -0.0466, -0.0113, -0.0235, -0.0590, -0.0313, -0.0493, 0.0085, 0.0075, -0.0112, -0.0299, -0.0339, -0.0291, -0.0342, -0.0375, 0.0075, -0.0252, -0.0232, -0.0430, -0.0274, -0.0221, 0.0060, -0.0296, -0.0157, -0.0370, -0.0313, -0.0046, 0.0305, -0.0142, -0.0077, -0.0420, -0.0309, -0.0287, -0.0190, 0.0307, -0.0555, -0.0375, -0.0138, -0.0468, -0.0363, 0.0244, 0.0239, -0.0299, -0.0314, -0.0370, -0.0486, 0.0264, -0.0448, -0.0276, 0.0081, -0.0315, -0.0414, -0.0327, -0.0145, -0.0158, -0.0682, 0.0333, -0.0302, 0.1234, 0.0255, -0.0344, -0.0341, -0.0287, -0.0427, -0.0584, -0.0096, -0.0166, -0.0425, -0.0082, -0.0151, 0.0026, -0.0342, 0.3793, -0.0723, -0.0423, -0.0483, -0.0093, 0.0050, -0.0108, 0.0120, -0.0458, -0.0223, -0.0394, -0.0229, -0.0135, -0.0463, -0.0151, -0.0412, -0.0142, -0.0185, -0.0540, -0.0166, 0.0238, -0.0080, -0.0047, 0.0043, -0.0350, -0.0092, -0.0535, -0.0295, 0.0201, -0.0409, -0.0191, -0.0382, 0.0152, -0.0181, 0.0047, -0.0602, -0.0393, 0.0078, -0.0537, -0.0503, -0.0397, -0.0389, 0.0160, -0.0206, -0.1821, -0.0416, -0.0361, -0.0646, -0.0199, -0.0369, -0.0239, -0.0358, -0.0893, -0.0445, -0.0337, -0.0066, -0.0146, -0.0127, -0.0161, -0.0110, -0.0089, -0.0415, -0.0915, 0.4497, -0.0790, 0.0029, -0.0145, -0.0725, -0.0163, 0.0217, -0.0496, 0.0018, -0.0137, -0.0220, 0.0072, 0.0023, -0.0455, 0.0232, -0.0494, -0.0364, 0.0044, -0.0042, -0.0191, -0.0394, -0.0019, -0.0397, -0.0178, 0.0735, -0.0225, -0.0458, -0.0273, -0.0312, -0.0217, -0.0369, -0.0517, -0.0672, -0.0194, -0.0163, 0.0065, 0.0636, -0.0322, -0.0428, 0.0201, -0.0507, -0.0032, 0.0110, -0.0305, -0.0575, -0.0201, 0.0239, -0.0299, -0.0246, -0.0203, -0.0232, 0.0039, -0.0150, 0.0048, 0.0078, -0.0237, 0.0155, -0.0286, -0.0319, -0.0611, -0.0164, -0.0186, -0.0121, 0.0058, 0.0348, -0.0178, -0.0452, 0.0358, -0.0112, -0.0471, -0.0759, -0.0282, -0.0549, -0.0130, -0.0406, -0.0302, -0.0501, -0.0273, -0.0205, -0.0297, -0.0340, -0.0012, -0.0231, -0.0371, -0.0468, -0.0107, 0.0017, -0.0025, -0.0117, -0.0019, -0.0221, -0.0457, -0.0517, -0.0306, -0.0173, 0.0928, -0.0473, -0.0618, -0.0042, -0.0249, -0.0167, -0.0242, -0.0890, -0.0181, 0.0573, -0.0021, -0.0377, -0.0125, -0.0057, -0.0282, -0.0121, -0.0520, -0.0449, -0.0329, 0.1039, 0.0126, 0.0250, -0.0226, -0.0073, 0.0183, -0.0226, 0.0123, 0.0038, -0.0045, -0.0306, -0.0106, -0.0114, -0.0212, -0.0467, -0.0408, -0.0307, -0.0301, -0.0228, -0.0135, -0.0392, -0.0322, -0.0101, -0.0397, 0.0047, -0.0356, -0.0256, -0.0634, -0.0497, -0.0087, -0.0258, 0.0332, -0.0394, -0.0576, -0.0310, 0.0022, -0.0110, -0.0656, -0.0472, -0.0141, -0.0065, -0.1140, 0.0018, -0.0215, -0.0253, -0.0244, -0.0185, 0.0324, -0.0448, -0.0122, -0.0316, -0.0057, -0.0381, -0.0366, -0.0416, 0.0061, -0.0035, -0.0382, -0.0413, -0.0304, -0.0179, -0.0578, -0.0276, 0.0132, 0.0009, -0.0022, -0.0370, -0.0211, -0.0264, -0.0354, -0.0133, 0.0378, -0.0508, -0.0510, -0.0184, -0.0266, -0.0345, -0.0265, 0.0138, -0.0143, -0.0150, 0.0122, -0.0019, -0.0118, -0.0686, 0.0536, -0.0543, -0.0160, -0.0126, -0.0468, 0.0176, -0.0216, -0.0230, -0.0122, -0.0269, -0.0521, -0.0170, 0.0117, -0.0648, -0.0527, 0.0072, -0.0344, -0.0246, -0.0228, 0.0818, -0.0173, -0.0244, -0.0397, -0.0393, -0.0392, -0.0432, -0.0357, 0.0127, -0.0024], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn2.running_var&#39;, tensor([0.0046, 0.0042, 0.0047, 0.0057, 0.0033, 0.0041, 0.0044, 0.0033, 0.0035, 0.0056, 0.0038, 0.0034, 0.0052, 0.0052, 0.0042, 0.0040, 0.0052, 0.0047, 0.0044, 0.0049, 0.0236, 0.0044, 0.0048, 0.0040, 0.0046, 0.0035, 0.0044, 0.0045, 0.0042, 0.0039, 0.0105, 0.0045, 0.0031, 0.0039, 0.0042, 0.0090, 0.0044, 0.0037, 0.0052, 0.0037, 0.0039, 0.0047, 0.0049, 0.0045, 0.0046, 0.0041, 0.0048, 0.0060, 0.0041, 0.0039, 0.0038, 0.0088, 0.0042, 0.0052, 0.0042, 0.0050, 0.0038, 0.0024, 0.0045, 0.0043, 0.0058, 0.0040, 0.0065, 0.0075, 0.0036, 0.0040, 0.0041, 0.0037, 0.0035, 0.0036, 0.0047, 0.0042, 0.0039, 0.0044, 0.0038, 0.0042, 0.0039, 0.0039, 0.0046, 0.0037, 0.0033, 0.0049, 0.0040, 0.0044, 0.0042, 0.0040, 0.0043, 0.0041, 0.0044, 0.0046, 0.0059, 0.0039, 0.0041, 0.0038, 0.0041, 0.0040, 0.0036, 0.0053, 0.0038, 0.0039, 0.0039, 0.0045, 0.0032, 0.0041, 0.0043, 0.0040, 0.0057, 0.0045, 0.0041, 0.0039, 0.0050, 0.0040, 0.0045, 0.0048, 0.0040, 0.0045, 0.0039, 0.0053, 0.0056, 0.0041, 0.0048, 0.0043, 0.0047, 0.0062, 0.0042, 0.0040, 0.0036, 0.0038, 0.0045, 0.0041, 0.0040, 0.0037, 0.0043, 0.0051, 0.0038, 0.0038, 0.0036, 0.0042, 0.0037, 0.0042, 0.0051, 0.0062, 0.0044, 0.0043, 0.0047, 0.0050, 0.0047, 0.0040, 0.0043, 0.0036, 0.0048, 0.0044, 0.0037, 0.0044, 0.0040, 0.0045, 0.0040, 0.0036, 0.0036, 0.0030, 0.0059, 0.0037, 0.0041, 0.0039, 0.0053, 0.0070, 0.0046, 0.0046, 0.0035, 0.0038, 0.0046, 0.0049, 0.0047, 0.0039, 0.0047, 0.0046, 0.0052, 0.0039, 0.0043, 0.0042, 0.0041, 0.0046, 0.0033, 0.0046, 0.0043, 0.0050, 0.0041, 0.0042, 0.0045, 0.0040, 0.0043, 0.0045, 0.0038, 0.0050, 0.0040, 0.0047, 0.0039, 0.0041, 0.0046, 0.0043, 0.0040, 0.0034, 0.0041, 0.0039, 0.0038, 0.0052, 0.0045, 0.0051, 0.0037, 0.0053, 0.0037, 0.0031, 0.0056, 0.0067, 0.0041, 0.0034, 0.0047, 0.0053, 0.0039, 0.0041, 0.0043, 0.0242, 0.0038, 0.0044, 0.0043, 0.0050, 0.0046, 0.0043, 0.0042, 0.0044, 0.0055, 0.0038, 0.0036, 0.0056, 0.0033, 0.0032, 0.0037, 0.0058, 0.0047, 0.0037, 0.0036, 0.0042, 0.0037, 0.0031, 0.0038, 0.0047, 0.0040, 0.0035, 0.0045, 0.0051, 0.0043, 0.0042, 0.0044, 0.0037, 0.0046, 0.0045, 0.0056, 0.0056, 0.0044, 0.0047, 0.0045, 0.0059, 0.0038, 0.0038, 0.0030, 0.0451, 0.0043, 0.0052, 0.0036, 0.0050, 0.0046, 0.0034, 0.0048, 0.0097, 0.0039, 0.0042, 0.0034, 0.0049, 0.0044, 0.0040, 0.0062, 0.0047, 0.0043, 0.0056, 0.0209, 0.0045, 0.0149, 0.0027, 0.0046, 0.0034, 0.0033, 0.0044, 0.0053, 0.0061, 0.0041, 0.0049, 0.0037, 0.0045, 0.0045, 0.0044, 0.0041, 0.0042, 0.0041, 0.0039, 0.0052, 0.0041, 0.0043, 0.0045, 0.0050, 0.0043, 0.0049, 0.0047, 0.0039, 0.0039, 0.0040, 0.0057, 0.0053, 0.0043, 0.0041, 0.0035, 0.0052, 0.0048, 0.0045, 0.0051, 0.0042, 0.0044, 0.0038, 0.0046, 0.0035, 0.0056, 0.0048, 0.0036, 0.0058, 0.0040, 0.0038, 0.0045, 0.0046, 0.0045, 0.0045, 0.0041, 0.0074, 0.0042, 0.0044, 0.0054, 0.0040, 0.0036, 0.0041, 0.0041, 0.0054, 0.0033, 0.0042, 0.0042, 0.0050, 0.0031, 0.0034, 0.0045, 0.0049, 0.0038, 0.0053, 0.0040, 0.0039, 0.0062, 0.0041, 0.0040, 0.0037, 0.0056, 0.0068, 0.0045, 0.0054, 0.0046, 0.0055, 0.0049, 0.0034, 0.0045, 0.0037, 0.0048, 0.0038, 0.0041, 0.0038, 0.0058, 0.0037, 0.0034, 0.0044, 0.0038, 0.0037, 0.0042, 0.0055, 0.0053, 0.0047, 0.0049, 0.0048, 0.0047, 0.0042, 0.0036, 0.0039, 0.0041, 0.0048, 0.0045, 0.0091, 0.0045, 0.0038, 0.0035, 0.0036, 0.0045, 0.0045, 0.0033, 0.0036, 0.0042, 0.0040, 0.0036, 0.0046, 0.0035, 0.0049, 0.0042, 0.0042, 0.0046, 0.0056, 0.0045, 0.0051, 0.0043, 0.0046, 0.0048, 0.0037, 0.0046, 0.0043, 0.0043, 0.0035, 0.0044, 0.0043, 0.0059, 0.0036, 0.0036, 0.0039, 0.0045, 0.0048, 0.0035, 0.0045, 0.0043, 0.0054, 0.0107, 0.0044, 0.0037, 0.0053, 0.0046, 0.0040, 0.0050, 0.0044, 0.0043, 0.0050, 0.0039, 0.0047, 0.0038, 0.0040, 0.0033, 0.0059, 0.0040, 0.0043, 0.0042, 0.0055, 0.0041, 0.0044, 0.0047, 0.0038, 0.0045, 0.0043, 0.0041, 0.0083, 0.0040, 0.0043, 0.0048, 0.0054, 0.0043, 0.0047, 0.0043, 0.0040, 0.0031, 0.0038, 0.0041, 0.0043, 0.0066, 0.0039, 0.0034, 0.0047, 0.0065, 0.0043, 0.0052, 0.0036, 0.0044, 0.0048, 0.0052, 0.0045, 0.0050, 0.0040, 0.0042, 0.0045, 0.0054, 0.0039, 0.0055, 0.0034, 0.0053, 0.0040, 0.0042, 0.0049, 0.0046, 0.0042, 0.0038, 0.0052, 0.0050, 0.0047, 0.0047, 0.0035, 0.0030], device=&#39;cuda:0&#39;)), (&#39;0.7.1.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.7.2.conv1.weight&#39;, tensor([[[[ 2.3462e-02, 3.1109e-02, 2.3744e-02], [ 5.1882e-02, 6.1590e-02, 5.2516e-02], [ 1.6750e-02, 3.0100e-02, 1.8585e-02]], [[ 1.0845e-03, 1.4307e-03, 4.3296e-03], [ 3.5347e-03, -2.4882e-03, -5.5093e-04], [ 2.1085e-02, 2.4488e-02, 2.0365e-02]], [[ 1.3272e-03, 7.1793e-03, 3.1408e-03], [ 1.1592e-02, 1.2862e-02, 1.0039e-02], [ 1.1708e-02, 4.5857e-03, 1.6395e-03]], ..., [[-1.3788e-02, -1.2193e-02, -1.1320e-02], [ 4.3081e-03, 6.1162e-03, 3.0464e-03], [ 3.2182e-02, 4.3217e-02, 3.6385e-02]], [[ 3.0988e-02, 3.7202e-02, 3.2717e-02], [ 2.2254e-02, 2.5568e-02, 2.0319e-02], [ 1.6005e-02, 1.8056e-02, 2.1581e-02]], [[ 1.0635e-02, 1.1562e-02, 5.3531e-03], [ 1.1013e-02, 6.0068e-03, -3.6177e-04], [-4.7672e-03, -8.4110e-03, -1.1806e-02]]], [[[-1.8698e-02, -1.3729e-02, -1.4909e-02], [-5.8289e-03, -1.2334e-03, -3.8482e-03], [-1.0808e-02, -7.0850e-03, -8.6981e-03]], [[-2.5030e-02, -2.1125e-02, -1.5732e-02], [-3.0320e-02, -3.1733e-02, -2.3766e-02], [-1.7879e-02, -1.4841e-02, -1.1641e-02]], [[-2.0517e-03, 2.5807e-03, 4.5387e-03], [-1.2045e-02, -1.5012e-02, -7.6808e-03], [-1.7975e-02, -2.2750e-02, -1.9577e-02]], ..., [[ 3.5005e-04, -1.3788e-03, 1.6443e-03], [ 1.0239e-02, 1.2764e-02, 1.1701e-02], [ 1.4905e-02, 2.2225e-02, 1.4297e-02]], [[-9.0399e-04, 3.5214e-03, -9.5974e-04], [ 6.2949e-03, 1.2765e-02, 8.6766e-03], [ 5.4249e-04, 6.4801e-03, 1.1623e-03]], [[ 1.6071e-03, 4.2588e-04, 1.1642e-03], [-3.4708e-04, -4.2567e-03, -5.8230e-03], [-3.3934e-05, 1.5304e-03, 3.3960e-03]]], [[[-3.8963e-03, -1.8533e-02, -2.0194e-02], [ 6.4241e-03, -1.7518e-03, 3.2002e-03], [ 1.3931e-02, 1.0434e-02, 1.6078e-02]], [[-5.4905e-03, -1.2705e-03, -7.3535e-04], [-1.5833e-02, -1.3108e-02, -1.0310e-02], [-1.2612e-02, -1.2630e-02, -6.5879e-03]], [[ 7.1650e-03, 1.2557e-02, -2.3518e-03], [ 3.6741e-03, 3.7510e-03, 4.2048e-04], [-6.4209e-03, -6.1990e-04, 3.2332e-03]], ..., [[ 8.4513e-05, 9.1613e-03, 4.5521e-03], [-1.5048e-03, 8.4461e-03, 1.9650e-03], [-4.7133e-03, 1.4931e-03, -4.8129e-03]], [[ 3.9211e-03, 9.6477e-03, -5.6869e-03], [ 1.8654e-02, 2.3556e-02, 1.1002e-02], [ 7.3217e-03, 2.0445e-02, 8.4676e-04]], [[ 8.9096e-03, 1.5256e-02, 8.7999e-03], [ 8.8944e-03, 1.6960e-02, 5.8885e-03], [ 1.9095e-02, 2.8412e-02, 1.3970e-02]]], ..., [[[-3.4082e-03, 2.3231e-03, 2.4369e-03], [ 6.5578e-03, 7.1921e-03, 4.3148e-03], [ 4.1028e-03, 7.8415e-04, -1.9295e-03]], [[-1.4117e-02, -5.1234e-03, -1.0715e-02], [ 1.6844e-03, 1.1223e-02, 5.1856e-03], [ 2.5110e-03, 1.3034e-02, 5.4746e-03]], [[ 2.5816e-03, 2.6108e-03, 7.4181e-04], [ 2.6595e-03, 4.8323e-05, 1.2901e-03], [ 6.3507e-03, -1.4256e-03, -3.9289e-03]], ..., [[-9.6980e-04, -2.9299e-03, -8.3990e-03], [ 1.8786e-02, 1.2899e-02, 4.5213e-03], [ 3.8025e-03, 3.8034e-03, -5.6048e-03]], [[ 1.5878e-03, -8.8998e-04, -1.2472e-03], [ 7.6056e-03, 2.5218e-03, 1.8752e-03], [ 4.8625e-03, 5.8655e-03, 7.7201e-03]], [[ 4.9569e-03, 1.2917e-02, 9.1039e-03], [ 8.4927e-03, 2.2154e-02, 1.8234e-02], [-1.7004e-02, -4.5199e-03, -8.9810e-05]]], [[[-1.5344e-02, -1.4163e-02, -1.2581e-02], [-1.2933e-02, -9.1991e-03, -1.2142e-02], [-5.2887e-03, -6.4012e-04, -7.8908e-03]], [[-4.8126e-03, -3.0007e-03, -9.8636e-03], [-2.7367e-02, -2.7791e-02, -3.1125e-02], [-2.0836e-02, -2.5359e-02, -2.8810e-02]], [[-5.9385e-03, -8.3954e-03, -3.8691e-04], [ 9.1330e-03, 4.3334e-03, 9.3578e-03], [ 1.0573e-02, 6.8446e-03, 6.2973e-03]], ..., [[ 1.3933e-02, 1.5533e-02, 1.2130e-02], [ 2.5104e-03, 3.7661e-03, 3.3809e-03], [-1.5576e-02, -1.0280e-02, -8.0158e-03]], [[-3.6455e-04, 4.9681e-03, 1.9973e-03], [-2.4459e-02, -2.2198e-02, -2.2054e-02], [-3.1972e-02, -3.0996e-02, -2.8139e-02]], [[ 9.2234e-03, 1.3040e-02, 7.6237e-03], [-4.4340e-03, -9.0570e-03, -8.7523e-03], [-6.7010e-03, -1.2804e-02, -6.4150e-03]]], [[[-1.4760e-03, -9.9379e-03, -6.5921e-03], [ 1.4530e-02, 1.5256e-02, 1.5571e-02], [ 1.1455e-02, 1.4326e-02, 8.7877e-03]], [[-4.6391e-03, -3.9982e-03, -4.9588e-03], [-2.3690e-02, -2.6277e-02, -2.5092e-02], [-2.1399e-02, -3.0819e-02, -2.2742e-02]], [[-6.8114e-03, -1.7039e-02, -1.2390e-02], [-9.4437e-03, -1.9254e-02, -1.0018e-02], [-1.3501e-02, -1.8455e-02, -1.3728e-02]], ..., [[ 1.7444e-02, 2.0713e-02, 2.3417e-02], [ 2.6233e-02, 3.4261e-02, 2.5660e-02], [ 2.8265e-03, 1.0879e-02, -3.0106e-03]], [[-1.4951e-02, -2.5918e-02, -7.8135e-03], [-1.4847e-02, -2.8177e-02, -1.0104e-02], [ 4.4676e-03, -3.0419e-04, 5.9580e-03]], [[-8.1167e-03, -7.0768e-03, -8.3108e-03], [-2.4930e-03, -4.2585e-03, 4.3373e-03], [-5.9580e-03, -3.1970e-03, 3.6915e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn1.weight&#39;, tensor([0.2632, 0.2294, 0.2750, 0.2277, 0.2256, 0.2380, 0.2671, 0.2507, 0.2273, 0.2525, 0.2241, 0.2424, 0.2652, 0.2690, 0.2078, 0.2426, 0.2181, 0.2564, 0.2736, 0.2449, 0.2483, 0.2226, 0.2649, 0.2109, 0.2623, 0.2381, 0.2681, 0.2569, 0.2660, 0.2355, 0.2487, 0.2838, 0.2478, 0.1989, 0.2632, 0.2752, 0.2483, 0.1309, 0.1645, 0.3026, 0.2496, 0.2264, 0.2626, 0.2018, 0.1795, 0.2496, 0.2411, 0.2145, 0.2594, 0.2458, 0.2659, 0.2406, 0.2167, 0.1746, 0.2382, 0.2228, 0.2940, 0.1983, 0.2206, 0.2537, 0.2005, 0.2424, 0.2579, 0.2535, 0.1762, 0.1859, 0.2179, 0.2441, 0.2483, 0.1515, 0.2495, 0.2480, 0.2643, 0.2633, 0.2419, 0.2228, 0.2230, 0.2463, 0.2364, 0.2755, 0.2476, 0.2626, 0.3286, 0.2810, 0.1897, 0.2672, 0.2463, 0.2390, 0.2300, 0.2225, 0.2575, 0.2852, 0.2139, 0.2547, 0.2200, 0.2447, 0.3064, 0.2824, 0.2463, 0.2440, 0.2358, 0.2165, 0.2374, 0.2510, 0.2529, 0.3287, 0.2748, 0.2313, 0.2378, 0.2514, 0.2619, 0.2325, 0.2046, 0.2692, 0.2468, 0.2473, 0.2444, 0.2103, 0.2292, 0.2398, 0.2379, 0.2591, 0.2087, 0.2803, 0.2326, 0.2002, 0.2465, 0.2708, 0.2559, 0.2988, 0.2658, 0.2572, 0.2702, 0.2589, 0.2634, 0.2409, 0.2420, 0.2490, 0.2272, 0.2343, 0.2415, 0.2078, 0.2195, 0.2748, 0.2594, 0.2244, 0.2513, 0.2182, 0.2553, 0.2536, 0.3213, 0.2652, 0.2481, 0.2701, 0.2392, 0.2606, 0.2278, 0.2416, 0.2617, 0.2274, 0.2616, 0.2558, 0.2522, 0.2347, 0.2586, 0.2349, 0.2112, 0.2157, 0.2740, 0.2919, 0.2123, 0.2414, 0.2383, 0.2306, 0.2857, 0.2268, 0.2573, 0.2317, 0.2484, 0.2652, 0.2425, 0.2174, 0.2826, 0.2333, 0.2779, 0.2590, 0.2090, 0.2242, 0.1984, 0.2326, 0.2389, 0.2682, 0.2554, 0.2875, 0.2194, 0.2426, 0.2450, 0.2523, 0.2382, 0.2491, 0.2333, 0.2712, 0.2968, 0.2223, 0.2395, 0.2537, 0.2617, 0.2696, 0.1663, 0.3153, 0.2162, 0.2450, 0.3140, 0.2833, 0.2681, 0.2284, 0.2667, 0.2263, 0.2578, 0.2328, 0.2542, 0.2672, 0.2164, 0.2513, 0.1851, 0.2571, 0.2939, 0.2180, 0.2035, 0.2658, 0.2823, 0.2482, 0.2249, 0.2281, 0.2090, 0.2428, 0.3340, 0.2538, 0.2602, 0.1897, 0.2556, 0.2506, 0.2242, 0.2171, 0.2618, 0.2924, 0.2586, 0.2090, 0.2585, 0.2304, 0.2329, 0.2660, 0.1720, 0.2141, 0.2329, 0.2158, 0.2374, 0.2676, 0.2588, 0.2200, 0.2260, 0.2419, 0.2642, 0.2385, 0.2404, 0.2614, 0.2546, 0.2538, 0.2086, 0.2579, 0.2270, 0.1141, 0.2026, 0.2478, 0.2490, 0.2521, 0.2520, 0.2855, 0.2870, 0.2482, 0.2463, 0.2452, 0.2677, 0.2143, 0.2217, 0.2692, 0.1234, 0.2324, 0.2526, 0.2163, 0.2452, 0.2446, 0.2552, 0.2044, 0.2561, 0.2011, 0.2496, 0.2607, 0.2621, 0.2394, 0.2429, 0.2109, 0.2681, 0.2308, 0.2205, 0.2176, 0.2262, 0.2735, 0.2583, 0.2621, 0.2046, 0.2594, 0.2454, 0.2444, 0.2568, 0.2655, 0.2381, 0.2844, 0.2318, 0.2495, 0.1968, 0.2779, 0.2647, 0.1390, 0.2641, 0.2459, 0.2832, 0.2452, 0.2483, 0.2505, 0.1740, 0.2582, 0.2456, 0.2471, 0.2643, 0.2524, 0.2472, 0.2635, 0.2014, 0.2546, 0.2674, 0.3049, 0.1913, 0.2326, 0.2510, 0.2876, 0.2537, 0.2501, 0.2421, 0.2269, 0.3205, 0.2844, 0.2744, 0.1525, 0.2275, 0.2436, 0.1946, 0.2391, 0.2413, 0.2777, 0.1886, 0.2609, 0.2534, 0.2733, 0.2598, 0.2400, 0.2492, 0.2717, 0.2282, 0.2518, 0.2660, 0.2293, 0.2388, 0.2153, 0.2577, 0.2315, 0.2568, 0.3031, 0.2404, 0.2651, 0.2715, 0.2561, 0.2483, 0.2015, 0.2478, 0.2684, 0.2268, 0.2246, 0.2469, 0.2348, 0.2420, 0.2348, 0.2758, 0.2496, 0.2396, 0.2105, 0.2325, 0.2508, 0.2582, 0.3120, 0.2413, 0.2480, 0.2100, 0.1699, 0.2178, 0.2649, 0.2245, 0.2719, 0.2635, 0.2066, 0.2440, 0.2259, 0.2503, 0.3283, 0.2232, 0.2584, 0.2082, 0.1899, 0.2101, 0.2107, 0.2085, 0.2113, 0.2466, 0.2659, 0.2367, 0.2573, 0.2568, 0.2381, 0.2589, 0.2434, 0.2389, 0.2785, 0.2142, 0.1393, 0.2285, 0.2828, 0.2044, 0.1947, 0.2967, 0.2014, 0.2612, 0.2581, 0.2827, 0.2299, 0.2860, 0.2604, 0.2158, 0.2584, 0.2531, 0.2651, 0.2430, 0.2150, 0.2436, 0.2222, 0.2549, 0.2107, 0.2795, 0.2474, 0.2068, 0.2376, 0.2659, 0.2540, 0.2589, 0.2480, 0.2482, 0.2668, 0.3085, 0.2308, 0.2191, 0.2299, 0.2635, 0.2592, 0.2480, 0.2673, 0.2815, 0.2242, 0.2975, 0.1721, 0.2373, 0.2458, 0.1934, 0.2648, 0.2959, 0.2623, 0.2344, 0.2733, 0.2475, 0.1886, 0.2435, 0.2551, 0.2360, 0.2661, 0.2536, 0.2263, 0.2631, 0.2686, 0.2208, 0.2275, 0.2177, 0.2680, 0.2645, 0.3031, 0.3328, 0.1784, 0.2257, 0.2548, 0.2816, 0.2320, 0.2071, 0.2499, 0.2306, 0.2816], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn1.bias&#39;, tensor([-0.2111, -0.1611, -0.2746, -0.1470, -0.1590, -0.1987, -0.2614, -0.1724, -0.1229, -0.2432, -0.1602, -0.1673, -0.2390, -0.2375, -0.1075, -0.1950, -0.1891, -0.2358, -0.2555, -0.1796, -0.2424, -0.1553, -0.2172, -0.1371, -0.2266, -0.1609, -0.2818, -0.2432, -0.2455, -0.1576, -0.2074, -0.2842, -0.1966, -0.0833, -0.2392, -0.2348, -0.1929, 0.0159, -0.1198, -0.2938, -0.2301, -0.1687, -0.2340, -0.0914, -0.0608, -0.2003, -0.1636, -0.1640, -0.2308, -0.1791, -0.2400, -0.2133, -0.1472, -0.0463, -0.2160, -0.1689, -0.2472, -0.1029, -0.1649, -0.2141, -0.1501, -0.1778, -0.1970, -0.1928, -0.0625, -0.0704, -0.1537, -0.2169, -0.1920, 0.0731, -0.1892, -0.2026, -0.2511, -0.2365, -0.1649, -0.1949, -0.1650, -0.1951, -0.1743, -0.2856, -0.2189, -0.2311, -0.3479, -0.2790, -0.0516, -0.2424, -0.2397, -0.1862, -0.1929, -0.0877, -0.2393, -0.2215, -0.1496, -0.2230, -0.1235, -0.1901, -0.2992, -0.2420, -0.1774, -0.2107, -0.1609, -0.1700, -0.1727, -0.1978, -0.2158, -0.3955, -0.2679, -0.1810, -0.2080, -0.2217, -0.2641, -0.1722, -0.0980, -0.2384, -0.2116, -0.1957, -0.2001, -0.1404, -0.1577, -0.1695, -0.1576, -0.2139, -0.0929, -0.2475, -0.1989, -0.1404, -0.2204, -0.2521, -0.2327, -0.3076, -0.2550, -0.2306, -0.2578, -0.2194, -0.2163, -0.2115, -0.1973, -0.2577, -0.2135, -0.1809, -0.1783, -0.1176, -0.1246, -0.2474, -0.2253, -0.1773, -0.1900, -0.1172, -0.2109, -0.1979, -0.3870, -0.2800, -0.2182, -0.2357, -0.1705, -0.2350, -0.1967, -0.1981, -0.2355, -0.1725, -0.2183, -0.2297, -0.1965, -0.1532, -0.2472, -0.1815, -0.1028, -0.1694, -0.2755, -0.2725, -0.0738, -0.1719, -0.2247, -0.1771, -0.2840, -0.1938, -0.1990, -0.1628, -0.2194, -0.2383, -0.1851, -0.1015, -0.2901, -0.1693, -0.2555, -0.2182, -0.1336, -0.1738, -0.0931, -0.1953, -0.1954, -0.2155, -0.2336, -0.3006, -0.1617, -0.1944, -0.1987, -0.2134, -0.2317, -0.1942, -0.1707, -0.2436, -0.3044, -0.1116, -0.1725, -0.1785, -0.2308, -0.2708, -0.0452, -0.2877, -0.1118, -0.2176, -0.2743, -0.2462, -0.2215, -0.1570, -0.2138, -0.1303, -0.2368, -0.2057, -0.2248, -0.2160, -0.1619, -0.1946, -0.0610, -0.2134, -0.2239, -0.1153, -0.1166, -0.2329, -0.2908, -0.2414, -0.1763, -0.1609, -0.1525, -0.2073, -0.3567, -0.1864, -0.2227, -0.0825, -0.2035, -0.1895, -0.1542, -0.1440, -0.2071, -0.2557, -0.2214, -0.1549, -0.2416, -0.1830, -0.1896, -0.2394, -0.0460, -0.1398, -0.1642, -0.1419, -0.1851, -0.2115, -0.2475, -0.1745, -0.1764, -0.2045, -0.2160, -0.1905, -0.2194, -0.2358, -0.1927, -0.2189, -0.0967, -0.1858, -0.1234, 0.0698, -0.1133, -0.2124, -0.1833, -0.1998, -0.2200, -0.2558, -0.2658, -0.1846, -0.1860, -0.1930, -0.2057, -0.1373, -0.1520, -0.2297, 0.0236, -0.1696, -0.2098, -0.1556, -0.1975, -0.1840, -0.2244, -0.0823, -0.2117, -0.1116, -0.2414, -0.2426, -0.2286, -0.1996, -0.1953, -0.1533, -0.2603, -0.1537, -0.1609, -0.1480, -0.1624, -0.2423, -0.2246, -0.2624, -0.1330, -0.2094, -0.1783, -0.2054, -0.2205, -0.2382, -0.2105, -0.2553, -0.1726, -0.2083, -0.0862, -0.2505, -0.2301, 0.0060, -0.2208, -0.2102, -0.2672, -0.2029, -0.1958, -0.2082, -0.0572, -0.2365, -0.1799, -0.1951, -0.2511, -0.2204, -0.1994, -0.2129, -0.1482, -0.2020, -0.2290, -0.2861, -0.0515, -0.1678, -0.2212, -0.2501, -0.2326, -0.2143, -0.2058, -0.1872, -0.3452, -0.2583, -0.2618, -0.0545, -0.1472, -0.1978, -0.0855, -0.2027, -0.1544, -0.2458, -0.0841, -0.2209, -0.2157, -0.2466, -0.2031, -0.1982, -0.1710, -0.2587, -0.1994, -0.2102, -0.2199, -0.1823, -0.1847, -0.1663, -0.2068, -0.1889, -0.2322, -0.2847, -0.2147, -0.2379, -0.2503, -0.2039, -0.2207, -0.0967, -0.1939, -0.2135, -0.1548, -0.1693, -0.1922, -0.1682, -0.1911, -0.1737, -0.2810, -0.2148, -0.1649, -0.1279, -0.1740, -0.2159, -0.1290, -0.3411, -0.1900, -0.1410, -0.1495, -0.0362, -0.1369, -0.2396, -0.1679, -0.2399, -0.2368, -0.1574, -0.2093, -0.1755, -0.2202, -0.4030, -0.1625, -0.1931, -0.1554, -0.1021, -0.1462, -0.1176, -0.1388, -0.0951, -0.1787, -0.2635, -0.1760, -0.2197, -0.2135, -0.2226, -0.2209, -0.1986, -0.1828, -0.2837, -0.1566, -0.0260, -0.1729, -0.2637, -0.0936, -0.1402, -0.2852, -0.1376, -0.2704, -0.2234, -0.2759, -0.1388, -0.2768, -0.2070, -0.1429, -0.2438, -0.2226, -0.2297, -0.1997, -0.1786, -0.2167, -0.1748, -0.2058, -0.1361, -0.2777, -0.1965, -0.1070, -0.1583, -0.2135, -0.2365, -0.2418, -0.1747, -0.2141, -0.2173, -0.3245, -0.1762, -0.1068, -0.1704, -0.2300, -0.2290, -0.2157, -0.2515, -0.2644, -0.1468, -0.3166, -0.1119, -0.1904, -0.2054, -0.1054, -0.2244, -0.2480, -0.2075, -0.1669, -0.2514, -0.1878, -0.0383, -0.1854, -0.2213, -0.1824, -0.2683, -0.2019, -0.1071, -0.2182, -0.2051, -0.1595, -0.1662, -0.1203, -0.2566, -0.2492, -0.3191, -0.3673, -0.0408, -0.1716, -0.2135, -0.2468, -0.2019, -0.1501, -0.1945, -0.2051, -0.2714], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn1.running_mean&#39;, tensor([-2.6691, -2.4229, -3.0763, -3.2018, -2.4713, -2.9062, -3.0253, -2.8612, -3.2983, -2.1432, -2.5160, -3.0491, -2.3007, -2.1014, -2.7768, -2.4702, -1.4835, -2.1419, -2.7475, -1.9729, -1.8337, -2.3252, -3.4027, -2.4696, -2.1485, -2.4453, -1.9922, -2.3838, -3.0902, -3.3095, -2.2408, -2.5327, -1.8449, -3.7479, -2.5110, -3.1881, -2.8236, -3.3401, -0.5349, -2.7270, -2.3947, -2.6152, -2.3133, -3.2085, -1.6435, -2.9363, -2.6050, -2.4470, -2.8709, -2.1074, -2.9844, -3.1835, -2.7693, -2.4306, -2.4160, -2.2467, -3.5890, -3.5648, -1.9200, -2.8476, -1.4158, -2.7357, -2.7660, -2.8312, -2.6431, -2.5244, -1.9103, -2.5266, -2.9421, 0.5718, -2.6855, -2.3194, -2.1707, -1.8275, -2.6823, -2.1543, -2.5032, -1.8981, -2.0880, -2.0327, -3.2807, -2.3862, -2.8148, -2.9490, -2.1338, -1.5960, -1.9311, -2.7543, -3.0485, -3.4632, -1.0346, -3.4483, -2.1221, -2.4226, -1.9323, -3.4613, -2.9552, -2.8976, -2.7575, -3.0255, -2.7244, -1.8115, -3.0925, -3.7279, -3.3531, -3.1208, -2.6951, -2.6149, -2.2758, -2.8717, -2.1358, -2.4875, -2.1387, -3.0771, -2.7045, -2.7328, -2.1488, -2.9780, -2.2771, -3.3598, -2.0688, -2.2238, -3.0211, -2.7338, -2.3345, -2.6148, -2.0152, -3.0504, -2.8736, -2.8679, -2.4093, -2.5061, -2.8039, -2.7050, -2.5491, -2.5856, -2.8446, -2.3960, -1.4844, -2.8200, -2.9328, -2.4329, -3.1119, -2.5688, -2.4045, -1.9176, -3.1341, -2.8522, -3.0675, -3.0586, -3.3687, -2.7052, -1.9258, -2.6758, -2.4155, -2.9907, -2.1135, -1.7624, -2.0377, -2.1784, -2.6105, -2.1991, -3.1760, -2.7623, -2.4471, -2.6134, -3.7568, -2.4446, -3.2522, -2.5475, -4.1563, -2.9438, -2.0062, -3.0939, -2.5128, -2.2819, -2.5466, -2.7062, -2.6626, -2.2630, -1.6981, -2.9869, -2.8788, -2.3638, -2.9239, -2.5658, -2.7009, -2.1324, -2.7642, -1.9678, -2.6038, -2.4416, -2.2359, -3.3586, -1.8538, -2.6217, -2.9468, -2.2865, -1.9206, -2.1244, -2.4929, -2.4743, -3.2624, -2.9138, -2.4555, -2.6297, -2.4287, -2.7381, -3.0855, -2.7780, -2.8510, -2.6941, -3.3294, -3.1041, -2.4084, -2.2976, -2.7939, -3.2653, -3.3583, -2.6729, -2.4047, -2.9535, -1.8627, -2.6067, -2.1442, -3.2736, -3.5570, -3.7472, -2.2366, -3.0323, -2.6508, -2.2927, -1.4317, -2.3504, -1.2584, -2.6056, -2.7869, -2.9340, -2.7410, -3.3063, -2.7683, -2.2061, -1.9750, -3.1106, -2.9722, -3.2861, -2.2583, -2.0680, -2.3764, -2.7405, -2.1421, -2.9592, -2.1245, -2.7080, -2.0320, -2.2445, -2.0860, -2.6419, -2.9042, -1.5084, -3.3830, -2.1783, -2.4552, -2.3469, -2.0912, -2.3500, -3.0486, -2.6952, -3.3013, -3.1540, -3.4392, -2.6445, -2.7229, -2.4642, -2.8946, -2.9478, -2.9425, -3.0499, -2.7297, -3.2025, -3.0266, -2.5279, -3.6608, -3.0166, -2.9051, -2.7514, -2.3702, -2.3565, -2.8946, -2.5666, -2.2541, -2.6754, -2.2401, -3.6620, -2.5458, -1.9839, -2.2606, -2.9680, -2.1060, -2.6440, -2.9839, -2.3829, -2.5330, -3.5067, -2.6289, -2.6355, -2.6356, -2.9757, -3.1002, -2.9778, -3.3238, -3.3928, -3.7312, -2.1423, -2.6587, -2.8674, -1.9452, -2.8405, -2.0233, -2.6859, -3.3318, -3.0314, -2.7201, -3.4876, -2.2541, -1.8890, -3.4912, -2.2132, -2.2791, -2.8944, -3.3675, -2.0216, -2.8556, -3.8825, -3.1035, -2.3685, -3.1212, -3.5929, -1.2260, -2.8302, -2.5210, -2.9393, -3.2753, -2.7489, -2.5707, -3.3619, -2.0462, -2.9064, -2.0409, -2.4283, -2.8559, -2.9323, -2.6691, -0.4506, -2.0310, -2.9532, -2.6259, -2.5899, -2.7936, -2.9669, -2.5076, -3.5359, -1.7363, -2.9279, -2.8824, -2.9754, -3.5876, -3.1260, -2.3910, -2.9673, -3.2356, -2.1183, -2.2517, -2.0222, -3.9163, -2.5970, -2.7925, -2.7476, -2.7492, -3.1613, -3.0240, -3.4971, -3.3884, -2.4149, -2.5271, -3.6407, -2.0951, -2.7575, -2.2553, -3.1043, -1.9109, -1.8832, -2.6270, -3.2577, -2.6963, -2.7149, -2.3399, -2.9803, -3.6139, -3.7385, -2.6207, -3.5786, -2.7163, -2.2446, -1.9521, -3.1571, -2.4731, -2.7175, -2.3096, -2.4940, -2.3230, -2.0151, -2.8489, -3.2934, -2.8836, -3.3955, -3.2027, -2.8469, -2.6722, -2.7516, -2.5010, -3.6047, -3.0804, -2.2276, -2.0476, -2.6750, -2.0078, -2.7793, -2.2932, -2.8158, -2.9076, -3.3612, -2.1492, -2.6047, -2.2959, -2.9688, -3.0548, -2.0675, -2.7345, -1.9745, -2.1196, -3.8471, -2.9099, -3.1281, -2.6450, -1.9931, -1.6741, -2.9271, -2.1520, -2.9717, -2.7949, -2.0377, -3.0773, -2.6519, -2.4155, -2.7716, -3.2452, -3.2819, -2.6696, -3.2167, -2.5658, -1.8417, -2.8238, -2.4218, -2.4045, -2.5716, -3.2341, -2.5089, -3.3168, -2.7045, -2.6351, -2.5445, -1.9847, -3.2946, -3.4687, -2.3082, -2.4208, 0.0402, -1.9066, -3.0534, -2.4128, -2.9255, -2.4830, -2.8980, -2.6712, -2.4457, -2.6560, -4.3762, -3.0414, -2.1505, -2.8451, -2.6805, -2.9248, -3.5693, -2.5724, -3.2093, -2.4149, -2.2833, -3.1560, -2.2160, -2.6623, -3.0283, -3.2057, -2.5540, -1.9724, -2.3602, -2.9504, -2.5860, -2.7172, -2.8441, -3.0944, -3.3260], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn1.running_var&#39;, tensor([1.8934, 1.6803, 1.7584, 2.7277, 2.3447, 1.9574, 2.3774, 2.2459, 2.7656, 1.7782, 1.4879, 2.4257, 1.9154, 1.3381, 2.0563, 2.3012, 1.4517, 1.6079, 2.1881, 1.6865, 1.3036, 1.7432, 1.9634, 1.9507, 1.8506, 1.9247, 1.8090, 1.9797, 1.8508, 2.6141, 1.8665, 1.5933, 1.8964, 2.7437, 2.2728, 2.0834, 2.0303, 3.0519, 1.8359, 1.8399, 1.9807, 1.9496, 2.0233, 2.7178, 1.6648, 2.1716, 2.1824, 1.7566, 1.6576, 1.6365, 1.7204, 2.0618, 1.7359, 2.2349, 1.7764, 1.8152, 2.8119, 2.0127, 2.3505, 2.5705, 1.6724, 1.8479, 2.0575, 1.7990, 2.2233, 2.3272, 2.2376, 1.7500, 2.0872, 5.2189, 1.4481, 1.7553, 1.7463, 1.9396, 1.5686, 1.6296, 1.6743, 2.0087, 1.9298, 1.5440, 2.1659, 1.9339, 1.7030, 1.7597, 2.1387, 1.7785, 1.7037, 2.0821, 1.7686, 2.4331, 1.6305, 2.0793, 2.2196, 1.7782, 1.8500, 2.2871, 2.4600, 2.2290, 1.9773, 2.3774, 2.0750, 1.6769, 1.8323, 2.2945, 2.2960, 2.0380, 2.0490, 1.8235, 1.8534, 1.6628, 2.4455, 2.0091, 1.7140, 1.9228, 1.8438, 2.2586, 2.0158, 2.2119, 2.1723, 2.7733, 2.5119, 2.3685, 2.2004, 1.8661, 1.8650, 2.4275, 1.7984, 1.9445, 1.8781, 1.8044, 1.9251, 2.0502, 1.6895, 2.1822, 1.6564, 1.8936, 1.7637, 2.2353, 1.6330, 1.8274, 1.7439, 2.0302, 2.0185, 1.7912, 1.7261, 1.5010, 2.0550, 2.4290, 1.8674, 2.1389, 2.0662, 2.1205, 1.5439, 1.8795, 2.1000, 1.7119, 1.8602, 1.5052, 1.5271, 1.7150, 2.3389, 2.3216, 2.0630, 1.7224, 1.4620, 1.7004, 2.8637, 1.8785, 2.2542, 2.1145, 4.3113, 2.4489, 1.7186, 2.2325, 1.6848, 1.6130, 2.1156, 1.9654, 1.8549, 2.3689, 1.3409, 2.4387, 2.1469, 1.5988, 2.2899, 1.5951, 2.1404, 2.2087, 2.2790, 1.6798, 1.6535, 2.0616, 2.3192, 1.9565, 2.3972, 1.7397, 2.1653, 2.1122, 1.5253, 1.9454, 2.1303, 1.6746, 2.4445, 2.3671, 1.8383, 2.0055, 1.8052, 1.8444, 2.2005, 1.9207, 1.7744, 1.6298, 2.3272, 1.8803, 2.1127, 1.6866, 1.9533, 2.3892, 2.1965, 2.1596, 1.7569, 2.2560, 1.9513, 2.5498, 2.1036, 2.2009, 2.3177, 2.1334, 1.6599, 1.7399, 1.8629, 1.6818, 2.2257, 1.5965, 2.0789, 1.9847, 1.9151, 2.2572, 2.0300, 2.4878, 2.2650, 2.0083, 1.7763, 1.7748, 1.9426, 2.0967, 2.3828, 1.7614, 1.5714, 1.7093, 1.7274, 1.6499, 2.0262, 1.9766, 1.9612, 1.7410, 1.8349, 1.8061, 2.1124, 1.6400, 2.1273, 1.7994, 2.0499, 1.8664, 1.9066, 1.8675, 2.3851, 1.9340, 2.5352, 2.2482, 2.1535, 2.7764, 2.7207, 1.7325, 1.9698, 2.0185, 2.0860, 1.8234, 1.5824, 2.2845, 2.2349, 2.1177, 1.8710, 2.0427, 2.0481, 1.8747, 2.3973, 1.7139, 1.9199, 1.9441, 2.3091, 2.3155, 1.5932, 2.4966, 2.5454, 2.0319, 1.9736, 1.7871, 1.8292, 1.8016, 2.0254, 2.1449, 1.5317, 2.0188, 1.7877, 1.7341, 2.1425, 2.1242, 1.8415, 1.8399, 1.6218, 2.3088, 2.2184, 1.9348, 2.1274, 1.8182, 1.9188, 1.8482, 2.0418, 1.5970, 2.4393, 1.8982, 1.8885, 2.6451, 1.9511, 1.9845, 2.2752, 2.6158, 2.5067, 2.1243, 2.5712, 1.4133, 2.0764, 2.2331, 1.9949, 2.9359, 2.2842, 3.6552, 1.9236, 2.1340, 1.5701, 1.8107, 3.0424, 1.7384, 2.0246, 2.1183, 2.2291, 2.0136, 1.8151, 2.2182, 2.3512, 2.4960, 1.7975, 1.8370, 1.8935, 1.8303, 1.8975, 1.9054, 2.6497, 1.7260, 1.8298, 2.3554, 1.7131, 2.1545, 1.8258, 2.0435, 2.9792, 1.8249, 1.9780, 1.7049, 2.4174, 1.9095, 1.7920, 1.6449, 2.6583, 2.3618, 1.9766, 1.9130, 2.0986, 2.0499, 1.9251, 2.3322, 2.0657, 2.2321, 1.6574, 2.5725, 2.0218, 2.1114, 1.8050, 2.0094, 1.2906, 1.7851, 1.9906, 2.1329, 2.4775, 2.1094, 2.0302, 2.2187, 3.0558, 2.2670, 1.9433, 3.5803, 1.9342, 2.3298, 3.0953, 2.6308, 1.6822, 2.4921, 1.7819, 1.9263, 1.7299, 1.9036, 1.9411, 1.8365, 1.9486, 2.0200, 2.1137, 1.6723, 1.8219, 1.6526, 2.2670, 3.0341, 2.2952, 1.6652, 2.1098, 1.7368, 2.3474, 1.9024, 1.8680, 1.8944, 1.9096, 2.3958, 1.6826, 1.8811, 1.9678, 2.3424, 1.9607, 1.5416, 2.0412, 1.8523, 1.7477, 2.5375, 1.6998, 2.1455, 1.9302, 1.6346, 2.2844, 1.6698, 2.0608, 2.0651, 1.7879, 1.6495, 1.9134, 2.0946, 2.1046, 1.9243, 1.7800, 2.0238, 2.3283, 2.1591, 1.8741, 1.4966, 1.6180, 1.8853, 1.7861, 2.0972, 2.1483, 2.2457, 2.1110, 1.6808, 1.7874, 2.0417, 1.8122, 2.2218, 2.0636, 1.6905, 2.1575, 1.4686, 2.1824, 2.2416, 1.9143, 2.2611, 2.1135, 2.1036, 1.8776, 1.6970, 2.3128, 4.1727, 2.4486, 1.7577, 2.1946, 1.5200, 2.3956, 2.9862, 1.6726, 2.2745, 1.9587, 2.1980, 2.2108, 1.6915, 1.9178, 1.5647, 2.1252, 2.7886, 2.3599, 1.8926, 2.3773, 1.8865, 1.8627, 1.9729, 1.9506, 2.4044], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn1.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;0.7.2.conv2.weight&#39;, tensor([[[[ 4.1217e-02, 3.4599e-02, 3.9726e-02], [ 3.0494e-02, 1.5371e-02, 2.8416e-02], [ 4.0708e-02, 3.3593e-02, 4.0229e-02]], [[ 4.9781e-03, 7.5044e-03, 5.4877e-03], [ 2.1292e-03, 3.1202e-03, 2.0841e-03], [-2.7598e-04, 9.4155e-04, 2.4230e-04]], [[-5.3421e-03, -3.7778e-03, -4.9258e-03], [-3.3437e-03, -4.9809e-04, -3.4895e-03], [-4.5701e-03, -3.2232e-03, -5.7593e-03]], ..., [[ 1.6992e-02, 1.4964e-02, 1.4330e-02], [ 9.7419e-03, 4.8338e-03, 5.4518e-03], [ 7.3294e-03, 2.8701e-03, 5.8145e-03]], [[ 1.3460e-02, 1.4066e-02, 1.5953e-02], [ 6.8460e-03, 6.8657e-03, 8.5981e-03], [ 7.5841e-04, 1.1877e-03, 2.4270e-03]], [[ 8.7694e-04, -1.4735e-03, -2.2415e-03], [ 9.7981e-03, 6.9927e-03, 5.1883e-03], [ 3.4524e-03, -5.5814e-05, -1.7604e-03]]], [[[-9.1464e-05, -2.3642e-03, -9.4201e-03], [-1.3230e-03, -2.1796e-03, -9.2345e-03], [-4.5007e-04, -1.2692e-03, -6.4426e-03]], [[-8.1771e-03, -7.9470e-03, -7.4192e-03], [-1.7048e-02, -1.4451e-02, -1.5380e-02], [-1.6215e-02, -1.0036e-02, -1.1387e-02]], [[-2.1981e-02, -1.8003e-02, -1.9388e-02], [-1.6562e-02, -1.0417e-02, -1.5929e-02], [-1.3364e-02, -8.6725e-03, -1.4467e-02]], ..., [[ 1.7833e-02, 1.5038e-02, 1.4720e-02], [ 1.4744e-02, 8.3835e-03, 1.4745e-02], [ 1.6301e-02, 1.4362e-02, 1.6658e-02]], [[-1.9014e-02, -1.9022e-02, -2.4762e-02], [-1.6854e-02, -1.6992e-02, -2.1517e-02], [-2.3243e-02, -2.5810e-02, -2.5231e-02]], [[-7.2658e-03, -2.6069e-03, -1.0772e-03], [-7.1846e-03, -1.2814e-03, -2.1784e-03], [-8.1623e-03, -4.0457e-03, -4.0692e-03]]], [[[-1.3559e-02, -1.2227e-02, -1.3754e-02], [-5.8719e-03, -3.5343e-03, -6.9835e-03], [ 4.3981e-03, 5.8191e-03, 1.5208e-03]], [[ 1.0333e-02, 7.7926e-03, 9.0812e-03], [ 6.2594e-03, 8.8420e-04, 5.1222e-03], [ 8.9936e-03, 4.4560e-03, 9.8431e-03]], [[-4.2917e-04, -4.4841e-03, -4.4308e-03], [-2.9217e-03, -6.0849e-03, -4.8249e-03], [-2.8677e-03, -6.0309e-03, -4.5762e-03]], ..., [[-9.8317e-03, -8.7632e-03, -1.0160e-02], [-1.4270e-02, -1.0207e-02, -1.0751e-02], [-1.4281e-02, -1.0860e-02, -8.4007e-03]], [[-6.5741e-03, -4.3531e-03, -4.0573e-03], [-2.3884e-03, 7.7119e-05, 1.0775e-03], [ 1.6092e-03, 3.9501e-03, 4.9472e-03]], [[-7.5746e-03, -8.8492e-03, -1.2198e-02], [-4.7525e-03, -5.3759e-03, -1.2779e-02], [ 1.4327e-04, -1.4787e-05, -6.9348e-03]]], ..., [[[-3.5448e-03, 4.2072e-05, -3.4346e-04], [ 4.8767e-04, 3.9752e-03, 2.5139e-03], [ 5.9758e-04, 3.5496e-03, 2.0935e-03]], [[-1.5639e-03, 5.0974e-04, -1.3594e-03], [ 3.6623e-03, 5.3939e-03, 4.6721e-03], [ 5.0790e-03, 9.5102e-03, 7.0812e-03]], [[-4.0198e-03, 1.1382e-04, -5.9846e-03], [-3.7472e-03, 2.4020e-03, -3.4432e-03], [-5.8104e-03, -1.5026e-03, -6.1402e-03]], ..., [[ 1.5395e-02, 1.5397e-02, 1.6687e-02], [ 6.5702e-03, 6.6136e-03, 1.2922e-02], [ 1.0948e-02, 1.7454e-02, 1.4750e-02]], [[-1.9502e-03, 2.5478e-03, -3.2329e-05], [-4.7169e-03, -2.9003e-03, -5.9206e-03], [-1.2580e-02, -1.3557e-02, -1.3560e-02]], [[ 1.3738e-02, 7.9772e-03, 1.5777e-02], [ 1.0229e-02, -1.6966e-04, 1.1186e-02], [ 1.8434e-02, 1.1111e-02, 1.9119e-02]]], [[[ 3.0999e-02, 3.0127e-02, 3.0424e-02], [ 2.5945e-02, 2.1091e-02, 2.2911e-02], [ 3.1601e-02, 3.3320e-02, 2.9818e-02]], [[ 9.2478e-03, 1.3032e-02, 1.2710e-02], [ 5.1478e-03, 6.2209e-03, 9.9396e-03], [-5.3751e-03, -5.8011e-03, -2.4773e-03]], [[ 6.6933e-03, 3.5111e-03, 6.3507e-03], [ 4.3983e-03, -2.9096e-03, 4.2362e-03], [ 9.2060e-03, 6.6759e-03, 8.3372e-03]], ..., [[ 1.4265e-02, 1.6611e-02, 1.3076e-02], [ 9.9164e-03, 1.0879e-02, 8.1811e-03], [ 1.1052e-02, 1.2672e-02, 7.3677e-03]], [[-1.0298e-02, -1.0095e-02, -8.4179e-03], [-7.1725e-03, -4.0816e-03, -6.3876e-03], [-7.2901e-03, -7.3021e-03, -8.6943e-03]], [[-1.3079e-02, -8.8051e-03, -1.1683e-02], [-8.3270e-03, -3.6285e-03, -4.1237e-03], [-1.3026e-02, -1.0481e-02, -9.8145e-03]]], [[[ 3.2963e-03, 3.7514e-03, 4.1211e-03], [ 3.2174e-03, 3.9268e-03, 2.8813e-03], [ 2.4031e-03, 4.7459e-03, 3.1872e-03]], [[-2.6086e-03, -3.0311e-03, -2.3330e-03], [ 1.3861e-03, 5.7989e-04, -2.1231e-03], [-4.9992e-03, -4.9255e-03, -8.7247e-03]], [[ 7.7497e-04, 2.8601e-03, 2.8951e-03], [ 2.3224e-03, 3.3550e-03, 4.2669e-03], [ 6.2616e-03, 8.9143e-03, 8.4766e-03]], ..., [[ 2.0180e-02, 1.7869e-02, 1.8772e-02], [ 1.5856e-02, 9.0363e-03, 1.5111e-02], [ 2.0749e-02, 1.4412e-02, 1.9298e-02]], [[-1.9952e-02, -1.7532e-02, -1.7561e-02], [-2.1062e-02, -1.6755e-02, -1.6755e-02], [-2.1615e-02, -2.1435e-02, -1.8828e-02]], [[ 1.0915e-02, 9.9701e-03, 1.2982e-02], [ 6.6692e-03, 4.0099e-03, 6.7796e-03], [ 8.2264e-03, 8.6679e-03, 9.1048e-03]]]], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn2.weight&#39;, tensor([1.4342, 1.5130, 1.5641, 1.2894, 1.2869, 1.5194, 1.4938, 1.3067, 1.4352, 1.4126, 1.2769, 1.3398, 1.4351, 1.4230, 1.3509, 1.4346, 1.1294, 1.2712, 1.3467, 1.4321, 1.0912, 1.3220, 1.3262, 1.2161, 1.4754, 1.5745, 1.3953, 1.5440, 1.4084, 1.4769, 1.3458, 1.3487, 1.3468, 1.3368, 1.2980, 1.3853, 1.2895, 1.3894, 1.4997, 1.4182, 1.4618, 1.3836, 1.3799, 1.3749, 1.4543, 1.4418, 1.4871, 1.1271, 1.3256, 1.3999, 1.3536, 1.3393, 1.3477, 1.3962, 1.3239, 1.4418, 1.3388, 1.2427, 1.5194, 1.4435, 1.4658, 1.4601, 1.2417, 1.2579, 1.3697, 1.4636, 1.3330, 1.3314, 1.3461, 1.4221, 1.4466, 1.3123, 1.3575, 1.4223, 1.5365, 1.3144, 1.3400, 1.2798, 1.9169, 1.3590, 1.4071, 1.4113, 1.3235, 1.1483, 1.3149, 1.3924, 1.2461, 1.4052, 1.2198, 1.4690, 1.5366, 1.3206, 1.0289, 1.3136, 1.3015, 1.4980, 1.3381, 1.3238, 1.2603, 1.4175, 1.1919, 1.5102, 1.4890, 1.3930, 1.2521, 1.4101, 1.4997, 1.3995, 1.5053, 1.5474, 1.5166, 1.4674, 1.3599, 1.2642, 1.4214, 1.3088, 1.4647, 1.3544, 1.3375, 1.1802, 1.4102, 1.3137, 1.4926, 1.3818, 1.3949, 1.4821, 1.3469, 1.2850, 1.5000, 1.5268, 1.3782, 1.2857, 1.4637, 1.4312, 1.3496, 1.4430, 1.3890, 1.3034, 1.3707, 1.4462, 1.3671, 1.4652, 1.4883, 1.4840, 1.4474, 1.3259, 1.3831, 1.5514, 1.2607, 1.4687, 1.3349, 1.3213, 1.4154, 1.2061, 1.4323, 1.4092, 1.3417, 1.3737, 1.2354, 1.2384, 1.1867, 1.2131, 1.5045, 1.3748, 1.7379, 1.4338, 1.3688, 1.3935, 1.2520, 1.4033, 1.3838, 1.3975, 1.4901, 1.3147, 1.3805, 1.3764, 1.2512, 1.2771, 1.4430, 1.4917, 1.4007, 1.4704, 1.4120, 1.2668, 1.5408, 1.3635, 1.3976, 1.2766, 1.4410, 1.3640, 1.3111, 1.4351, 1.4174, 1.4706, 1.4010, 1.2508, 1.3103, 1.3217, 1.3518, 1.3807, 1.3117, 1.4780, 1.4829, 1.2685, 1.2946, 1.3011, 1.3586, 1.4413, 1.5345, 1.4201, 1.5357, 1.4302, 1.4888, 1.4570, 1.3313, 1.4282, 1.3721, 1.3591, 1.3415, 1.4846, 1.4853, 1.3103, 1.3448, 1.3807, 1.3981, 1.3488, 1.4901, 1.4743, 1.3960, 1.3903, 1.3171, 1.2669, 1.2964, 1.4858, 1.3127, 1.5339, 1.3758, 1.5621, 1.3060, 1.3806, 1.2654, 1.3741, 1.2297, 1.2867, 1.2566, 1.3932, 1.4760, 1.2487, 1.3588, 1.2736, 1.2775, 1.4897, 1.3501, 1.3604, 1.4897, 1.2982, 1.4380, 1.5757, 1.2728, 1.3691, 1.3760, 1.3334, 1.3138, 1.3979, 1.1750, 1.4721, 1.5054, 1.2938, 1.4715, 1.5006, 1.2210, 1.3654, 1.3912, 1.4095, 1.4238, 1.4570, 1.4082, 1.3055, 1.5265, 1.4690, 1.3841, 1.3660, 1.2879, 1.2974, 1.2769, 1.4741, 1.3492, 1.3278, 1.3697, 1.3853, 1.4501, 1.2558, 1.4210, 1.2669, 1.3408, 1.6425, 1.5769, 1.4684, 1.3750, 1.4753, 1.4682, 1.3354, 1.2489, 1.3992, 1.4075, 1.3137, 1.4862, 1.4909, 1.4723, 1.1835, 1.3606, 1.4520, 1.4749, 1.4913, 1.4613, 1.5364, 1.4875, 1.4535, 1.2263, 1.1633, 1.4459, 1.5077, 1.4936, 1.3304, 1.3399, 1.4486, 1.2343, 1.3118, 1.3826, 1.3835, 1.3176, 1.4495, 1.3418, 1.3820, 1.4737, 1.3884, 1.5092, 1.3722, 1.4762, 1.2784, 1.3624, 1.2460, 1.4116, 1.4290, 1.1317, 1.3349, 1.3928, 1.3008, 1.5252, 1.2482, 1.3337, 1.4754, 1.2151, 1.3876, 1.3584, 1.3221, 1.3290, 1.3620, 1.2948, 1.3754, 1.6020, 1.2333, 1.4492, 1.2372, 1.4254, 1.2510, 1.4020, 1.4278, 1.2681, 1.5091, 1.4590, 1.3292, 1.2254, 1.4442, 1.3284, 1.5004, 1.4923, 1.3416, 1.4572, 1.4798, 1.3677, 1.2507, 1.4255, 1.3787, 1.3729, 1.5272, 1.2495, 1.2248, 1.2709, 1.4998, 1.3797, 1.5389, 1.3697, 1.4501, 1.3464, 1.5753, 1.4831, 1.4110, 1.7298, 1.4592, 1.4254, 1.3616, 1.4930, 1.4393, 1.3077, 1.3284, 1.4676, 1.2063, 1.3869, 1.2936, 1.2854, 1.4640, 1.4992, 1.2963, 1.2018, 1.6206, 1.3502, 1.3826, 1.5726, 1.2153, 1.2035, 1.5379, 1.4778, 1.4879, 1.4776, 1.6246, 1.2817, 1.4151, 1.3333, 1.6324, 1.2973, 1.3502, 1.3152, 1.3270, 1.4305, 1.3024, 1.4399, 1.4273, 1.5332, 1.3482, 1.3336, 1.3782, 1.3862, 1.4922, 1.4353, 1.6860, 1.3398, 1.2806, 1.4019, 1.3548, 1.4186, 1.4235, 1.4006, 1.1538, 1.3515, 1.4115, 1.2557, 1.2743, 1.4929, 1.3800, 1.4624, 1.4641, 1.4287, 1.3183, 1.3346, 1.4454, 1.0507, 1.3974, 1.4478, 1.2831, 1.4367, 1.4329, 1.2979, 1.4033, 1.4143, 1.3205, 1.5162, 1.3350, 1.4053, 1.3718, 1.3844, 1.2179, 1.2582, 1.5259, 1.4349, 1.3055, 1.2499, 1.4246, 1.5771, 1.3207, 1.2515, 1.3042, 1.3610, 1.6000, 1.4229, 1.3626, 1.3369, 1.2794, 1.2465, 1.3235, 1.2945, 1.4232, 1.3383, 1.3321, 1.2550, 1.3645, 1.2820, 1.3475, 1.3541, 1.5242, 1.4774, 1.2519], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn2.bias&#39;, tensor([ 0.1212, 0.1286, 0.1917, 0.1380, 0.0982, 0.1502, 0.1374, 0.1329, 0.2325, 0.1423, 0.1091, 0.1546, 0.1266, 0.1003, 0.1254, 0.2602, 0.1758, 0.1372, 0.0878, 0.1513, -0.0184, 0.1121, 0.1393, 0.1123, 0.1051, 0.0724, 0.1265, 0.0973, 0.1534, 0.1495, 0.0602, 0.1123, 0.1101, 0.1370, 0.0983, 0.1532, 0.1623, 0.1323, 0.1253, 0.1155, 0.0655, 0.1130, 0.1231, 0.1504, 0.0764, 0.1594, 0.1378, 0.1370, 0.1224, 0.1096, 0.1293, 0.2092, 0.0904, 0.1702, 0.0802, 0.0873, 0.1592, 0.1492, 0.1689, 0.1214, 0.1254, 0.2112, 0.1156, 0.1523, 0.1211, 0.0954, 0.1104, 0.1387, 0.1403, 0.1372, 0.1962, 0.1556, 0.1531, 0.0817, 0.1368, 0.1903, 0.1418, 0.1476, 0.0977, 0.1221, 0.1580, 0.1808, 0.1635, 0.0802, 0.1173, 0.1698, 0.2093, 0.0880, 0.1096, 0.0566, 0.3563, 0.1498, 0.1539, 0.1821, 0.1468, 0.2185, 0.1580, 0.1424, 0.1491, 0.1524, 0.1471, 0.0820, 0.1419, 0.1337, 0.0847, 0.1228, 0.1703, 0.0796, 0.1203, 0.1401, 0.1410, 0.0884, 0.1993, 0.1203, 0.1165, 0.0924, 0.1701, 0.0601, 0.1604, 0.1833, 0.1853, 0.1404, 0.1548, 0.1236, 0.0788, 0.0615, 0.1545, 0.2198, 0.0568, 0.0843, 0.0915, 0.1539, 0.1022, 0.1695, 0.1716, 0.0856, 0.1996, 0.1571, 0.1693, 0.0921, 0.1649, 0.1388, 0.1338, 0.1367, 0.1422, 0.1356, 0.2527, 0.1636, 0.1564, 0.1125, 0.1277, 0.1348, 0.1026, 0.1691, 0.1582, 0.1238, 0.1394, 0.1874, 0.1622, 0.1322, 0.1800, 0.1703, 0.1553, 0.1203, 0.3690, 0.1282, 0.1714, 0.2338, 0.1058, 0.1143, 0.1165, 0.1230, 0.1145, 0.1387, 0.1827, 0.1714, 0.2096, 0.1316, 0.0981, 0.1207, 0.0940, 0.1167, 0.1268, 0.1374, 0.1190, 0.1232, 0.1152, 0.1088, 0.1382, 0.1531, 0.2486, 0.1566, 0.1216, 0.1030, 0.0931, 0.1342, 0.1207, 0.0843, 0.1415, 0.1044, 0.1159, 0.1629, 0.1210, 0.1338, 0.0599, 0.1918, 0.1626, 0.0961, 0.1501, 0.1655, 0.1149, 0.1166, 0.0946, 0.1700, 0.1017, 0.1158, 0.0890, 0.1393, 0.1148, 0.0993, 0.1679, -0.0462, 0.1576, 0.1102, 0.1655, 0.1195, 0.1022, 0.1527, 0.1590, 0.1483, 0.1116, 0.1401, 0.1265, 0.1669, 0.1638, 0.1289, 0.1732, 0.0900, 0.1370, 0.1181, 0.1338, 0.2251, 0.2340, 0.1366, 0.1466, 0.1029, 0.0832, 0.1400, 0.1481, 0.1358, 0.1955, 0.1276, 0.1621, 0.2023, 0.1027, 0.2052, 0.1242, 0.0866, 0.1270, 0.0717, 0.1892, 0.1261, 0.1389, 0.1322, 0.1433, -0.0744, 0.1589, 0.1465, 0.1623, 0.1185, 0.1218, 0.1693, 0.1366, 0.1829, 0.1082, 0.1056, 0.1288, 0.1607, 0.1999, 0.0737, 0.2165, 0.1016, 0.1225, 0.0779, 0.0246, 0.1249, -0.0899, 0.0987, 0.0918, 0.0933, 0.0899, 0.0914, 0.1945, 0.1236, 0.1281, 0.1448, 0.1411, 0.1393, 0.0494, 0.1110, 0.1318, 0.1625, 0.1314, 0.1151, 0.1671, 0.0960, 0.0880, 0.0729, 0.1536, 0.1512, 0.1220, 0.1897, 0.1069, 0.1362, 0.1461, 0.0925, 0.1505, 0.1043, 0.1501, 0.1624, 0.2218, 0.1112, 0.1819, 0.0713, 0.1395, 0.0864, 0.1575, 0.1249, 0.1323, 0.2228, 0.2323, 0.1672, 0.1056, 0.1190, 0.1256, 0.0865, 0.1488, 0.1541, 0.1885, 0.1792, 0.1917, 0.1852, 0.1037, 0.0561, 0.1418, 0.1526, 0.1896, 0.2046, 0.2485, 0.1441, 0.1241, 0.1643, 0.2265, 0.0933, 0.1320, 0.0731, 0.1089, 0.1412, 0.1198, 0.1881, 0.1689, 0.2006, 0.0820, 0.1596, 0.0938, 0.1430, 0.1497, 0.1080, 0.0836, 0.1343, 0.1318, 0.1434, 0.1336, 0.1055, 0.1489, 0.1223, 0.1345, 0.1549, 0.1083, 0.1357, 0.1298, 0.0977, 0.1421, 0.1347, 0.2069, 0.1281, 0.1507, 0.1365, 0.1566, 0.1086, 0.0968, 0.1221, 0.1791, 0.0963, 0.1677, 0.1562, 0.0503, 0.1421, 0.3219, 0.1156, 0.1475, 0.0201, 0.1214, 0.1499, 0.1342, 0.1200, 0.1063, 0.1660, 0.1174, 0.1046, 0.1147, 0.1393, 0.1161, 0.1030, 0.1995, 0.0930, 0.1364, 0.2426, 0.0789, 0.1816, 0.0442, 0.1198, 0.1581, 0.0866, 0.1174, 0.0590, 0.1160, 0.1007, 0.1023, 0.3016, 0.0813, 0.0842, 0.1558, 0.1691, 0.1247, 0.0915, 0.1167, 0.1543, 0.1506, 0.0385, 0.1483, 0.0822, 0.1353, 0.2089, 0.1373, 0.1436, 0.1333, 0.1714, 0.2074, 0.1503, 0.1569, 0.1022, 0.1430, 0.1197, 0.1857, 0.1389, 0.1129, 0.1009, 0.0930, 0.0898, 0.1916, 0.2250, 0.0905, 0.1142, 0.1655, 0.1615, 0.0969, 0.1431, 0.1353, 0.2502, 0.1117, 0.1162, 0.1251, 0.1077, 0.1293, 0.0852, 0.1542, 0.2140, 0.1512, 0.1862, 0.1609, 0.1289, 0.1450, 0.2747, 0.1133, 0.1140, 0.1586, 0.0857, 0.2134, 0.1744, 0.0955, 0.2088, 0.1910, 0.2211, 0.2398, 0.1933, 0.1039, 0.0706, 0.1229, 0.1678, 0.1184, 0.1618, 0.1518, 0.1414, 0.1409, 0.1286, 0.0515, 0.1190, 0.1971, 0.1193, 0.0830, 0.1725], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn2.running_mean&#39;, tensor([-5.8521e-03, 9.6348e-03, 3.0617e-02, 7.3073e-03, 1.0962e-02, 2.7699e-02, 5.5408e-03, 9.0174e-03, -4.3931e-02, -2.5484e-02, 2.2786e-02, -8.4518e-04, -1.3091e-02, 1.3228e-02, -1.1151e-02, 2.5949e-02, -2.2199e-02, 2.0292e-02, -3.2611e-03, 7.6154e-03, 1.6202e-02, -6.1746e-03, -1.5837e-03, 1.8670e-02, -9.7514e-03, -3.4229e-02, -4.0840e-03, -2.2229e-02, -1.0592e-02, -4.4380e-02, -2.3691e-02, -5.0687e-03, 1.5150e-02, -3.2059e-02, -2.6579e-02, -2.9211e-02, 2.7578e-02, 1.4584e-02, -2.4983e-02, -2.2446e-02, -2.2641e-02, 1.3692e-02, 2.2382e-02, -1.3909e-02, 1.8122e-02, 1.1678e-02, -1.4459e-03, -1.0724e-02, -2.5747e-02, -6.5841e-03, 3.3353e-02, 1.7226e-02, 5.3515e-03, 8.5021e-03, -1.8229e-02, 1.3108e-02, 5.9849e-03, -1.9558e-02, -1.9823e-02, 9.2622e-03, 2.3420e-02, -6.5100e-03, -2.9807e-02, -3.3054e-03, 9.1063e-03, 2.6430e-04, -3.7384e-02, 2.6203e-02, 1.3736e-02, -9.6434e-03, 9.7380e-03, -1.6359e-02, 2.3960e-02, -2.8211e-02, -2.5795e-02, -1.0467e-02, -2.3806e-02, -1.8222e-02, -1.5272e-01, 6.5256e-03, -1.6317e-02, 1.4773e-02, 3.9091e-03, -9.4095e-02, 8.4634e-03, 4.0902e-02, -3.5468e-02, -3.3367e-02, 1.4265e-04, -3.0878e-03, -1.4218e-02, -3.0718e-02, 9.7508e-03, -1.9032e-02, 1.8206e-02, -7.8914e-03, 2.4143e-03, 2.9021e-02, -1.3614e-02, 2.6996e-02, -1.9930e-02, -5.2129e-03, -1.5193e-02, 1.5341e-02, 1.6423e-02, -2.6494e-02, 2.2058e-03, -3.8024e-02, 5.1101e-03, -1.2740e-02, 1.7544e-02, -1.2411e-02, -2.6347e-02, 3.5786e-02, 2.5587e-02, -2.4324e-02, 3.4589e-04, 2.2464e-02, -4.6729e-02, 1.5994e-03, 4.4740e-02, -2.9384e-02, 1.4146e-02, 1.6873e-02, -3.1743e-02, 1.4007e-02, -2.2204e-02, 4.7163e-03, 7.0491e-03, 8.8355e-03, 6.8794e-03, 2.3248e-02, -6.0166e-03, -1.5782e-02, 1.2648e-02, -7.5645e-03, 9.5377e-03, -2.0412e-02, 4.6219e-03, -5.9124e-03, -1.7246e-02, 3.2987e-03, 2.4318e-02, -8.0601e-04, 9.5488e-04, -9.1398e-03, 1.5842e-02, 4.3507e-03, -2.7726e-02, -1.6625e-02, 3.1506e-02, -1.3935e-03, -3.5454e-02, -1.2001e-02, -2.7454e-02, 5.0812e-03, 4.5932e-02, -2.9008e-02, -4.3883e-02, -1.3064e-03, 8.9772e-03, 7.0334e-03, 3.8154e-02, -9.7333e-03, -1.0287e-01, 2.3964e-02, 1.8958e-02, -4.0282e-02, -3.9173e-03, 1.8314e-03, -1.9758e-02, -1.4296e-02, -8.9278e-03, -3.8165e-02, 9.0996e-03, -1.9378e-02, 1.2010e-02, -3.5704e-02, 9.1867e-03, -1.6567e-02, -5.9608e-03, 4.4142e-03, 1.5959e-02, 9.9717e-03, 2.6048e-03, 1.9814e-02, -6.2488e-03, -9.7409e-03, 1.4475e-02, 2.5733e-02, 1.8687e-02, -4.3495e-03, -1.4131e-02, 3.2433e-02, 6.3358e-04, -6.4843e-03, -1.0296e-02, -1.9920e-02, 2.7500e-02, -2.1126e-03, 3.5437e-03, -8.8793e-03, -2.2605e-03, -1.5352e-02, -1.2352e-02, 2.3094e-02, 2.1615e-02, -2.0158e-02, -5.0720e-03, 1.9774e-02, 1.8410e-03, 1.3226e-02, 2.5092e-02, -1.4618e-02, -4.9631e-03, -3.1882e-02, 6.7664e-03, -8.7263e-03, -6.1420e-03, -1.8656e-02, 1.7941e-02, -3.5142e-02, -9.5489e-03, 7.0568e-03, 2.5424e-03, 1.4357e-02, -1.1500e-02, 1.1634e-02, -4.4935e-03, -1.4943e-03, 1.7591e-02, -3.7167e-02, -2.0804e-02, -7.0778e-03, 2.3279e-03, -2.5002e-02, -2.5491e-02, -9.5029e-03, 2.3692e-02, -2.1298e-02, -3.7717e-03, -3.9672e-02, -7.0181e-04, 5.4505e-03, -2.2033e-02, -2.6383e-02, -1.8228e-02, 1.2234e-02, 3.8210e-02, -2.4351e-02, -1.1068e-02, -2.6625e-02, -4.2810e-03, 1.1750e-02, -3.6088e-03, 1.3757e-02, 2.8660e-02, 4.0757e-04, 2.9932e-03, -4.8987e-03, 8.8406e-03, -6.4295e-03, -7.6512e-03, 9.0346e-03, -1.4871e-02, 1.4362e-02, -4.1316e-02, -3.0074e-02, 1.7480e-02, -1.6169e-02, -2.4061e-02, 3.1255e-02, -9.7959e-03, 9.0704e-03, 3.0101e-04, -6.3756e-03, -1.8731e-02, 8.5380e-03, 9.6441e-03, -3.1040e-02, -2.7253e-02, 5.7871e-03, -8.2530e-03, -4.1992e-02, -4.3116e-02, -3.6708e-02, -8.1154e-03, -1.3779e-03, -2.3177e-02, -1.5908e-02, 3.7164e-03, -1.4738e-02, 1.7888e-02, 2.9432e-02, -6.7413e-04, -2.5941e-02, -1.4325e-02, 1.0337e-02, -1.8136e-02, 1.3056e-02, -1.2876e-02, 1.4675e-02, -9.3161e-03, -1.3548e-02, -1.9617e-02, -2.5185e-02, -3.0672e-02, -1.0294e-03, -3.4345e-02, 5.7918e-03, -2.5263e-02, 9.3487e-03, 7.2496e-03, -9.0795e-03, 3.7070e-03, -1.8381e-02, -6.5655e-03, 2.7245e-02, -5.2240e-03, 9.0438e-03, 1.5575e-02, -1.3857e-02, -1.0740e-02, -2.1227e-02, 1.5118e-02, -1.3097e-03, 3.6149e-02, -2.1009e-02, 2.3866e-02, 2.3819e-02, -1.4650e-02, -1.4905e-02, -2.0538e-02, 1.2255e-02, 3.6705e-02, -1.1655e-02, 8.5360e-03, -1.2254e-02, 2.2685e-02, 3.9007e-04, 1.9164e-02, -2.8179e-02, 1.8088e-02, 2.5902e-02, 3.8224e-02, -3.1137e-02, -2.6023e-02, 1.1411e-02, -1.8774e-02, -1.2466e-02, -6.7567e-03, -2.8171e-02, 7.7154e-03, 2.1110e-02, -6.8128e-03, 1.3026e-03, 2.8367e-02, -4.9374e-02, 1.7810e-02, 1.1327e-02, -3.5363e-02, 5.7155e-03, -2.7093e-02, -3.3004e-02, 5.8488e-03, -1.1302e-02, 2.7215e-02, 2.9826e-02, 7.2721e-03, -3.1332e-03, 1.5148e-02, 4.2692e-03, -2.7299e-03, 1.2496e-02, 2.9577e-02, 2.4521e-02, -1.2744e-02, -1.8263e-03, 2.8252e-02, -2.4681e-02, 1.6237e-02, 1.4508e-02, 1.3868e-02, -2.1814e-02, 1.8422e-02, -9.2402e-03, 1.4014e-02, 2.9953e-03, -3.1534e-02, -5.1760e-03, -3.7679e-03, -3.1043e-02, -2.5220e-02, -1.6320e-02, 4.3500e-03, -4.3912e-02, -1.8938e-02, 6.7940e-03, -6.6280e-04, 1.3887e-02, -1.9514e-02, -9.2480e-03, 9.3032e-03, -6.8491e-02, 1.0298e-02, 4.9752e-02, -1.1188e-02, 2.2315e-02, -9.3353e-03, -1.9070e-02, 2.0902e-02, 1.7294e-02, 3.0296e-02, -8.0108e-03, 1.2121e-02, -1.2329e-02, -1.4140e-02, 1.3304e-02, 1.3757e-02, 1.1818e-02, -8.3519e-03, 2.5237e-02, 2.1438e-03, -7.5152e-02, -3.2221e-03, -8.1136e-03, 1.4020e-02, -6.4138e-03, 1.4042e-02, 1.9846e-03, -6.0453e-03, 8.3108e-03, -8.6300e-03, -1.7069e-02, -3.1558e-02, -9.0366e-03, -2.5946e-02, -7.8536e-03, -8.2008e-03, -1.2624e-02, -5.0786e-03, 2.5892e-02, 5.2895e-02, 9.7130e-04, -7.2071e-04, 7.0142e-02, 5.4170e-02, -1.0054e-02, 1.6709e-02, -3.9665e-03, -4.5196e-03, -6.8071e-03, -2.8457e-02, -8.1377e-03, -1.1122e-02, 1.5309e-02, 2.6004e-02, -5.0120e-02, 2.0807e-02, -3.0729e-03, -8.3568e-03, -2.1963e-02, -8.8967e-03, -4.9778e-02, 1.5523e-02, -7.1509e-03, 7.7082e-03, -9.2997e-03, 2.2383e-02, 2.0783e-02, 1.3829e-02, -6.1275e-03, -1.2453e-02, -2.7231e-03, -5.2413e-03, -1.8711e-02, -3.9055e-02, 5.7713e-03, -1.0055e-03, 9.5260e-06, 3.9063e-03, 2.3721e-02, -7.4454e-03, -1.2175e-04, -2.9447e-02, -1.8660e-03, -1.9269e-02, -9.5463e-03, -2.6216e-02, 1.6946e-03, -3.7964e-02, -3.2097e-02, -2.7250e-02, -2.2263e-02, -3.1038e-02, 1.0392e-02, 4.8362e-02, -8.1523e-03, -3.6719e-03, -1.9977e-02, -1.1807e-02, -1.9229e-02, 2.7521e-02, 1.2248e-02, 1.7685e-02, -2.2355e-03, 1.5004e-02, 2.2199e-02, -1.8182e-02, 3.4980e-03, -2.9893e-02, -2.3052e-02], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn2.running_var&#39;, tensor([0.0114, 0.0133, 0.0158, 0.0119, 0.0106, 0.0100, 0.0129, 0.0092, 0.0112, 0.0079, 0.0113, 0.0090, 0.0146, 0.0115, 0.0082, 0.0112, 0.0066, 0.0090, 0.0115, 0.0137, 0.0071, 0.0083, 0.0118, 0.0087, 0.0111, 0.0100, 0.0108, 0.0111, 0.0082, 0.0152, 0.0094, 0.0118, 0.0081, 0.0090, 0.0091, 0.0081, 0.0119, 0.0110, 0.0126, 0.0074, 0.0085, 0.0130, 0.0125, 0.0088, 0.0135, 0.0110, 0.0148, 0.0073, 0.0100, 0.0118, 0.0107, 0.0098, 0.0095, 0.0132, 0.0125, 0.0135, 0.0103, 0.0079, 0.0111, 0.0116, 0.0112, 0.0150, 0.0083, 0.0095, 0.0098, 0.0101, 0.0084, 0.0124, 0.0070, 0.0133, 0.0108, 0.0081, 0.0126, 0.0087, 0.0092, 0.0085, 0.0105, 0.0087, 0.0183, 0.0092, 0.0093, 0.0125, 0.0102, 0.0111, 0.0126, 0.0145, 0.0098, 0.0104, 0.0082, 0.0117, 0.0141, 0.0085, 0.0064, 0.0083, 0.0104, 0.0124, 0.0130, 0.0110, 0.0087, 0.0096, 0.0072, 0.0099, 0.0103, 0.0137, 0.0072, 0.0099, 0.0148, 0.0110, 0.0075, 0.0102, 0.0136, 0.0101, 0.0105, 0.0097, 0.0129, 0.0089, 0.0102, 0.0132, 0.0081, 0.0091, 0.0104, 0.0081, 0.0152, 0.0115, 0.0096, 0.0108, 0.0103, 0.0087, 0.0181, 0.0119, 0.0119, 0.0132, 0.0098, 0.0104, 0.0116, 0.0113, 0.0075, 0.0093, 0.0089, 0.0093, 0.0086, 0.0115, 0.0161, 0.0103, 0.0081, 0.0130, 0.0111, 0.0147, 0.0106, 0.0086, 0.0121, 0.0090, 0.0081, 0.0068, 0.0099, 0.0099, 0.0122, 0.0099, 0.0063, 0.0079, 0.0073, 0.0093, 0.0124, 0.0111, 0.0136, 0.0120, 0.0084, 0.0064, 0.0095, 0.0132, 0.0108, 0.0103, 0.0111, 0.0084, 0.0095, 0.0095, 0.0087, 0.0091, 0.0110, 0.0093, 0.0092, 0.0128, 0.0091, 0.0082, 0.0134, 0.0122, 0.0097, 0.0082, 0.0141, 0.0102, 0.0082, 0.0147, 0.0095, 0.0143, 0.0097, 0.0066, 0.0107, 0.0086, 0.0133, 0.0109, 0.0098, 0.0105, 0.0102, 0.0090, 0.0105, 0.0091, 0.0109, 0.0090, 0.0108, 0.0109, 0.0106, 0.0085, 0.0146, 0.0087, 0.0088, 0.0093, 0.0099, 0.0093, 0.0099, 0.0127, 0.0119, 0.0074, 0.0132, 0.0141, 0.0088, 0.0132, 0.0128, 0.0110, 0.0091, 0.0150, 0.0147, 0.0098, 0.0141, 0.0098, 0.0131, 0.0095, 0.0089, 0.0134, 0.0144, 0.0104, 0.0070, 0.0096, 0.0080, 0.0091, 0.0074, 0.0097, 0.0103, 0.0114, 0.0113, 0.0100, 0.0080, 0.0082, 0.0099, 0.0125, 0.0114, 0.0113, 0.0126, 0.0097, 0.0120, 0.0092, 0.0168, 0.0121, 0.0100, 0.0115, 0.0080, 0.0103, 0.0113, 0.0076, 0.0111, 0.0109, 0.0086, 0.0112, 0.0087, 0.0070, 0.0094, 0.0113, 0.0090, 0.0124, 0.0171, 0.0120, 0.0085, 0.0099, 0.0072, 0.0091, 0.0098, 0.0099, 0.0114, 0.0105, 0.0091, 0.0078, 0.0094, 0.0077, 0.0094, 0.0113, 0.0143, 0.0131, 0.0127, 0.0121, 0.0075, 0.0103, 0.0099, 0.0095, 0.0073, 0.0088, 0.0113, 0.0075, 0.0104, 0.0097, 0.0109, 0.0070, 0.0091, 0.0103, 0.0118, 0.0077, 0.0117, 0.0111, 0.0084, 0.0148, 0.0124, 0.0088, 0.0105, 0.0107, 0.0092, 0.0086, 0.0100, 0.0119, 0.0096, 0.0077, 0.0139, 0.0085, 0.0093, 0.0115, 0.0076, 0.0094, 0.0132, 0.0119, 0.0164, 0.0097, 0.0130, 0.0087, 0.0180, 0.0089, 0.0133, 0.0112, 0.0101, 0.0086, 0.0097, 0.0094, 0.0087, 0.0080, 0.0086, 0.0092, 0.0079, 0.0103, 0.0104, 0.0095, 0.0129, 0.0109, 0.0161, 0.0111, 0.0100, 0.0071, 0.0105, 0.0069, 0.0129, 0.0076, 0.0147, 0.0151, 0.0099, 0.0114, 0.0187, 0.0087, 0.0076, 0.0080, 0.0091, 0.0126, 0.0132, 0.0117, 0.0126, 0.0095, 0.0110, 0.0097, 0.0143, 0.0094, 0.0108, 0.0098, 0.0097, 0.0132, 0.0094, 0.0137, 0.0096, 0.0108, 0.0094, 0.0093, 0.0106, 0.0150, 0.0091, 0.0082, 0.0138, 0.0144, 0.0088, 0.0080, 0.0114, 0.0111, 0.0094, 0.0127, 0.0140, 0.0070, 0.0086, 0.0086, 0.0071, 0.0108, 0.0163, 0.0076, 0.0086, 0.0117, 0.0089, 0.0076, 0.0129, 0.0087, 0.0097, 0.0169, 0.0100, 0.0114, 0.0122, 0.0102, 0.0102, 0.0094, 0.0116, 0.0086, 0.0082, 0.0085, 0.0090, 0.0080, 0.0090, 0.0082, 0.0089, 0.0110, 0.0116, 0.0082, 0.0096, 0.0105, 0.0165, 0.0165, 0.0092, 0.0112, 0.0139, 0.0074, 0.0113, 0.0098, 0.0111, 0.0129, 0.0083, 0.0066, 0.0080, 0.0098, 0.0118, 0.0081, 0.0153, 0.0075, 0.0091, 0.0096, 0.0119, 0.0089, 0.0109, 0.0090, 0.0063, 0.0092, 0.0128, 0.0096, 0.0137, 0.0094, 0.0107, 0.0105, 0.0113, 0.0079, 0.0083, 0.0096, 0.0096, 0.0099, 0.0094, 0.0087, 0.0088, 0.0099, 0.0089, 0.0120, 0.0107, 0.0109, 0.0145, 0.0114, 0.0068, 0.0087, 0.0086, 0.0085, 0.0104, 0.0106, 0.0150, 0.0089, 0.0100, 0.0100, 0.0087, 0.0139, 0.0121, 0.0126, 0.0073, 0.0089, 0.0075, 0.0182, 0.0108, 0.0111, 0.0125, 0.0079], device=&#39;cuda:0&#39;)), (&#39;0.7.2.bn2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;1.2.weight&#39;, tensor([1.0215, 1.0055, 0.9984, ..., 0.9579, 0.9805, 1.0274], device=&#39;cuda:0&#39;)), (&#39;1.2.bias&#39;, tensor([ 0.0316, -0.0031, 0.0296, ..., -0.0146, -0.0074, -0.0213], device=&#39;cuda:0&#39;)), (&#39;1.2.running_mean&#39;, tensor([3.5660, 4.0897, 4.3550, ..., 0.8898, 0.8188, 0.9386], device=&#39;cuda:0&#39;)), (&#39;1.2.running_var&#39;, tensor([ 8.3042, 11.0247, 12.0068, ..., 0.7641, 0.7902, 0.6357], device=&#39;cuda:0&#39;)), (&#39;1.2.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;1.4.weight&#39;, tensor([[ 0.0944, -0.0085, -0.0636, ..., 0.0548, -0.0333, 0.0420], [-0.0582, -0.0024, -0.0313, ..., 0.0398, -0.1319, 0.1026], [ 0.0340, -0.0083, 0.0084, ..., 0.0391, 0.0119, 0.0471], ..., [-0.0239, -0.0172, -0.1243, ..., -0.0590, 0.0011, 0.0237], [ 0.0188, -0.0385, 0.0024, ..., 0.0296, 0.0069, 0.0244], [ 0.1146, 0.0065, -0.0571, ..., -0.0262, -0.0283, 0.0814]], device=&#39;cuda:0&#39;)), (&#39;1.6.weight&#39;, tensor([1.0005, 0.9843, 1.0106, 1.0103, 0.9854, 1.0235, 1.0128, 1.0069, 1.0035, 1.0015, 1.0087, 1.0040, 0.9864, 1.0209, 1.0259, 1.0089, 0.9841, 1.0073, 0.9805, 0.9889, 1.0039, 0.9920, 1.0017, 1.0148, 1.0075, 1.0217, 0.9849, 0.9868, 1.0033, 0.9977, 0.9707, 0.9848, 0.9988, 1.0159, 1.0051, 0.9752, 1.0270, 1.0155, 1.0029, 0.9698, 1.0110, 0.9921, 1.0131, 0.9908, 1.0139, 0.9914, 0.9738, 0.9698, 0.9809, 1.0115, 1.0282, 1.0120, 0.9778, 0.9917, 0.9763, 1.0155, 0.9894, 1.0092, 1.0372, 1.0040, 0.9888, 1.0106, 0.9857, 0.9980, 1.0138, 1.0049, 1.0244, 0.9803, 0.9920, 1.0260, 1.0208, 1.0170, 1.0199, 1.0109, 1.0608, 0.9977, 0.9890, 1.0162, 1.0062, 1.0147, 1.0020, 1.0219, 0.9854, 0.9881, 0.9967, 1.0258, 1.0011, 0.9993, 0.9967, 1.0154, 0.9801, 1.0111, 1.0005, 1.0263, 1.0233, 1.0117, 1.0074, 1.0084, 0.9978, 0.9970, 1.0179, 0.9984, 0.9987, 1.0003, 1.0134, 1.0063, 1.0183, 0.9895, 1.0132, 0.9977, 0.9907, 0.9758, 0.9983, 1.0033, 1.0159, 1.0002, 1.0140, 1.0344, 1.0094, 1.0061, 1.0129, 0.9742, 0.9983, 1.0222, 0.9623, 0.9888, 1.0126, 0.9887, 1.0358, 0.9703, 0.9983, 0.9492, 0.9958, 1.0078, 1.0175, 0.9820, 0.9892, 0.9939, 0.9835, 1.0030, 0.9745, 0.9855, 1.0140, 1.0517, 1.0070, 1.0203, 0.9908, 1.0062, 0.9906, 1.0097, 0.9843, 1.0193, 0.9857, 0.9735, 0.9882, 1.0094, 0.9889, 1.0163, 0.9932, 0.9701, 1.0070, 0.9793, 0.9954, 0.9624, 0.9729, 1.0004, 0.9928, 0.9811, 0.9999, 0.9831, 1.0366, 0.9782, 0.9696, 1.0003, 1.0039, 1.0073, 1.0140, 1.0140, 1.0367, 0.9836, 0.9948, 0.9944, 0.9847, 0.9916, 1.0023, 1.0224, 1.0339, 1.0056, 0.9810, 1.0085, 1.0048, 0.9929, 0.9768, 1.0099, 1.0183, 1.0088, 1.0080, 0.9801, 1.0076, 1.0109, 1.0020, 1.0207, 1.0111, 1.0241, 1.0120, 0.9787, 1.0018, 0.9957, 1.0273, 0.9858, 0.9780, 1.0032, 1.0079, 0.9817, 1.0205, 1.0359, 1.0035, 1.0133, 1.0130, 1.0061, 1.0048, 0.9882, 1.0220, 0.9722, 0.9769, 1.0100, 1.0487, 1.0291, 0.9996, 0.9757, 1.0107, 1.0077, 1.0002, 0.9989, 1.0095, 1.0349, 0.9976, 1.0293, 0.9949, 0.9879, 1.0043, 1.0350, 1.0091, 0.9631, 0.9964, 0.9950, 1.0270, 1.0087, 1.0157, 0.9887, 1.0395, 1.0338, 1.0077, 1.0372, 1.0062, 0.9882, 1.0096, 0.9566, 1.0283, 1.0195, 0.9685, 1.0131, 1.0010, 0.9919, 0.9800, 0.9889, 1.0297, 0.9855, 1.0207, 0.9785, 1.0014, 1.0307, 0.9886, 1.0074, 1.0028, 1.0162, 0.9915, 0.9869, 1.0109, 1.0078, 0.9996, 1.0142, 1.0053, 0.9996, 1.0268, 0.9906, 0.9933, 0.9782, 0.9729, 1.0058, 1.0284, 0.9852, 1.0111, 0.9852, 0.9818, 0.9936, 0.9729, 0.9970, 0.9962, 0.9942, 0.9864, 0.9905, 1.0265, 0.9957, 1.0081, 0.9900, 0.9982, 0.9940, 0.9945, 0.9931, 0.9590, 1.0224, 1.0163, 0.9999, 0.9880, 0.9866, 1.0000, 1.0140, 1.0078, 0.9968, 1.0335, 1.0018, 1.0063, 1.0040, 0.9972, 1.0174, 1.0011, 1.0044, 1.0144, 1.0038, 0.9852, 0.9934, 1.0213, 1.0230, 0.9804, 1.0023, 0.9762, 0.9870, 0.9701, 1.0245, 0.9927, 1.0059, 1.0077, 1.0185, 0.9779, 1.0077, 0.9881, 1.0291, 0.9719, 1.0190, 1.0005, 0.9885, 0.9690, 1.0324, 1.0483, 0.9601, 0.9720, 1.0001, 0.9794, 0.9829, 1.0119, 0.9853, 1.0156, 1.0116, 0.9944, 1.0010, 0.9967, 0.9896, 0.9975, 1.0155, 1.0219, 0.9792, 0.9927, 0.9963, 0.9815, 1.0070, 1.0303, 0.9942, 0.9949, 0.9858, 1.0178, 1.0079, 0.9907, 1.0371, 0.9913, 1.0143, 1.0025, 0.9952, 0.9895, 1.0014, 1.0020, 1.0117, 0.9885, 0.9875, 1.0162, 1.0079, 0.9974, 0.9837, 0.9972, 0.9812, 0.9890, 0.9763, 1.0149, 0.9932, 0.9768, 0.9873, 0.9880, 1.0331, 0.9878, 0.9882, 0.9933, 0.9655, 1.0175, 0.9831, 0.9655, 1.0020, 0.9836, 1.0072, 1.0142, 1.0451, 1.0286, 1.0267, 1.0273, 0.9908, 0.9945, 0.9846, 1.0105, 0.9822, 1.0058, 1.0066, 1.0036, 1.0106, 1.0152, 0.9654, 0.9903, 1.0073, 0.9733, 0.9944, 1.0160, 1.0171, 0.9796, 1.0119, 0.9919, 1.0037, 0.9913, 0.9514, 1.0270, 0.9739, 1.0312, 0.9902, 1.0030, 0.9854, 0.9647, 0.9844, 1.0211, 0.9901, 0.9900, 1.0070, 1.0092, 0.9983, 1.0036, 0.9969, 0.9990, 0.9770, 1.0246, 0.9980, 0.9848, 1.0486, 1.0057, 1.0020, 0.9969, 1.0051, 1.0065, 0.9789, 0.9878, 1.0248, 0.9837, 1.0370, 1.0231, 0.9955, 1.0271, 1.0116, 0.9653, 0.9789, 1.0328, 0.9924, 1.0278, 1.0201, 1.0120, 1.0057, 1.0096, 0.9929, 1.0098, 0.9875, 0.9758, 0.9953, 1.0025, 0.9881, 1.0256, 0.9868, 0.9639, 1.0130, 1.0148, 1.0018, 1.0075, 0.9877, 1.0133, 1.0116, 0.9753, 0.9809, 1.0091, 1.0157], device=&#39;cuda:0&#39;)), (&#39;1.6.bias&#39;, tensor([ 2.0703e-03, -2.2835e-02, -1.3097e-02, 1.2575e-02, 1.0303e-02, -1.0067e-02, -1.1933e-02, 3.6446e-02, 1.2999e-02, -2.6573e-02, 5.5110e-03, -1.8037e-02, -3.7512e-02, 8.6569e-03, 2.0019e-02, 1.5078e-02, 1.6520e-03, 1.0534e-02, 1.0527e-03, -2.3150e-03, 8.8163e-03, 1.5112e-02, 2.2230e-02, -3.4217e-02, -8.8076e-03, 1.3791e-03, -2.6171e-03, -1.2298e-02, -3.2494e-03, 2.6966e-02, 4.4581e-03, -1.2349e-02, -5.4190e-03, -1.4183e-02, -1.5602e-03, 6.8375e-03, 1.3792e-02, -2.2463e-02, -1.2593e-02, -1.2058e-02, 8.2455e-03, -2.9882e-02, 8.6355e-04, 1.3068e-02, -4.0217e-04, -3.0169e-02, 6.2971e-03, 1.0514e-02, 2.0027e-02, -1.5931e-02, -1.6486e-02, -4.5003e-03, 8.4312e-03, 1.1578e-02, 4.2170e-03, 1.9031e-02, 1.1007e-02, 5.6969e-03, -2.1077e-02, 6.2421e-03, -1.2710e-02, -2.1827e-02, -1.5572e-02, -1.1476e-02, 6.8795e-03, -9.7045e-04, 1.5806e-02, 2.1180e-02, 1.3268e-02, 2.3399e-02, 3.6419e-03, 6.8349e-03, 1.1832e-02, 2.8606e-02, -3.1497e-03, -2.2351e-02, 1.8189e-02, -1.1515e-02, 3.3960e-03, -1.2448e-02, 1.0807e-02, -2.2672e-03, 3.3745e-02, 1.9474e-02, 4.9488e-03, -1.0196e-02, 1.0970e-02, 9.1846e-03, -2.1814e-02, -1.4816e-03, 8.8963e-03, 1.3720e-02, -1.4721e-02, -2.9269e-02, -1.3419e-02, 1.8865e-02, 1.5117e-02, 7.8896e-03, -5.0768e-04, -2.5503e-02, -2.5578e-02, -8.3944e-03, -7.9286e-03, 4.7188e-03, -2.4132e-02, -8.7484e-03, -1.0921e-02, -4.7795e-03, -4.5651e-04, 5.3904e-03, 1.1775e-02, -1.0253e-02, -1.6199e-02, -9.8294e-03, 6.8051e-03, 3.5452e-03, 5.3861e-04, -2.9219e-02, -2.3722e-02, 2.7620e-04, 1.7295e-02, 7.6463e-03, -7.5182e-03, 4.3635e-03, 2.7956e-02, -1.5970e-02, -2.2583e-02, -1.1822e-02, 5.1131e-03, 1.9607e-02, -8.5318e-03, -3.9837e-03, -2.5715e-02, 6.8773e-03, 2.1223e-02, -2.7383e-02, 2.5480e-02, 2.2089e-02, 2.2335e-03, 3.3977e-02, 1.0937e-02, 1.6910e-02, 7.5451e-03, -1.3545e-03, -1.9341e-02, -1.0322e-02, -1.3009e-02, 1.3853e-02, -4.6948e-03, 4.1829e-03, -3.3490e-03, 6.1434e-03, 5.9330e-04, 4.2147e-02, 2.0359e-02, -4.2271e-03, 1.7867e-02, -2.9044e-02, -1.1524e-02, -6.6111e-04, 4.1591e-03, -1.4901e-02, 2.7929e-02, 1.3035e-02, -1.0554e-02, 9.7640e-04, -6.6455e-03, 2.5211e-02, -2.3152e-02, -2.7574e-02, -1.6508e-02, -1.1627e-02, 1.5952e-02, -6.3315e-03, 1.8801e-02, -2.5943e-03, 5.5626e-03, -4.4757e-02, 5.3868e-03, 2.4896e-02, -3.3312e-03, 1.8393e-02, 7.9000e-03, 1.2167e-02, 2.6856e-04, 2.6929e-02, -1.3871e-02, 2.1529e-02, -2.1136e-02, -1.1173e-02, -1.5763e-02, -1.0481e-02, 8.3441e-03, 7.3003e-03, 9.5989e-03, 2.3684e-02, -7.7632e-03, -4.6875e-03, -1.2277e-02, 4.6855e-03, -4.2929e-03, 4.2058e-02, 2.4804e-03, 1.3342e-02, -1.8206e-02, 8.1135e-03, -1.6565e-02, -1.1505e-02, -5.1461e-03, 2.3209e-02, -2.4173e-03, 1.0709e-02, -1.9045e-03, -2.8546e-02, 5.7498e-03, 3.7891e-03, -3.3935e-03, 8.4130e-03, 2.7909e-02, -7.6508e-03, -1.9605e-02, -3.3374e-02, 1.0462e-02, -1.5776e-02, 3.9975e-02, 3.9152e-04, -3.3808e-02, 2.1572e-02, -2.6531e-02, 7.6048e-03, 3.0839e-04, -5.8917e-03, -7.1931e-03, -1.0263e-03, -2.5941e-03, 2.1329e-02, 2.0675e-02, 7.7582e-03, -7.9507e-03, 4.0634e-02, 1.4701e-02, 7.0532e-03, 1.9280e-02, -6.3568e-04, -9.8629e-04, -6.7637e-03, -2.0533e-02, 1.6045e-02, -1.1148e-02, 1.4127e-02, 2.6566e-02, -1.3160e-02, -1.9627e-02, -2.5695e-02, 6.3800e-03, 8.6935e-03, -4.7891e-03, 2.6861e-02, -1.1347e-02, 8.4794e-03, -3.2630e-03, 2.4102e-02, -1.6371e-02, 1.2293e-02, 1.4114e-02, 3.0305e-02, 7.2681e-03, 6.0416e-03, -1.6989e-02, -2.8206e-02, -3.5164e-03, -2.5213e-03, 1.6721e-02, -1.1956e-03, 5.5764e-03, -1.0434e-02, 2.3977e-02, 1.4661e-02, -8.8747e-03, 1.5302e-02, 2.0433e-02, 3.1543e-02, -1.2892e-02, 4.5687e-03, -8.6081e-03, 1.1256e-02, -1.9183e-02, 2.9651e-02, -9.4876e-03, 1.2512e-02, 1.9677e-02, -2.2618e-03, -1.7549e-03, -2.7132e-02, -4.9355e-05, 2.3428e-02, -9.1199e-03, -4.7834e-03, 1.4976e-02, -4.3011e-03, -5.5650e-03, 4.9221e-03, -2.0212e-02, 3.0161e-03, -1.1236e-02, -7.6166e-03, 4.8157e-02, 5.2134e-04, -3.9636e-03, -1.3147e-02, -1.2872e-04, 2.9360e-02, 4.7683e-03, -2.0201e-02, -9.8648e-03, 2.2738e-02, 1.7964e-02, 1.4265e-02, 1.2990e-02, -5.2631e-03, -9.9368e-03, 3.4026e-02, -2.0215e-02, -2.2749e-04, 2.8589e-02, 4.1566e-03, -2.0426e-02, -2.3692e-02, -1.5484e-02, 2.7252e-02, 5.2209e-03, 2.0292e-02, 1.3899e-02, -1.7591e-02, 7.0835e-03, 1.1920e-02, 1.7428e-02, -1.0320e-02, -1.5514e-04, 7.8861e-03, -1.4415e-02, -1.4079e-02, 2.5479e-02, -2.3823e-02, -1.0720e-03, -2.1722e-02, -4.7616e-03, 2.4462e-02, 9.3359e-03, -1.7881e-02, 1.2571e-02, 4.5217e-03, 1.5586e-02, -6.3942e-04, -1.3872e-02, 2.0798e-02, 1.9672e-02, 1.1227e-02, 2.6672e-02, 1.6960e-02, -1.0349e-02, -4.1910e-04, 8.9422e-03, -1.2420e-02, -5.4702e-03, 1.2693e-02, 1.7049e-03, -2.3698e-02, -2.6858e-02, 1.0333e-02, -1.4208e-02, -4.1629e-03, -2.5819e-02, 8.1396e-03, 4.8340e-03, 2.2648e-02, -7.7508e-03, -5.2562e-03, 2.1111e-02, 2.1079e-02, -2.3727e-02, 8.7919e-03, -3.9042e-02, 9.9177e-03, 6.4315e-03, 1.4633e-02, 3.7276e-04, 3.1839e-02, 2.6246e-02, -1.0056e-02, -1.2656e-04, 1.6188e-03, -6.7570e-03, -2.0731e-02, -2.2738e-02, -8.7249e-03, 2.0463e-02, -1.3494e-02, 5.5169e-03, 3.2750e-03, -2.2839e-02, -1.7781e-04, -1.4132e-02, -2.3581e-04, 6.9747e-03, -6.4007e-03, -1.3092e-02, -2.8442e-03, -1.8961e-03, -2.0879e-02, 8.7147e-03, -8.4188e-03, 2.4236e-02, -1.1806e-02, 6.9072e-03, 2.8756e-02, 2.3340e-02, -4.1067e-03, -2.6773e-02, 1.8215e-02, 1.9075e-02, 2.5152e-02, -1.1869e-02, 2.1680e-02, 1.7380e-02, -1.5249e-02, -9.2813e-03, 2.6282e-02, -2.7286e-02, 1.3686e-02, 6.4759e-03, 1.7364e-02, -1.3835e-02, -1.4159e-02, -1.3503e-02, 6.7401e-03, 5.9356e-03, 1.2305e-02, -1.3306e-02, 1.7391e-02, -2.0455e-02, 2.6781e-02, 1.4751e-02, -6.9759e-03, -1.5498e-02, 5.4223e-03, -1.3189e-02, 8.6685e-03, 4.7189e-03, 5.4478e-03, 5.8932e-04, 4.2138e-03, 1.2199e-03, -6.1475e-03, 5.9242e-03, 1.6137e-02, 2.1013e-02, -2.0766e-02, -3.2514e-02, -1.9074e-02, -1.3649e-02, 1.0573e-02, 9.1399e-03, 1.9145e-02, -9.0746e-03, -5.1671e-03, 1.9782e-02, -4.8144e-03, 4.7515e-03, 4.6129e-03, -2.9328e-04, 2.8520e-02, 1.6283e-02, -1.4670e-05, 8.7458e-03, -1.2880e-02, -4.7788e-03, -6.7048e-03, -7.5585e-03, 5.1153e-03, 3.5998e-02, -3.2633e-03, 3.0065e-02, -2.4582e-03, 1.7194e-02, -4.6021e-03, 1.1220e-02, -1.6789e-03, -1.8314e-02, -1.7792e-02, -1.3723e-02, -2.2714e-02, 9.5210e-03, 8.9129e-03, 2.4157e-02, -1.0534e-02, -6.2427e-03, -9.1914e-04, 6.2195e-03, 2.3524e-03, -1.0997e-02, 8.5212e-03, -2.9967e-03, 6.7414e-03, -9.2544e-03, 7.3196e-03, 4.2356e-02, 1.4837e-02, 5.8209e-03, -1.1223e-02, -6.4712e-03, 9.3759e-03], device=&#39;cuda:0&#39;)), (&#39;1.6.running_mean&#39;, tensor([1.0079, 0.8736, 1.0566, 0.8972, 0.8529, 0.8533, 0.9753, 0.8015, 0.8330, 0.9070, 0.9343, 1.0080, 0.8709, 0.9981, 0.8731, 1.1132, 0.8142, 0.9287, 0.9381, 0.8900, 0.9303, 0.8928, 1.0049, 0.8963, 1.0629, 1.2231, 0.9217, 0.8657, 1.0070, 0.8715, 0.9808, 1.0246, 0.9200, 0.9181, 0.9465, 0.8986, 1.0188, 0.9592, 0.9053, 0.9073, 0.8467, 0.9278, 0.8526, 0.8677, 1.0539, 0.8482, 0.8832, 0.9279, 0.9735, 0.9076, 0.8483, 0.9783, 0.9059, 0.9542, 0.8518, 1.0233, 1.0015, 0.8763, 0.9728, 0.8911, 0.8687, 0.8714, 0.9386, 0.9362, 0.9847, 0.9452, 0.9924, 0.8750, 0.8855, 0.9762, 0.9945, 0.8896, 0.9620, 0.9649, 1.0437, 0.9712, 0.9005, 0.9285, 1.0008, 1.0158, 0.8627, 0.9574, 0.9836, 0.9904, 0.8908, 1.0424, 0.9387, 0.9158, 1.0368, 0.8682, 0.8086, 0.9405, 0.8231, 1.0300, 0.9538, 0.9177, 0.8779, 0.9221, 0.8095, 0.8770, 0.9923, 0.9321, 0.9026, 0.9118, 0.9599, 0.8397, 0.9348, 0.9492, 0.9320, 0.8330, 0.9672, 0.8071, 0.9041, 0.9372, 0.9195, 0.9032, 0.8623, 1.0722, 0.8885, 0.8581, 0.8988, 0.8606, 0.9544, 1.0126, 0.9021, 0.8538, 0.9533, 0.9975, 0.9652, 0.9231, 1.0140, 0.9202, 0.8489, 0.9332, 0.9762, 0.9164, 0.7952, 0.9104, 0.8768, 0.9563, 0.8906, 0.9052, 0.9192, 1.0367, 0.8931, 0.9416, 0.8812, 1.0139, 0.9091, 0.7988, 0.8829, 0.8628, 0.9110, 0.9921, 0.9156, 0.8375, 0.7900, 0.8536, 0.9432, 1.0629, 0.9259, 0.8963, 0.8254, 0.8721, 0.8902, 1.0015, 0.8225, 0.9950, 0.8562, 0.9131, 1.0204, 0.8798, 0.9535, 0.9033, 0.9372, 0.9829, 1.1190, 0.9541, 1.0214, 1.0033, 0.9318, 0.8686, 0.8914, 0.8425, 0.9758, 1.1347, 0.9420, 0.9814, 0.9262, 0.8778, 0.8819, 0.9959, 0.8192, 0.8940, 0.8391, 0.9110, 0.9695, 1.0464, 0.9621, 0.8498, 0.8864, 0.9592, 1.0007, 0.8612, 0.9703, 0.9515, 0.9721, 0.8210, 1.0473, 1.0058, 0.8774, 0.9815, 0.8393, 0.8369, 0.9528, 0.8843, 1.0683, 0.9295, 0.9632, 0.9409, 0.9963, 1.0102, 0.9100, 0.8868, 0.7870, 0.9332, 1.0445, 0.9328, 0.8642, 1.0003, 0.9267, 0.9032, 0.9311, 0.9355, 1.0718, 0.9889, 0.8606, 0.9333, 0.9672, 0.9680, 0.8498, 0.9339, 1.0677, 0.8583, 0.8898, 0.9387, 0.8996, 0.8680, 0.8359, 0.9161, 1.0710, 1.0721, 0.9152, 0.9767, 1.0049, 0.7955, 0.8608, 0.8816, 1.0288, 0.8224, 0.8563, 0.8454, 0.8974, 0.9043, 0.9459, 1.1246, 0.9341, 0.9384, 0.8538, 0.8573, 0.8446, 0.9465, 0.9065, 0.9551, 0.8454, 0.9812, 0.9040, 0.9241, 0.9904, 0.9401, 0.9197, 1.0593, 1.0707, 0.9224, 0.9367, 0.9899, 0.9353, 0.8345, 0.7902, 0.9889, 0.8549, 0.7950, 0.9352, 0.9435, 0.9636, 0.9064, 0.7717, 0.8006, 0.8010, 0.8891, 0.8494, 0.8821, 0.9769, 0.9864, 0.8784, 0.9393, 1.0157, 0.9692, 0.8971, 0.8848, 0.8838, 0.8792, 0.9348, 0.9838, 0.9060, 0.7762, 0.9784, 0.9909, 0.9809, 0.9512, 0.9311, 1.0065, 0.9674, 0.9082, 0.8876, 0.9976, 0.9144, 0.9370, 1.0372, 0.8570, 0.9253, 0.7847, 0.8802, 0.9135, 1.0211, 0.9195, 0.8391, 0.8676, 0.8498, 1.0138, 1.0323, 0.8836, 0.9569, 0.9634, 0.8155, 0.9366, 0.7852, 1.0076, 0.8456, 0.9210, 0.9305, 0.9324, 0.8143, 0.9859, 0.8761, 0.8718, 0.8602, 0.8261, 0.9897, 0.8754, 0.9896, 0.8781, 0.8561, 0.9230, 0.9021, 1.0533, 0.8026, 0.9347, 0.8530, 0.9416, 1.0151, 0.6890, 0.8131, 0.9592, 0.8444, 0.9204, 0.9316, 0.9474, 0.8758, 0.9309, 0.9085, 0.8971, 0.8741, 0.9577, 0.9530, 1.0272, 0.9247, 0.8239, 0.8649, 0.8439, 0.8878, 1.0133, 0.9035, 0.8964, 0.9247, 0.9629, 0.8435, 0.9574, 0.9142, 0.9101, 0.8844, 0.8893, 0.9158, 0.7934, 0.9860, 0.9109, 1.0098, 0.9821, 0.9991, 0.8468, 0.8909, 0.8600, 0.9258, 0.8877, 0.9214, 1.0091, 0.8286, 0.9118, 0.8603, 0.9306, 0.9343, 1.0178, 0.9393, 0.9730, 0.9393, 0.8249, 0.8858, 0.8968, 0.9246, 1.0737, 0.9436, 0.9766, 0.9732, 0.8414, 0.9012, 0.8976, 0.9441, 0.8521, 0.9761, 0.8843, 0.9425, 0.8036, 0.8916, 0.9270, 1.0379, 0.7954, 0.9651, 0.8482, 1.0926, 0.8783, 0.8787, 0.9141, 0.8782, 0.9648, 0.8630, 0.9841, 0.8301, 0.9857, 0.8745, 0.8616, 0.8759, 0.8496, 0.8422, 0.9041, 0.9181, 0.9438, 0.8442, 1.0696, 0.8917, 0.8369, 0.9649, 0.8265, 0.8997, 0.9268, 0.9053, 0.8122, 0.8517, 1.0049, 1.1093, 0.8482, 1.0812, 0.9538, 0.9098, 0.9217, 0.9801, 0.9440, 0.9915, 0.9743, 0.9562, 0.9251, 1.0303, 0.8887, 0.8598, 0.9070, 0.9055, 0.9280, 0.8574, 0.9133, 0.9840, 0.9381, 0.8948, 0.9806, 0.8656, 1.0245, 1.0277, 0.7417, 1.0693, 0.9925, 0.9529, 0.9471, 0.9984, 0.8972], device=&#39;cuda:0&#39;)), (&#39;1.6.running_var&#39;, tensor([2.2908, 1.7828, 2.5061, 1.9875, 1.6931, 1.6828, 2.2152, 1.4344, 1.7771, 2.0377, 1.9427, 2.0892, 1.6911, 2.2220, 1.7201, 2.7316, 1.6062, 2.2982, 1.9092, 1.6754, 2.0979, 1.6960, 1.9625, 1.7226, 2.4607, 3.1125, 1.9499, 1.8584, 2.2355, 1.6476, 2.0617, 2.1341, 1.8609, 2.0595, 2.1986, 2.0635, 2.7742, 2.1563, 1.6692, 1.5809, 2.0102, 2.0421, 1.6685, 1.7754, 2.6735, 1.5042, 2.0032, 1.7795, 2.1434, 1.8394, 1.6851, 1.9059, 1.9547, 2.0645, 1.8454, 2.3495, 2.1760, 1.6519, 2.2523, 1.7107, 1.6785, 1.7139, 1.8385, 2.1520, 2.0950, 1.8574, 2.3896, 1.6690, 2.0383, 1.9894, 2.2780, 1.7684, 2.1185, 2.0297, 2.5288, 2.2403, 1.6480, 1.8194, 2.0575, 2.5127, 1.6746, 1.9638, 2.1281, 2.0968, 1.7241, 2.4189, 2.1549, 1.7591, 2.4786, 1.8156, 1.3942, 1.9756, 1.4748, 2.1908, 2.0018, 1.8684, 1.6394, 1.9295, 1.4370, 1.7273, 2.2399, 2.0990, 1.7621, 1.7942, 2.1615, 1.6663, 1.9226, 1.8396, 1.8824, 1.6676, 2.0731, 1.4465, 1.6465, 2.2730, 1.8508, 2.1281, 1.6965, 2.4391, 1.7290, 1.8250, 1.7288, 1.7604, 2.0489, 2.4153, 1.6052, 1.6317, 1.8018, 2.0647, 2.3494, 1.9919, 2.2512, 2.0220, 1.8290, 2.0579, 2.4108, 1.7589, 1.5026, 1.8525, 1.8613, 2.0747, 1.7281, 1.8444, 1.9024, 2.4096, 1.8306, 2.0843, 1.9405, 2.4079, 2.2132, 1.4493, 1.8530, 1.6349, 1.9266, 2.0568, 1.7611, 1.6154, 1.5631, 1.6015, 2.0486, 2.4964, 1.8546, 1.7976, 1.4138, 1.5991, 1.7433, 2.1848, 1.4221, 2.0033, 1.9374, 1.9253, 2.1332, 1.8231, 1.9697, 2.0620, 1.9741, 2.5541, 2.6509, 2.1615, 2.0289, 2.1459, 1.8646, 1.7043, 1.8692, 1.5597, 2.2077, 2.8638, 1.9965, 2.0204, 2.1908, 1.8921, 1.7716, 2.1989, 1.7686, 1.6098, 1.5303, 1.8417, 2.1179, 2.2899, 2.2626, 1.5434, 1.6742, 2.1583, 2.2369, 1.5362, 1.9906, 2.0196, 2.2205, 1.5500, 2.6614, 2.1048, 1.8359, 2.0411, 1.4007, 1.5714, 2.0685, 1.9433, 2.5379, 1.7484, 2.1197, 1.9943, 2.3502, 2.3161, 1.9086, 1.7459, 1.4083, 2.0388, 2.5926, 1.8773, 1.6555, 2.2551, 1.9301, 1.6423, 1.7354, 1.9691, 2.4096, 2.0908, 1.6444, 2.1852, 2.1923, 1.9521, 1.6228, 2.0045, 2.4918, 1.7887, 1.8506, 1.9815, 1.6732, 1.8736, 1.7027, 1.7499, 2.4690, 2.9358, 1.8761, 2.1628, 2.4238, 1.5970, 1.6524, 1.9364, 2.4153, 1.5936, 1.6946, 1.6627, 1.8309, 1.7541, 2.0327, 2.9468, 2.2666, 1.9795, 1.7268, 1.5384, 1.5987, 2.1566, 1.8204, 2.0604, 1.7196, 2.0839, 1.9742, 1.7966, 2.2761, 2.1787, 1.9138, 2.2136, 2.3590, 1.8080, 2.0527, 2.2234, 1.9729, 1.6683, 1.3299, 2.4234, 1.9430, 1.3475, 2.0817, 2.0289, 2.4188, 1.7683, 1.4310, 1.2811, 1.4340, 1.9693, 1.7348, 1.5543, 2.1340, 2.0927, 1.7327, 2.0202, 2.3273, 2.1478, 1.8292, 1.7708, 1.7020, 1.6419, 2.0505, 2.2336, 1.7795, 1.2667, 2.1862, 2.0901, 2.1146, 1.9244, 1.9967, 2.2597, 2.1005, 1.7221, 1.6436, 2.2730, 1.8039, 1.9252, 2.4124, 1.6902, 1.8495, 1.5720, 1.6972, 1.9888, 2.1762, 1.8712, 1.6090, 1.7289, 1.5551, 2.1808, 2.2498, 1.9139, 1.7972, 1.9532, 1.6070, 1.8809, 1.3127, 2.1138, 1.5387, 1.9240, 1.7951, 2.0430, 1.3985, 2.2620, 1.9002, 1.6003, 1.7341, 1.6530, 2.4133, 1.6740, 2.3087, 1.7999, 1.6998, 1.8481, 1.9380, 2.4633, 1.6078, 1.8748, 1.6139, 2.0747, 2.5565, 1.0517, 1.4477, 2.0156, 1.7482, 1.8025, 1.9521, 2.2128, 1.6753, 1.8873, 2.0213, 1.9043, 1.6699, 2.1391, 2.0408, 2.4632, 1.7313, 1.5317, 1.7621, 1.5558, 1.7027, 2.0415, 1.8368, 1.7150, 2.0680, 2.2894, 1.3407, 2.0299, 1.8765, 1.9286, 1.6912, 1.9355, 1.9448, 1.3746, 2.5361, 1.8688, 2.2599, 2.3537, 2.0286, 1.5693, 1.8781, 1.7133, 2.0078, 1.8128, 1.8599, 2.1750, 1.5655, 2.1851, 1.7670, 1.9780, 2.0260, 2.1161, 1.9340, 2.0055, 1.9987, 1.4523, 1.8399, 1.9042, 2.0416, 2.6132, 2.0532, 1.9674, 2.1443, 1.4835, 1.9679, 1.8306, 2.0973, 1.6714, 2.0982, 1.7306, 1.8335, 1.6147, 1.6743, 1.9576, 2.0567, 1.5448, 1.8459, 1.5982, 2.5026, 1.6302, 1.8186, 1.9122, 1.8442, 1.8759, 1.7062, 2.0954, 1.5867, 2.3544, 1.8405, 1.5427, 1.7632, 1.7150, 1.6451, 1.8507, 2.0604, 2.0886, 1.6112, 2.4531, 1.9222, 1.3759, 2.2420, 1.4897, 2.0689, 1.8654, 1.6968, 1.4768, 1.7027, 2.0942, 2.8258, 1.5035, 2.6182, 2.1375, 1.9919, 1.9979, 2.0994, 1.8962, 2.3700, 2.1927, 2.1283, 2.0888, 2.1579, 1.7686, 1.8158, 1.7907, 1.8647, 1.8854, 1.7085, 1.8728, 2.4168, 1.8312, 2.0251, 2.3059, 1.6641, 2.4086, 2.1914, 1.2343, 2.6879, 2.1672, 2.0825, 2.0832, 2.3604, 1.7793], device=&#39;cuda:0&#39;)), (&#39;1.6.num_batches_tracked&#39;, tensor(408, device=&#39;cuda:0&#39;)), (&#39;1.8.weight&#39;, tensor([[-0.0507, -0.0782, 0.0584, ..., 0.0991, 0.0585, -0.0226], [ 0.0335, -0.0669, 0.1151, ..., -0.0781, -0.0625, -0.0477], [ 0.0109, -0.0751, 0.0257, ..., -0.0730, -0.0624, 0.0418], ..., [-0.0630, 0.1043, 0.0643, ..., -0.0007, -0.0219, 0.0337], [-0.0600, -0.0512, -0.0123, ..., 0.0357, -0.0139, -0.0985], [-0.0211, 0.0579, -0.0671, ..., -0.0338, 0.0258, 0.0737]], device=&#39;cuda:0&#39;))]) . Note: When we do a model.save behind the scenes Fastai is calling upon PyTorch to save this state_dict. Something along the lines of this:torch.save(learn.model.state_dict(), &#39;checkpoint.pkl&#39;) This is what is also happening when we use a pretrained model. We are basically taking the state_dict of a model trained for hours together and using it for our purposes! . Now that our pre-trained model is loaded, lets check where we stand by interpreting and validating our model on the validation set. . . Model Interpretation . interp = ClassificationInterpretation.from_learner(learn) . One way to see how good your model is doing by using the confusion matrix which basically plots the number of correct predictions of the particular class as well which predictions were wrongly classified as the other as a square matrix. . But in this case reading a confusion matrix would actually be pretty confusing since there are 102 different classes. So instead Fastai&#39;s most_confused will be used. This plots just the classes which were most frequently classified wrong which can be considered as a more refined and consise version of the confusion matrix. . interp.most_confused(min_val=2) . [(&#39; sword lily&#39;, &#39; trumpet creeper&#39;, 3), (&#39; carnation&#39;, &#39; sweet william&#39;, 2), (&#39; petunia&#39;, &#39; tree mallow&#39;, 2), (&#39; sword lily&#39;, &#39; sweet pea&#39;, 2), (&#39; watercress&#39;, &#39; peruvian lily&#39;, 2)] . . Model Prediction . Let&#39;s see how our model fares on new images taken from Google. I&#39;m using an image of a sunflower here as sghown below. . flower = PILImage.create(&#39;images/sunflower.jpg&#39;) flower.show() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f2ede450c10&gt; . learn.predict(flower)[0] . &#39; sunflower&#39; . preds,targs = learn.get_preds() . Let&#39;s use the accuracy method in Fastai to check the validation accuracy of the model: . accuracy(preds, targs) . TensorCategory(0.9627) . This is same as using the validate on the learner: . learn.validate() . (#2) [0.13905669748783112,0.9627367258071899] . So that&#39;s our baseline model of an accuracy of 96.2%. Let&#39;s try to improve upon it! . . Presizing and fine_tune . In the previous post, I explain how the images passed to the GPU needs to have the same dimensions so that they can be collated into tensors and effectively transfereend onto to GPU. Thus at the very least doing a Resize operation in the item_tfms when creating the DataBlock is mandatory. . But if you think about it, simply resizing images is not a great idea. This might lead to producing croped off images, or images with empty zones i.e. images that aren&#39;t good. . Also, doing all these transforms on a GPU is an expensive process, so finding an effective way to get this done by composing the augmentations to reduce the number of transforms being done would also be quite helpful . So to get over these issues the Fastai library employs a method called presizingas follows: . We choose an appropriate large enough size based on our dataset to resize to such that there is enough room for further augmentations to be doe without any loss of data. . | All the necessary augmentations are composed and performed together on the GPU and finally resized to our desired size. . Note: In practice, the crop area chosen for the first step is at random for the training set and a center crop is done for the test images. . | Let&#39;s check the size of a couple images in dataset to get an idea of what size to actually resize to in the 1st step: . print(PILImage.create(files[0]).shape) print(PILImage.create(files[10]).shape) print(PILImage.create(files[100]).shape) . (500, 666) (500, 620) (500, 667) . We see that the images are rectangle images with a fixed width of 500 and varying height. We can either work with rectangle images for our model but based on Jeremy&#39;s experimentation, in practice working with square images makes computation faster and produces almost similar results. . So lets choose a size of 460*460 that&#39;s smaller than the original image and gives us enough wiggle room to work with for augmentations. Let&#39;s see how that resize looks like: . Note: By default, Fastai does a random crop when calling the resize function. . img = PILImage.create(files[100]) show_image(img, title=&#39;original image&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f2ec9881110&gt; . _,axs = plt.subplots(1,3,figsize=(12,4)) for ax in axs: rsz = Resize(460, method=ResizeMethod.Crop) show_image(rsz(img), title=&#39;resized image&#39;, ctx=ax); . We then use aug_transforms which is a Fastai utility function to perform a list of transforms efficiently on images. . Here by choosing a size of &#39;224&#39; and min_scale != 1, We are telling Fastai to perform a random resized crop on the images to the final size of 224*224. . Note:: A RandomResizedCrop by default does a random crop of images in the training set and does a center crop of images in the validation set. . # Presizing item_tfms=Resize(460), batch_tfms=aug_transforms(size=224, min_scale=0.75) def get_x(r): return path/r[&#39;name&#39;] def get_y(r): return r[&#39;class&#39;] dblock = DataBlock(blocks=(ImageBlock, CategoryBlock), splitter=RandomSplitter(seed=42), get_x= get_x, get_y= get_y, item_tfms = item_tfms, batch_tfms = batch_tfms) dls = dblock.dataloaders(df) . # Sanity check: Viewing a batch of images dls.show_batch(nrows=1, ncols=3) . learn = cnn_learner(dls, resnet34, metrics=accuracy) learn.fine_tune(3) . epoch train_loss valid_loss accuracy time . 0 | 2.834819 | 0.704838 | 0.820403 | 00:32 | . epoch train_loss valid_loss accuracy time . 0 | 0.703043 | 0.239197 | 0.939524 | 00:29 | . 1 | 0.335513 | 0.150513 | 0.960293 | 00:29 | . 2 | 0.159298 | 0.122102 | 0.971900 | 00:29 | . learn.save(&#39;flowers-presizing&#39;) . We can see that Presizing improved the accuracy of the model by almost 1% (from 96% to 97%), we can see that the validation loss is also reducing and so is the training loss. . In practice, Fastai&#39;s recommendation is to always use presizing as it siginficantly improves model performance as the images obtained by doing all the destructive augmentation steps in a composed and efficient manner leads to better quality images. Additionally, by composing these transforms together there is an additional advantage of the model training faster overall. . . Learning rate finder . We know that choosing a good learning rate for the training process is vital, till now we were using the default learning rate used in Fastai but let&#39;s dig deeper and choose a more suitable one for better training of the model. . By default in Fastai the learning rate when using cnn_learner is set to 10e-3 i.e. 0.001 as shown below in its documentation. . item_tfms=Resize(460), batch_tfms=aug_transforms(size=224, min_scale=0.75) def get_x(r): return path/r[&#39;name&#39;] def get_y(r): return r[&#39;class&#39;] dblock = DataBlock(blocks=(ImageBlock, CategoryBlock), splitter=RandomSplitter(seed=42), get_x= get_x, get_y= get_y, item_tfms = item_tfms, batch_tfms = batch_tfms) dls = dblock.dataloaders(df) . learn = cnn_learner(dls, resnet34, metrics=accuracy) lr_min,lr_steep = learn.lr_find() . print(f&quot;Minimum/10: {lr_min:.2e}, steepest point: {lr_steep:.2e}&quot;) . Minimum/10: 1.20e-02, steepest point: 7.59e-03 . From the above plot we can see that the plot has areas where loss is plateaud at first(i.e. no learning is taking place), then there is a gradual descent where the bulk of learning takes place and finally the loss shoots up and model goues out of wack! . We would like to choose a learning rate somewhere in the region where there&#39;s the gradual descent, not too low where the training process is waning but somewhere in the middle. . In this learning rate plot it appears that a learning rate around 3e-3 would be appropriate, so let&#39;s choose that. . learn = cnn_learner(dls, resnet34, metrics=accuracy) learn.fine_tune(3, base_lr=3e-3) . epoch train_loss valid_loss accuracy time . 0 | 2.415578 | 0.503028 | 0.872327 | 00:26 | . epoch train_loss valid_loss accuracy time . 0 | 0.548592 | 0.269859 | 0.924252 | 00:29 | . 1 | 0.279920 | 0.125399 | 0.968845 | 00:29 | . 2 | 0.116967 | 0.111194 | 0.969456 | 00:29 | . Note: : Everytime you change something in the model and need to retrain you need to reset learner. . To know more about finding a good learning rate, the thought process and code behind the learning rate finder in Fastai, please refer to Sylvain Gugger&#39;s wonderful post on &quot;How Do You Find A Good Learning Rate&quot; . . 1 cycle training . Another novel approach of training brought about easily using Fastai is Leslie Smith&#39;s 1cycle training approach. . In short this method has 2 phases: . warm-up: This is where during the training the learning rate is gradually increased from a the the 10th of the learning rate decided by using the lr_finder to the our chosen one, i.e 3e-3. . | annealing: This is where the learning rate is reduced to gradually again to a much lower point that the original in order to find the best minima to finally land on. . | This method allows us train the major chunk of the model at higher learning rates using the restriction we had already calculated using the lr_finder earlier. This in practice has proven to see that models train much faster and also train better as they generalize better by missing dubious local minimas and thus finding smoother regions in the curve. . learn = cnn_learner(dls, resnet34, metrics=accuracy) learn.fit_one_cycle(3, 3e-3) . epoch train_loss valid_loss accuracy time . 0 | 1.991562 | 0.425063 | 0.882712 | 00:26 | . 1 | 0.632092 | 0.185716 | 0.949297 | 00:26 | . 2 | 0.286753 | 0.159011 | 0.954795 | 00:26 | . learn.unfreeze() . We unfreeze the previous pretrained layers and train them specifically for our task of classifying flowers . learn.lr_find() . SuggestedLRs(lr_min=3.0199516913853586e-06, lr_steep=6.309573450380412e-07) . We can see that this plot is different as we are finding the best minima to land on an already trained model. Let&#39;s choose an LR somewhere in the middle before the loss explodes again! . Something like 1e-5 as the lr_max would do good here in order to avoid the jump later. Let&#39;s train the model for a further 6 epochs. . learn.fit_one_cycle(6, lr_max=1e-5) . epoch train_loss valid_loss accuracy time . 0 | 0.222797 | 0.152495 | 0.961515 | 00:29 | . 1 | 0.204797 | 0.134804 | 0.967624 | 00:29 | . 2 | 0.166391 | 0.127007 | 0.968235 | 00:29 | . 3 | 0.148998 | 0.121040 | 0.968845 | 00:29 | . 4 | 0.141580 | 0.117179 | 0.967624 | 00:29 | . 5 | 0.140350 | 0.116889 | 0.968845 | 00:29 | . In addition to this it also implements the cyclical momentum trick as mentioned by Leslie Smith in his paper. . Side Note: Momentum is a technique where the optimizer takes a step not only in the direction of the gradients, but also continues in the direction of previous steps. This allows the model training to move smoothly considering our previous steps taken and not being solely determined by the gradient of a single batch. Leslie Smith suggests that momentum and learning rate should be inversely proportional in the training process. I.e. when we are at high learning rates, we use less momentum, and we use more again in the annealing phase.training process. By doing so, the learning rate is given higher priority in the tail end of warm up to go in new directions to find the flatter area and then slowly move to the best minima while giving momentum greater priority. In practice Fastai shifts between a max and minimum momentum of 0.85 to 0.95 as mentioned by Leslie during the training. . We can view the learning rates and momentum plots during training as follows: . learn.recorder.plot_sched() . We can clearly see that the plots btween learning rate and momentum are inversely proportional as explained above. . learn.activation_stats.plot_layer_stats(-2) . learn.activation_stats.color_dim(-2) . learn.recorder.plot_loss() . We can see that the training loss and validation loss is stil decreasing and we get an accuacy of about 97%. . &gt; To learn more about the 1cycle training approache refer to Sylvain&#39;s post on it or chapter 13 of the Fastbook. . Discriminative learning rates . In my previous post I explain how every CNN has a &quot;feature extraction&quot; section and &quot;classifier&quot; section and when we use transfer learning we just save the feature extracted part as that&#39;s what we care about and would like to use for our application. . Thus the main idea behind using discriminative learning rates is that, when using pretrained models the features learnt by the model in the early layers are very very useful and thus we wouldn&#39;t want to change it too much. We would like to use the best learning rate for areas further along the layers where there can be a divergence in the features learnt based on your specific classification task and thus we can&#39;t use a single learning rate all over. Thus we use a smaller learning rate for the earliest layers and gradually increase the learning rate as we step through the layers. . Fastai lets you pass a Python slice object anywhere that a learning rate is expected. The first value past will be the learning rate in the earliest layer of the neural network, and the second value will be the learning rate in the final layer. The layers in between will have learning rates that are multiplicatively equidistant throughout that range. Let&#39;s use this approach to replicate the previous training, but this time we&#39;ll only set the lowest layer of our net to a learning rate of 1e-6; the other layers will scale up to 1e-4. Let&#39;s train for a while and see what happens. . learn = cnn_learner(dls, resnet34, metrics=accuracy) learn.fit_one_cycle(3, 3e-3) learn.unfreeze() learn.fit_one_cycle(12, lr_max=slice(1e-6,1e-4)) . epoch train_loss valid_loss accuracy time . 0 | 1.947487 | 0.377575 | 0.901649 | 00:30 | . 1 | 0.642104 | 0.197779 | 0.943189 | 00:30 | . 2 | 0.304672 | 0.171208 | 0.954184 | 00:30 | . epoch train_loss valid_loss accuracy time . 0 | 0.214030 | 0.164023 | 0.954184 | 00:38 | . 1 | 0.210405 | 0.149178 | 0.954795 | 00:38 | . 2 | 0.191148 | 0.134190 | 0.961515 | 00:38 | . 3 | 0.166917 | 0.125935 | 0.965791 | 00:38 | . 4 | 0.127839 | 0.116414 | 0.965180 | 00:38 | . 5 | 0.117447 | 0.107030 | 0.970678 | 00:38 | . 6 | 0.097778 | 0.104400 | 0.970678 | 00:38 | . 7 | 0.090379 | 0.101584 | 0.971900 | 00:38 | . 8 | 0.086792 | 0.101637 | 0.973122 | 00:38 | . 9 | 0.076258 | 0.099114 | 0.973732 | 00:38 | . 10 | 0.083770 | 0.096863 | 0.974954 | 00:38 | . 11 | 0.080138 | 0.099167 | 0.974954 | 00:38 | . learn.recorder.plot_loss() . Inference as taken from Fastbook:&quot;As you can see, the training loss keeps getting better and better. But notice that eventually the validation loss improvement slows, and sometimes even gets worse! This is the point at which the model is starting to over fit. In particular, the model is becoming overconfident of its predictions. But this does not mean that it is getting less accurate, necessarily. Have a look at the table of training results per epoch, and you will often see that the accuracy continues improving, even as the validation loss gets worse. In the end what matters is your accuracy, or more generally your chosen metrics, not the loss. The loss is just the function we&#39;ve given the computer to help us to optimise.&quot; . . Number of epochs of training . Let&#39;s try training the model a little more and see what happens . learn.fit_one_cycle(3, lr_max=slice(1e-6,1e-4)) . epoch train_loss valid_loss accuracy time . 0 | 0.076480 | 0.099132 | 0.972511 | 00:38 | . 1 | 0.071239 | 0.100987 | 0.971289 | 00:38 | . 2 | 0.066199 | 0.099734 | 0.971289 | 00:38 | . learn.recorder.plot_loss() . We can see that the number of epochs of training is quite important as shown in this case. . Training a lot will mean we overfit as shown by the large divergence in the model above. Here training loss is reducing but accuracy on validation set as well as validation loss has increased again. . Note: The most important value we care about is our metric i.e. our accuracy in this case! The validation loss is a created metric in order for the learning process to take place, so even if the validation loss reduced but our main metric i.e. accuracy increases then our training is still on the right track! . So in order to find the ideal number of epochs to train Fastai suggests to employ the fit_one_cycle method, unfreeze and train a set number of epochs till you find that your model metric is still reducing and the training is going on well. The point where you see that metric is going wack and not training properly anymore is where you have gone too far and need to start training again till an epoch or two before! . . Deeper architectures . Till now we have used a resnet34 architecture which suggests that it has 34 layers. . &quot;In general, a bigger model has the ability to better capture the real underlying relationships in your data, and also to capture and memorise the specific details of your individual images.&quot; - Fastbook Chapter 5 . Let&#39;s train a deeper pretrained model in the form of resnet50 . from fastai2.callback.fp16 import * learn = cnn_learner(dls, resnet50, metrics=accuracy).to_fp16() learn.fine_tune(6, freeze_epochs=3) . epoch train_loss valid_loss accuracy time . 0 | 3.017138 | 0.810731 | 0.806964 | 00:36 | . 1 | 1.019446 | 0.325558 | 0.908369 | 00:37 | . 2 | 0.508136 | 0.239720 | 0.937080 | 00:37 | . epoch train_loss valid_loss accuracy time . 0 | 0.231981 | 0.154821 | 0.951130 | 00:47 | . 1 | 0.177857 | 0.141960 | 0.960293 | 00:47 | . 2 | 0.151233 | 0.114160 | 0.967013 | 00:47 | . 3 | 0.077052 | 0.063637 | 0.979230 | 00:48 | . 4 | 0.031044 | 0.055957 | 0.983506 | 00:47 | . 5 | 0.022793 | 0.051753 | 0.984117 | 00:47 | . learn.recorder.plot_loss() . learn.save(&#39;flowers-resnet50&#39;) . learn.load(&#39;flowers-resnet50&#39;) learn.validate() . (#2) [0.051753416657447815,0.9841172695159912] . We can see that a deep resnet 50 architecture surely helps in bringing up the accuracy of the model to just over 98%. . Note: This isn&#39;t always the case and using deeper architectures could lead to worser models.&gt; &quot;bigger models aren&#39;t necessarily better models for your particular case! Make sure you try small models before you start scaling up.&quot; - Fastbook Chapter 5 . We can already see that the validation loss is tailing off in the nd and thus training this model further will not yield any fruits. . Still, let&#39;s train a bit more to see what happens: . learn = cnn_learner(dls, resnet50, metrics=accuracy,).to_fp16() learn.load(&#39;flowers-resnet50&#39;) . &lt;fastai2.learner.Learner at 0x7f696f2b04d0&gt; . learn.validate() . (#2) [0.04890075698494911,0.9865607619285583] . learn.lr_find() . SuggestedLRs(lr_min=9.12010818865383e-08, lr_steep=7.585775847473997e-07) . learn.unfreeze() learn.fit_one_cycle(3, lr_max=slice(5e-6,3e-6)) . epoch train_loss valid_loss accuracy time . 0 | 0.011699 | 0.047581 | 0.986561 | 00:40 | . 1 | 0.012854 | 0.044599 | 0.989615 | 00:41 | . 2 | 0.013657 | 0.044380 | 0.990226 | 00:41 | . After a bit more of training the model reaches the 99% mark all while the training loss and validation loss is still reducing. . Let&#39;s save this as the final model for further use and as our current benhmark model. . learn.save(&#39;flowers-resnet50-best&#39;) . learn.validate() . (#2) [0.04437994956970215,0.9902260303497314] . . Conclusion . In this post, we have successfully seen how to take a baseline model and improve upon it considerably. . We started with a baseline model at 96% accuracy and after employing some Fastai suggested methods we were able to build a model with an accuracy of 99%. All this is acheived by using the inbuilt convenience functions used in Fastai by using transfer learning. . There are definitely a load other tricks that can be done to this model to make it more robust and generalize better like employing tricks like progressive resizing, test time augmentation, mixup, adding regularization like dropout and using weight decay. . I&#39;m currently working on getting a better grasp of all these techniques and will be posting more about them in the upcoming blogs! . . Happy learning! Stay home and stay safe!:) . .",
            "url": "https://harish3110.github.io/through-tinted-lenses/fastai/image%20classification/model%20fine-tuning/2020/04/10/Improving-baseline-model.html",
            "relUrl": "/fastai/image%20classification/model%20fine-tuning/2020/04/10/Improving-baseline-model.html",
            "date": " • Apr 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "A look at Fastai's 'L' data structure",
            "content": ". The actual documentation for L can be found here. . L is defined in fastcore repo and generated from the &#39;01_foundation.ipynb&#39; notebook. . . Importing the libraries needed: . from fastcore.imports import * from fastai2.vision.all import * . . What is the &#39;L&#39; data structure? . In my previous blog I gave a brief intro to L when building an image classifier using Fastai V2 which you can find here . L is a special Fastai datastructure made specifically to handle with ease the model building in the library. Since, it forms the basic foundation to using the library, it&#39;s worth digging deeper into its functionalities. . It&#39;s worth noting that when trying to dig deeper into an aspect of a Python library like L for instance, it&#39;s critical to know the basic concepts of Object Oriented Programming. This is because everything in Python is written as a Class. To get a good understanding of OOPs in Python, you can check out this great free resource here . . Creating an L . Creating an instance &#39;a&#39; of class L from a list or any other normal iterable: . a = L([1, 2, 3]) a . (#3) [1,2,3] . We can use Python&#39;s isinstance method to check if a is an instance of L: . isinstance(a, L) . True . For Creating an &#39;L&#39; from an array or tensor we need to pass use_list=True since it doesn&#39;t iterate over them on construction. . By default we get something like this: . L(array([0.,1.1])) . (#1) [array([0. , 1.1])] . And when using use_list we get: . L(array([0.,1.1]), use_list=True) . (#2) [0.0,1.1] . # To see a realtime example when working with datasets in Fastai path = untar_data(URLs.PETS) Path.BASE_PATH = path files = get_image_files(path) . Here files is an L which can be also be checked by looking at its type as follows: . type(files) . fastcore.foundation.L . Let&#39;s take a look a better look at the class L using the help function: . help(L) . Help on class L in module fastcore.foundation: class L(CollBase) | L(self, items=None, *rest, use_list=False, match=None) | | Behaves like a list of `items` but can also index with list of indices or masks | | Method resolution order: | L | CollBase | builtins.object | | Methods defined here: | | __add__(a, b) | | __addi__(a, b) | | __contains__(self, b) | | __eq__(self, b) | Return self==value. | | __getitem__(self, idx) | Retrieve `idx` (can be list of indices, or mask, or int) items | | __init__(self, items=None, *rest, use_list=False, match=None) | Initialize self. See help(type(self)) for accurate signature. | | __invert__(self) | | __iter__(self) | | __mul__(a, b) | | __radd__(a, b) | | __repr__(self) | Return repr(self). | | __setitem__(self, idx, o) | Set `idx` (can be list of indices, or mask, or int) items to `o` (which is broadcast if not iterable) | | append(self, o) | Passthru to `list` method | | argwhere(self, f, negate=False, **kwargs) | Like `filter`, but return indices for matching items | | attrgot(self, k, default=None) | Create new `L` with attr `k` of all `items` | | cat(self: fastcore.foundation.L, dim=0) | Same as `torch.cat` | | clear(self) | Passthru to `list` method | | concat(self) | Concatenate all elements of list | | copy(self) | Same as `list.copy`, but returns an `L` | | count(self, o) | Passthru to `list` method | | cycle(self) | Same as `itertools.cycle` | | enumerate(self) | Same as `enumerate` | | filter(self, f, negate=False, **kwargs) | Create new `L` filtered by predicate `f`, passing `args` and `kwargs` to `f` | | index(self, value, start=0, stop=9223372036854775807) | Passthru to `list` method | | itemgot(self, *idxs) | Create new `L` with item `idx` of all `items` | | map(self, f, *args, **kwargs) | Create new `L` with `f` applied to all `items`, passing `args` and `kwargs` to `f` | | map_dict(self, f=&lt;function noop at 0xb1f55f488&gt;, *args, **kwargs) | Like `map`, but creates a dict from `items` to function results | | map_zip(self, f, *args, cycled=False, **kwargs) | Combine `zip` and `starmap` | | map_zipwith(self, f, *rest, cycled=False, **kwargs) | Combine `zipwith` and `starmap` | | pop(self, o=-1) | Passthru to `list` method | | product(self) | Product of the items | | reduce(self, f, initial=None) | Wrapper for `functools.reduce` | | remove(self, o) | Passthru to `list` method | | reverse(self) | Passthru to `list` method | | shuffle(self) | Same as `random.shuffle`, but not inplace | | sort(self, key=None, reverse=False) | Passthru to `list` method | | sorted(self, key=None, reverse=False) | New `L` sorted by `key`. If key is str then use `attrgetter`. If key is int then use `itemgetter` | | stack(self: fastcore.foundation.L, dim=0) | Same as `torch.stack` | | starmap(self, f, *args, **kwargs) | Like `map`, but use `itertools.starmap` | | sum(self) | Sum of the items | | tensored(self: fastcore.foundation.L) | `mapped(tensor)` | | unique(self) | Unique items, in stable order | | val2idx(self) | Dict from value to index | | zip(self, cycled=False) | Create new `L` with `zip(*items)` | | zipwith(self, *rest, cycled=False) | Create new `L` with `self` zip with each of `*rest` | | - | Class methods defined here: | | range(a, b=None, step=None) from fastcore.foundation.NewChkMeta | Same as `range`, but returns an `L`. Can pass a collection for `a`, to use `len(a)` | | split(s, sep=None, maxsplit=-1) from fastcore.foundation.NewChkMeta | Same as `str.split`, but returns an `L` | | - | Data and other attributes defined here: | | __hash__ = None | | __signature__ = &lt;Signature (self, items=None, *rest, use_list=False, m... | | - | Methods inherited from CollBase: | | __delitem__(self, i) | | __len__(self) | | - | Data descriptors inherited from CollBase: | | __dict__ | dictionary for instance variables (if defined) | | __weakref__ | list of weak references to the object (if defined) . We can see that L inherits from class CollBase. . . CollBase . We can see that L&#39;s Method resolution order: . L | CollBase | builtins.object | . Fastai source code defines CollBase as a &quot;Base class for composing a list of items&quot; . We can check is issubclass method in Python to check if a particular class is a subclass of another: . issubclass(L, CollBase) . True . When we look at the source code for L again using ?? in Jupyter we can see in the initialization a line: . super().__init__(items) . This indicates that if any items is passed to L, for instance a list, the initialization is handled by CollBase. . Now if you look at the source code of CollBase we can see the same as well as some other methods to deal with the items. . From the source code we can gather that CollBase has a bunch of methods to deal with the items added to it such as it&#39;s creation, the manipulation of the items. . . The methods available in L . Let&#39;s now look at all the methods available in L using the dir method in Python: . dir(L) . [&#39;__add__&#39;, &#39;__addi__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__radd__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__signature__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_default&#39;, &#39;_get&#39;, &#39;_new&#39;, &#39;_xtra&#39;, &#39;append&#39;, &#39;argwhere&#39;, &#39;attrgot&#39;, &#39;cat&#39;, &#39;clear&#39;, &#39;concat&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;cycle&#39;, &#39;enumerate&#39;, &#39;filter&#39;, &#39;index&#39;, &#39;itemgot&#39;, &#39;map&#39;, &#39;map_dict&#39;, &#39;map_zip&#39;, &#39;map_zipwith&#39;, &#39;pop&#39;, &#39;product&#39;, &#39;range&#39;, &#39;reduce&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;shuffle&#39;, &#39;sort&#39;, &#39;sorted&#39;, &#39;split&#39;, &#39;stack&#39;, &#39;starmap&#39;, &#39;sum&#39;, &#39;tensored&#39;, &#39;unique&#39;, &#39;val2idx&#39;, &#39;zip&#39;, &#39;zipwith&#39;] . . We can see that the methods associated with can be clearly distinguished into two parts: . Methods starting and ending with __: These are refered to a dunder or magic methods of a class in Python . | Methods starting with _: These are methods defined specifically in the Fastai library. . | Normal methods: These are the normal methods defined to a class in Python. . | . 1. Special/ dunder/ magic methods . These special methods are used to emulate built-in methods in python that contributes with to ease of usability. . Since everything in Python is basically a class we can use these in-built methods for our own class by implementing something known as &#39;operator overloading&#39; to modify its behaviour as we intend to. . . __getitem__ . We can check how each method works by using the &#39;??&#39; in jupyter notebooks after the method name . Or we can use the help method: . Help on method __getitem__ in module fastcore.foundation: __getitem__(idx) method of fastcore.foundation.L instance Retrieve `idx` (can be list of indices, or mask, or int) items . We can access the index of an L as follows: . a.__getitem__(0) . 1 . Or in the more appealing way by indexing as follows: . a[0] . 1 . In practical terms, in case we want to see one image file path when building a model we can do it as follows: . files[0] . Path(&#39;images/Egyptian_Mau_167.jpg&#39;) . Note:Internally in Python, when we index as iterable like L as hsown aboev, it internally calls the __getitem__ method. . . __setitem__ . Help on method __setitem__ in module fastcore.foundation: __setitem__(idx, o) method of fastcore.foundation.L instance Set `idx` (can be list of indices, or mask, or int) items to `o` (which is broadcast if not iterable) . __setitem__ also takes an index and the value we want to add and we can do it as follows: . a[1] = 0 a . (#3) [1,0,3] . Internally, the above method is doing the same as below: . a.__setitem__(1, 4) a . (#3) [1,4,3] . . __contains__ . Help on method __contains__ in module fastcore.foundation: __contains__(b) method of fastcore.foundation.L instance . a = L([1, 2, 3]); a . (#3) [1,2,3] . We can use __contains__ to check if an element is in L as follows: . 1 in a . True . Internally in Python, this is what is happening: . a.__contains__(1) . True . . __delitem__ . Help on method __delitem__ in module fastcore.foundation: __delitem__(i) method of fastcore.foundation.L instance . a = L([1, 2, 3]) . We can delete items in L as follows: . a.__delitem__(0) a . (#2) [2,3] . Or we can do it as follows: . del(a[0]) a . (#1) [3] . files[0] . Path(&#39;images/Egyptian_Mau_167.jpg&#39;) . . __mul__ . a = L([1, 2, 3]) . a*3 . (#9) [1,2,3,1,2,3,1,2,3] . The above code is same as doing: a.__mul__(3) . Internally in Python this is what is actually being called. . . 2. Fastai specific methods . The available special methods is Fastai&#39;s `L` class are: _default, _get, _new, _xtra . Out of these methods the most interesting method is _new so lets look at that: . _new . Help on function _new in module fastcore.foundation: _new(self, items, *args, **kwargs) . a = L([1, 2, 3]); a . (#3) [1,2,3] . help(a._new) . Help on method _new in module fastcore.foundation: _new(items, *args, **kwargs) method of fastcore.foundation.L instance . The _new creates a new instance of L which requires some items to be passed to it. . a . (#3) [1,2,3] . Using _new to create a soft copy of a . a = L([1, 2, 3]) . b = a._new(a.items) b . (#3) [1,2,3] . id(a), id(b) . (112557760920, 112557761760) . a.append(4) a . (#4) [1,2,3,4] . b . (#4) [1,2,3,4] . Note: The __mul__ function uses _new, it returns:a._new(a.items*b) . . 3. Normal methods . . append . a = L([1, 2, 3]) a.append(4) a . (#4) [1,2,3,4] . . arttrgot . This method can be used to get specific attributes from all items in L . Help on function attrgot in module fastcore.foundation: attrgot(self, k, default=None) Create new `L` with attr `k` of all `items` . attrgot is a simple function that just maps getattr and the attribute you pass to an L. . attrgot is a pretty useful function and here&#39;s a practical example of where you can use it to get the name or stem attribute from paths. . ten_file_names = files[:10].attrgot(&#39;name&#39;) ten_file_names . (#10) [&#39;Egyptian_Mau_167&#39;,&#39;pug_52&#39;,&#39;basset_hound_112&#39;,&#39;Siamese_193&#39;,&#39;shiba_inu_122&#39;,&#39;Siamese_53&#39;,&#39;Birman_167&#39;,&#39;leonberger_6&#39;,&#39;Siamese_47&#39;,&#39;shiba_inu_136&#39;] . The stem attribute calculates the name without the file extensions as well . ten_file_stems = files[:10].attrgot(&#39;stem&#39;) ten_file_stems . (#10) [&#39;Egyptian_Mau_167&#39;,&#39;pug_52&#39;,&#39;basset_hound_112&#39;,&#39;Siamese_193&#39;,&#39;shiba_inu_122&#39;,&#39;Siamese_53&#39;,&#39;Birman_167&#39;,&#39;leonberger_6&#39;,&#39;Siamese_47&#39;,&#39;shiba_inu_136&#39;] . . enumerate . Help on function enumerate in module fastcore.foundation: enumerate(self) Same as `enumerate` . ten_file_names.enumerate() . (#10) [(0, &#39;Egyptian_Mau_167&#39;),(1, &#39;pug_52&#39;),(2, &#39;basset_hound_112&#39;),(3, &#39;Siamese_193&#39;),(4, &#39;shiba_inu_122&#39;),(5, &#39;Siamese_53&#39;),(6, &#39;Birman_167&#39;),(7, &#39;leonberger_6&#39;),(8, &#39;Siamese_47&#39;),(9, &#39;shiba_inu_136&#39;)] . enumerate returns an L where each element is tuple with the index(0th indexing) and the item itself. . We can use it something like this in a loop to build something from it if in case we need the index as well as the item for some manipulations . for i, file in enumerate(ten_file_names): print(i, file) . 0 Egyptian_Mau_167.jpg 1 pug_52.jpg 2 basset_hound_112.jpg 3 Siamese_193.jpg 4 shiba_inu_122.jpg 5 Siamese_53.jpg 6 Birman_167.jpg 7 leonberger_6.jpg 8 Siamese_47.jpg 9 shiba_inu_136.jpg . . filter . Help on function filter in module fastcore.foundation: filter(self, f, negate=False, **kwargs) Create new `L` filtered by predicate `f`, passing `args` and `kwargs` to `f` . filter is used to return items in an L that pass a function. . For instance we can use it to get all the items in files which start with upper case. Based on the PETS dataset, all such names that start with uppercase indicates that its a cat. . ten_file_names.filter(lambda x: x[0].isupper()) . (#5) [&#39;Egyptian_Mau_167.jpg&#39;,&#39;Siamese_193.jpg&#39;,&#39;Siamese_53.jpg&#39;,&#39;Birman_167.jpg&#39;,&#39;Siamese_47.jpg&#39;] . with negate=True we can get the vice-versa, i.e. all the dog image files: . ten_file_names.filter(lambda x: x[0].isupper(), negate=True) . (#5) [&#39;pug_52.jpg&#39;,&#39;basset_hound_112.jpg&#39;,&#39;shiba_inu_122.jpg&#39;,&#39;leonberger_6.jpg&#39;,&#39;shiba_inu_136.jpg&#39;] . . map . Help on function map in module fastcore.foundation: map(self, f, *args, **kwargs) Create new `L` with `f` applied to all `items`, passing `args` and `kwargs` to `f` . map is used to map a function over all elements of L . L.range(4).map(lambda x: x**2) . (#4) [0,1,4,9] . . map_dict . Help on function map_dict in module fastcore.foundation: map_dict(self, f=&lt;function noop at 0xb220cc6a8&gt;, *args, **kwargs) Like `map`, but creates a dict from `items` to function results . map_dict applies a function over &#39;L&#39; to return a dict where the dictionary&#39;s items are the original elements and its values are the modified values after applying the function. . L.range(1, 4).map_dict(lambda x: x**2) . {1: 1, 2: 4, 3: 9} . . zip . Help on function zip in module fastcore.foundation: zip(self, cycled=False) Create new `L` with `zip(*items)` . a = L([1, 2, 3], &#39;abc&#39;) a . (#2) [[1, 2, 3],&#39;abc&#39;] . a.zip() . (#3) [(1, &#39;a&#39;),(2, &#39;b&#39;),(3, &#39;c&#39;)] . . split . L.split(&#39;a/b/c&#39;, sep=&#39;/&#39;) . (#3) [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] . . concat . Help on function concat in module fastcore.foundation: concat(self) Concatenate all elements of list . a = L([1, 2, 3, [&#39;abc&#39;]]) a . (#3) [1,2,[&#39;abc&#39;]] . a.append([&#39;def&#39;]) a . (#4) [1,2,[&#39;abc&#39;],[&#39;def&#39;]] . a.concat() . (#4) [1,2,&#39;abc&#39;,&#39;def&#39;] . b = L([[[1, 2], 3], [4, 5]]) b.concat().concat() . (#5) [1,2,3,4,5] . . Conclusion . The L data structure created in Fastai V2 is extremely useful and has some really power functionality. I am still digging into the depths of Fastai V2 and as I go along with it i&#39;ll try to update this in terms of the practical usability of the methods in its class for building state-of-the-art models using the library. . . Happy learning! Stay home and stay safe :) . .",
            "url": "https://harish3110.github.io/through-tinted-lenses/fastai/data%20structures/2020/04/03/A-look-at-the-L-Data-Structure-in-Fastai.html",
            "relUrl": "/fastai/data%20structures/2020/04/03/A-look-at-the-L-Data-Structure-in-Fastai.html",
            "date": " • Apr 3, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Building an image classifier using Fastai V2",
            "content": ". I would like to start these series of posts with an introduction to the fastai v2 library in the application of vision, which is arguably the most common application in the field, and definitely, the most worked on. . . Importing the library and necessary modules . from data.utils import * from fastai2.vision.all import * %matplotlib inline . Note: The first line imports some helper functions from utils.py as used in the fastbook repo which provides great visualization options. . . About the dataset . Let&#39;s start with the Flowers dataset, which is a common dataset for image classification tasks. The dataset is a collection of images of 102 different types of flowers, which is nicely curated. The images are of fairly reasonable size shot in different angles and lighting conditions. . Here&#39;s a list of the 102 different categories of flowers in this dataset for your reference. . . Getting and exploring the dataset . Now that we have our arsenal set up and have an understanding of the data we are working. Let&#39;s download it and explore it. . About 90% of the work done by data scientist revolves around clearly gathering data. For simplicity, let&#39;s begin with commonly available datasets. . Fastai library makes it extremely easy to get common well-know datasets and is stored in Amazon S3 buckets for fast retrieval and use. They&#39;re all stored in the URLs global constant. . flowers_link = URLs.FLOWERS flowers_link . &#39;https://s3.amazonaws.com/fast-ai-imageclas/oxford-102-flowers.tgz&#39; . path = untar_data(flowers_link) path.ls() . (#4) [Path(&#39;/home/jupyter/.fastai/data/oxford-102-flowers/valid.txt&#39;),Path(&#39;/home/jupyter/.fastai/data/oxford-102-flowers/test.txt&#39;),Path(&#39;/home/jupyter/.fastai/data/oxford-102-flowers/jpg&#39;),Path(&#39;/home/jupyter/.fastai/data/oxford-102-flowers/train.txt&#39;)] . The above response may appear like a datastructure similar to a list in Python, but it&#39;s a built-in fastai data structure called &#39;L.&#39; You can think of it as a data structure, which is an amalgamation of lists and dicts in Python. . The above output begins with a tuple &#39;#4&#39;, which indicates that the path has 4 sub-directories in it and then displays those directories as an array. . To see the directories better, let&#39;s just see the base path of the sub directories instead of the entire path. . Path.BASE_PATH = path path.ls() . (#4) [Path(&#39;valid.txt&#39;),Path(&#39;test.txt&#39;),Path(&#39;jpg&#39;),Path(&#39;train.txt&#39;)] . # !pip install tree !tree -d {path} . /home/jupyter/.fastai/data/oxford-102-flowers └── jpg 1 directory . Now we can clearly see that the directory has one folder and three .txt files: . jpg: A folder containing all the images of the dataset | txt files: 3 text files indicating train, test, and validation. | . Let&#39;s look into the &#39;jpg&#39; folder: . Fastai provides an in-built function, get_image_files to get all image files in a folder as an &#39;L&#39;. . files = get_image_files(path/&#39;jpg&#39;) files . (#8189) [Path(&#39;jpg/image_03449.jpg&#39;),Path(&#39;jpg/image_05274.jpg&#39;),Path(&#39;jpg/image_03731.jpg&#39;),Path(&#39;jpg/image_07311.jpg&#39;),Path(&#39;jpg/image_05189.jpg&#39;),Path(&#39;jpg/image_06695.jpg&#39;),Path(&#39;jpg/image_06706.jpg&#39;),Path(&#39;jpg/image_04746.jpg&#39;),Path(&#39;jpg/image_04017.jpg&#39;),Path(&#39;jpg/image_06632.jpg&#39;)...] . We can see that there are 8189 images in the dataset available to us. Let&#39;s look at one of the images. . img = PILImage.create(files[0]) img.show() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fcf6f598650&gt; . Now let&#39;s look at the .txt files using pandas. Pandas is the go-to method for dealing with a tabular structure in python and is an essential skill for all data scientists using python. . Pandas can read many formats of data such as CSV, Excel, as well as text files very quickly by creating a pandas dataframe for manipulating it accordingly. . train = pd.read_csv(path/&#39;train.txt&#39;, header=None, sep=&#39; &#39;) train.head() #head displays the first 5 rows of the dataframe . 0 1 . 0 jpg/image_03860.jpg | 16 | . 1 jpg/image_06092.jpg | 13 | . 2 jpg/image_02400.jpg | 42 | . 3 jpg/image_02852.jpg | 55 | . 4 jpg/image_07710.jpg | 96 | . We can see that the file contains the image file name and its corresponding labels. So let&#39;s label the columns of the pandas dataframe accordingly. . cols = [&#39;name&#39;, &#39;label&#39;] train.columns = cols train.head() . name label . 0 jpg/image_03860.jpg | 16 | . 1 jpg/image_06092.jpg | 13 | . 2 jpg/image_02400.jpg | 42 | . 3 jpg/image_02852.jpg | 55 | . 4 jpg/image_07710.jpg | 96 | . Now that we have an organized structuring for our training files. Let&#39;s do the same to create a validation and test dataframe. . # validation df valid = pd.read_csv(path/&#39;valid.txt&#39;, sep=&quot; &quot;, names= cols ) # test df test = pd.read_csv(path/&#39;test.txt&#39;, sep=&quot; &quot;, names= cols ) . valid.head() . name label . 0 jpg/image_04467.jpg | 89 | . 1 jpg/image_07129.jpg | 44 | . 2 jpg/image_05166.jpg | 4 | . 3 jpg/image_07002.jpg | 34 | . 4 jpg/image_02007.jpg | 79 | . test.head() . name label . 0 jpg/image_06977.jpg | 34 | . 1 jpg/image_00800.jpg | 80 | . 2 jpg/image_05038.jpg | 58 | . 3 jpg/image_06759.jpg | 0 | . 4 jpg/image_01133.jpg | 45 | . Let&#39;s see the count of images in each one of the train, validation and test datasets. . print(f&quot;The number of images in training set are:{len(train)}&quot;) print(f&quot;The number of images in validation set are:{len(valid)}&quot;) print(f&quot;The number of images in test set are:{len(valid)}&quot;) . The number of images in training set are:1020 The number of images in validation set are:1020 The number of images in test set are:1020 . We can see that we have a total of around 8000 labelled images to build our flower classifier of 102 different clases. Since the data we have ain&#39;t that much let&#39;s utilize all the data available to build our model. To do so let&#39;s first merge the 3 dataframes into one. . df = pd.concat([train, valid, test], axis=0) df.head() . name label . 0 jpg/image_03860.jpg | 16 | . 1 jpg/image_06092.jpg | 13 | . 2 jpg/image_02400.jpg | 42 | . 3 jpg/image_02852.jpg | 55 | . 4 jpg/image_07710.jpg | 96 | . The main dataframe consists of 8189 labeled images. . Let&#39;s now save this dataframe as a CSV file for ease of access later on. . df.to_csv(&#39;data/df.csv&#39;) . By looking at the above dataframe we can see that the images and numerically labelled by the creators of the datset, probably for easier mapping. This would make visualization pretty bad since we won&#39;t what flower we are seeing in the end. So let&#39;s get the mpping of the labels to the numerical assignemnt given here. . If you look at the main source of the dataset, the labels are provided in a .mat file and would be quite cumbersome to fetch. Luckily enough JosephKJ did the labelling and generously made it available for us here. I downloaded the .txt file and will read it using pandas. . labels = pd.read_csv(&#39;data/labels.txt&#39;, header=None, names = [&#39;labels&#39;]) labels[&#39;labels&#39;] = labels[&#39;labels&#39;].apply(lambda x: x.replace(&quot;&#39;&quot;, &quot;&quot;)) labels.head() . labels . 0 pink primrose | . 1 hard-leaved pocket orchid | . 2 canterbury bells | . 3 sweet pea | . 4 english marigold | . Now creating labels dictionary where key is the number and value is the respective name of the flower. . labels_dict = dict(zip(list(range(len(labels))), labels[&#39;labels&#39;])) . Let&#39;s use the all powerful pandas apply function again to map the numerical labels in df with the labels_dict . # Creating a new column &#39;class&#39; using the existing label of images df[&#39;class&#39;] = df[&#39;label&#39;].apply(lambda x: labels_dict[x]) df.head() . name label class . 0 jpg/image_03860.jpg | 16 | purple coneflower | . 1 jpg/image_06092.jpg | 13 | spear thistle | . 2 jpg/image_02400.jpg | 42 | sword lily | . 3 jpg/image_02852.jpg | 55 | bishop of llandaff | . 4 jpg/image_07710.jpg | 96 | mallow | . Now that we have arranged our data exactly as we want it, let&#39;s move ahead to model building using fastai library. . . The DataBlock API . We have our data structured well and exactly as we want. It&#39;s now time to feed it into the fastai library. This can be done using the DataBlocks API. . The DataBlocks API is the Fastai solution to simplifying the most time-consuming task in a data science pipeline, Data Preparation. It&#39;s easy to use, highly hackable and can be be used for a wide variety of data on applications such as vision, tabular, and text. . This DataBlock API is a much-needed addition to the fastai v2, which makes it super easy to load in data as needed for deep learning models. . def get_x(r): return path/r[&#39;name&#39;] def get_y(r): return r[&#39;class&#39;] dblock = DataBlock(blocks=(ImageBlock, CategoryBlock), splitter=RandomSplitter(seed=42), get_x= get_x, get_y= get_y, item_tfms = Resize(224)) dls = dblock.dataloaders(df) . Let&#39;s get a basic understanding of what&#39;s happening in the above code. Creating data which can be fed to a model requires two steps: . 1. Create a DataBlock: . A Datablock can be considered as a series of sequential functions all collated into one function. For people who have used sci-kit-learn, this can be considered similar to a pipeline. . The DataBlock API requires some methods to get the input data in the desired format for model building and training: . blocks: This is used to define the input and output of the model. In the above code, the type of input i.e. the independent variable, which are images and hence ImageBlock. The output, i.e., dependant variable, are categories of flowers and hence CategoryBlock. . | splitter: Splitters are used to divide our data into training and validation. This is of utmost importance because we don&#39;t want our model to train and memorize all the training images. We want a subset of images to validate how good our model is doing. In this case, we use a method that randomly splits data in train and validation. . | getters: Getters are used to get the independent and dependant variables in the right order. The two getters used are get_x and get_y. Here we defined get_x by grabbing the name of the image file from df and adding the path to it, and we set get_y by getting the class column from df. . | transforms: Transforms are used to perform data augmentation techniques on our input data either on the entire data(item_tfms) on the CPU or on the data passed as batches(batch_tfms) when passing it through the architecture on the GPU. In this case, we are just resizing all images to 224, which is mandatory as deep learning models need all our training images to be of the same size. . | . 2. Call the dataloaders method on your data: . A dataloaders is a method called on the DataBlock where we pass in our dataframe df to perform all the steps mentioned in the DataBlock, which finally returns the data in the required format for modeling. . . Visualizing the data . Now that we have made our data ready and in the format to be ingested by the fastai library, let&#39;s visualize our data. . We can use show_batch method from our dataloader created to visualize a batch of images and their labels. . dls.show_batch() . . Building the model . Let&#39;s build a deep learning model on our dataset using a Convolutional Neural Netwok(CNN) model. . Basic understanding of CNN&#39;s . Here&#39;s the general architecture of every CNN model . . Every CNN architecture consists of 4 parts: . Input layer: The input i.e. the image dataset with &#39;n&#39; classes which are correctly labeled on which our image classification model is built on. . | Feature extraction: This is the crux of the CNN model. It learns various features of the classes in your data and how to distinguish between them during the training process. For instance, during the training process, if images of dogs are passed in, the initial layers learn simple features such as lines, edges, circles. Still, as we move to later layers of the model, the model learns complex features like ears, nose, and eyes of the dog. In machine language, all these features are represented numerically, and we refer to all these learned features as parameters of the model. . | Classification: This part of the model is used to pool in the different features learned and associate it with the corresponding class. Continuing the example of our dog, it could mean that we pool in the features learned about the dog, such as its nose, eyes, tail, etc. and associate it with the output label, which is a dog. . | Output: This is the part that associates an input image to class as labeled in our training set. When a new image of a dog is sent through a trained model, the output class of the model will get activated and indicate that the input image is that of a dog. . | . The entire structure of the model built above is referred to as a model architecture in deep learning. . Now, we can build flower classifier from scratch, but since we only have 8000 odd images for 102 different classes. We can safely say that we don&#39;t have enough data to build a beautiful model from scratch. . Instead, let&#39;s use the biggest weapon in the deep learning arsenal available at our disposal, Transfer Learning. . . Transfer Learning . Transfer Learning is a method that uses the work done by other researchers who spend days on end to build appropriate architectures which train on large datasets for specific tasks. For instance, the ImageNet dataset, which consists of 1.3 million images of various sizes around 500 pixels across in 1000 categories, takes a few days to train. . The main idea is as follows, the ImageNet dataset has 1000 different everyday categories, and the parameters and features it learns for each one of the categories can be applied to make the building blocks of the flowers dataset we are working on. The initial feature extraction layers that learn simple features line lines, edges, circles, etc. can be applied to flowers as well, and we can fine-tune the final layers to distinguish between the different classes of flowers. . The final output layer(which is trained on 1000 categories) also needs to be removed and replaced with the 102 different classes of flowers. . . Defining the learner . In fastai, to build a model, we use the cnn_learner class. We need to pass in the following details to the cnn_learner to train the model: . Dataloaders object: The dls dataloader we created according to how fastai needs the input data. | Model Architecture: This is the architecture we would like to use. Since we are making use of transfer learning, we&#39;ll use a pretrained model, in this case, the famous resnet34 architecture. | Metrics: This is how you would like to keep track of your training progress. In this case, we&#39;ll use accuracy, which indicates how well our model classifies all the classes in our data overall. | . learn = cnn_learner(dls, resnet34, metrics=accuracy) . Let&#39;s visualize the model architecture used i.e the resnet34 architecture . learn.summary() . Sequential (Input shape: [&#39;64 x 3 x 224 x 224&#39;]) ================================================================ Layer (type) Output Shape Param # Trainable ================================================================ Conv2d 64 x 64 x 112 x 112 9,408 False ________________________________________________________________ BatchNorm2d 64 x 64 x 112 x 112 128 True ________________________________________________________________ ReLU 64 x 64 x 112 x 112 0 False ________________________________________________________________ MaxPool2d 64 x 64 x 56 x 56 0 False ________________________________________________________________ Conv2d 64 x 64 x 56 x 56 36,864 False ________________________________________________________________ BatchNorm2d 64 x 64 x 56 x 56 128 True ________________________________________________________________ ReLU 64 x 64 x 56 x 56 0 False ________________________________________________________________ Conv2d 64 x 64 x 56 x 56 36,864 False ________________________________________________________________ BatchNorm2d 64 x 64 x 56 x 56 128 True ________________________________________________________________ Conv2d 64 x 64 x 56 x 56 36,864 False ________________________________________________________________ BatchNorm2d 64 x 64 x 56 x 56 128 True ________________________________________________________________ ReLU 64 x 64 x 56 x 56 0 False ________________________________________________________________ Conv2d 64 x 64 x 56 x 56 36,864 False ________________________________________________________________ BatchNorm2d 64 x 64 x 56 x 56 128 True ________________________________________________________________ Conv2d 64 x 64 x 56 x 56 36,864 False ________________________________________________________________ BatchNorm2d 64 x 64 x 56 x 56 128 True ________________________________________________________________ ReLU 64 x 64 x 56 x 56 0 False ________________________________________________________________ Conv2d 64 x 64 x 56 x 56 36,864 False ________________________________________________________________ BatchNorm2d 64 x 64 x 56 x 56 128 True ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 73,728 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ ReLU 64 x 128 x 28 x 28 0 False ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 147,456 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 8,192 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 147,456 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ ReLU 64 x 128 x 28 x 28 0 False ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 147,456 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 147,456 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ ReLU 64 x 128 x 28 x 28 0 False ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 147,456 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 147,456 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ ReLU 64 x 128 x 28 x 28 0 False ________________________________________________________________ Conv2d 64 x 128 x 28 x 28 147,456 False ________________________________________________________________ BatchNorm2d 64 x 128 x 28 x 28 256 True ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 294,912 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ ReLU 64 x 256 x 14 x 14 0 False ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 32,768 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ ReLU 64 x 256 x 14 x 14 0 False ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ ReLU 64 x 256 x 14 x 14 0 False ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ ReLU 64 x 256 x 14 x 14 0 False ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ ReLU 64 x 256 x 14 x 14 0 False ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ ReLU 64 x 256 x 14 x 14 0 False ________________________________________________________________ Conv2d 64 x 256 x 14 x 14 589,824 False ________________________________________________________________ BatchNorm2d 64 x 256 x 14 x 14 512 True ________________________________________________________________ Conv2d 64 x 512 x 7 x 7 1,179,648 False ________________________________________________________________ BatchNorm2d 64 x 512 x 7 x 7 1,024 True ________________________________________________________________ ReLU 64 x 512 x 7 x 7 0 False ________________________________________________________________ Conv2d 64 x 512 x 7 x 7 2,359,296 False ________________________________________________________________ BatchNorm2d 64 x 512 x 7 x 7 1,024 True ________________________________________________________________ Conv2d 64 x 512 x 7 x 7 131,072 False ________________________________________________________________ BatchNorm2d 64 x 512 x 7 x 7 1,024 True ________________________________________________________________ Conv2d 64 x 512 x 7 x 7 2,359,296 False ________________________________________________________________ BatchNorm2d 64 x 512 x 7 x 7 1,024 True ________________________________________________________________ ReLU 64 x 512 x 7 x 7 0 False ________________________________________________________________ Conv2d 64 x 512 x 7 x 7 2,359,296 False ________________________________________________________________ BatchNorm2d 64 x 512 x 7 x 7 1,024 True ________________________________________________________________ Conv2d 64 x 512 x 7 x 7 2,359,296 False ________________________________________________________________ BatchNorm2d 64 x 512 x 7 x 7 1,024 True ________________________________________________________________ ReLU 64 x 512 x 7 x 7 0 False ________________________________________________________________ Conv2d 64 x 512 x 7 x 7 2,359,296 False ________________________________________________________________ BatchNorm2d 64 x 512 x 7 x 7 1,024 True ________________________________________________________________ AdaptiveAvgPool2d 64 x 512 x 1 x 1 0 False ________________________________________________________________ AdaptiveMaxPool2d 64 x 512 x 1 x 1 0 False ________________________________________________________________ Flatten 64 x 1024 0 False ________________________________________________________________ BatchNorm1d 64 x 1024 2,048 True ________________________________________________________________ Dropout 64 x 1024 0 False ________________________________________________________________ Linear 64 x 512 524,288 True ________________________________________________________________ ReLU 64 x 512 0 False ________________________________________________________________ BatchNorm1d 64 x 512 1,024 True ________________________________________________________________ Dropout 64 x 512 0 False ________________________________________________________________ Linear 64 x 102 52,224 True ________________________________________________________________ Total params: 21,864,256 Total trainable params: 596,608 Total non-trainable params: 21,267,648 Optimizer used: &lt;function Adam at 0x7fd0087225f0&gt; Loss function: FlattenedLoss of CrossEntropyLoss() Model frozen up to parameter group number 2 Callbacks: - TrainEvalCallback - Recorder - ProgressCallback . If you scroll down and read the summary, in the end, you can see that there are a total of around 21 million parameters, but only around 600k parameters are trainable. . This is because we have inherited a model trained extensively on the ImageNet dataset and are using the parameters learned by that model to train our model on 102 classes of flowers. . This means that the parameters learned early on in the model to distinguish various objects are kept as is, and the final layers are replaced to classify. . Fine-tuning pretrained model . Once we have created our learner based on a pretrained resnet34 model, let&#39;s train our learner on classifying the flowers. In fastai there&#39;s a learner method specifically to train a pretrained model called fine_tune quickly. . fine_tune by default trains the head, i.e. the additional part to the model we added for our classification of 102 flowers for one epoch and then unfreezes the all the weights and optimizes the entire model including the weights in the starting phase. . So in the first epoch, the model learns the 600k trainable parameters such that all 21 million parameters are trained roughly. In the consecutive 2 epochs, it optimizes the all these weights specifically for the task in hand, i.e. classifying 102 types of flowers. . learn.fine_tune(3) . epoch train_loss valid_loss accuracy time . 0 | 2.779661 | 0.685666 | 0.831399 | 00:24 | . epoch train_loss valid_loss accuracy time . 0 | 0.625886 | 0.277132 | 0.927306 | 00:32 | . 1 | 0.256375 | 0.147598 | 0.959071 | 00:32 | . 2 | 0.100605 | 0.139057 | 0.962737 | 00:32 | . We can see that by using the power of transfer learning, in 2 lines of code and 3 steps of training(epochs) which took about 30 seconds to train on small GPU we are able to build a flowers classifier which can classify between 102 types of flowers with greater than 96% accuracy! . This blows the original paper out of the water which came out in 2008 which used a non-DL approach to tackle this problem and received an accuracy of about 72.8% . . But this isn&#39;t really a fair comparison, so if we compare our basic model the current leaderboard for the flowers-102 dataset, we can see that the best accuracy on the entire dataset is about 99.7%. . So, this is a good starting point. This will act as our baseline model for future improvements and experimentation in order to come closer to the current benchmark. . So let&#39;s save this model so that we can build on from here form next time. . learn.save(&#39;flowers-baseline&#39;) . We&#39;ll slowly build upon this and make this model better while learning more about building state-of-the-art models in the upcoming posts. . Update: The upcoming post to this can be found here where I employ Fastai techniques with an aim to build a SOTA model. . . Learning resources . Corey Schafer&#39;s Python Tutorials | Corey Schafer&#39;s Pandas Tutorials | Fastai v2 Documentation . | Fastbook i.e Deep Learning for Coders with Fastai and Pytorch: AI Applications Without a PhD by Jeremy Howard and Sylvain Gugger . | Fastai DataBlock API walkthrough blog by Zach Mueller . | . Happy learning, stay at home and stay safe! :) . .",
            "url": "https://harish3110.github.io/through-tinted-lenses/fastai/image%20classification/2020/03/29/Building-an-image-classifier-using-Fastai-V2.html",
            "relUrl": "/fastai/image%20classification/2020/03/29/Building-an-image-classifier-using-Fastai-V2.html",
            "date": " • Mar 29, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Relearning how to learn, deep.",
            "content": "“The illiterate of the 21st century will not be those who cannot read and write, but those who cannot learn, unlearn, and relearn. ” ― Alvin Toffler — . Fact: Deep learning is hard! . I have a background in Electronics Engineering and having studied in the sub-continent, the amount of exposure I have had with programming was virtually non-existent. Since graduating, I have slowly transitioned my way into the field of data science and machine learning. I had to start from scratch and build block after block all the necessary skills needed to call myself a capable data scientist, and successfully land myself a job in the field. . Whenever I meet anyone from a non-ML background and tell them I’m a data scientist, their response is almost always the same. They nod in appreciation and say something like, “That’s the future!” and that “I’m on the right path!”. They then begin asking questions about the areas like self-driving cars and other popular fields and finally land on to the million-dollar question. “Is it difficult to become a machine learning/deep learning engineer?”. To this, I always find myself lying by spouting out of phrases like “it’s easy” and “anyone can do it”! Whereas the fact of the matter is that despite there being some credibility to the statement, the learning curve isn’t that easy. . Being a self-learner, I learned how to code in Python, understood the fundamental concepts of data science and machine learning by following an array of popular MOOCs such as Coursera, Udacity, etc. as well as completed certifications from reputed colleges in India. It has been an incredible journey of learning, but it has definitely not been a cakewalk! There is always a huge learning curve, and even after you complete a course or certification, there’s still that void of not having built anything meaningful. Every one of the courses makes a point of conveying the theory and underlying maths well but almost always fail at delivering to students the necessary tools to go ahead and build something practical. There’s always the next step(s) that needs to be taken to actually implement the knowledge learned in the course. Being able to understand the theory and math from ground up was satisfying to begin with but as you dig deeper, without being able to rapidly prototype and experiment with the concepts takes a toll on the learning process! . . Enter Fastai . I first heard about Fastai and Jeremy Howard from my friends around version 1 of the course. I pushed it aside as one of the many courses suggested by people in the field due to their inherent allegiance to it having taken it. But over time, on Twitter, LinkedIn, and other sources, it had reached a point that I couldn’t not take a look at the course. So I finally succumbed to the pressure and started last year’s course. . . In less than two weeks, I binged watch through the entire part 1! The course was nothing like I had taken before. All the concepts explained intuitively and efficiently, and more importantly, everything taught was visualised through code and by building state-of-the-art models. I fell in love with the teaching methodology and with the community it had garnered. I couldn’t but feel envious of the new students taking up the course to learn deep learning as I was comparing it to myself starting out in ML a year ago and how a course like this would have been extremely helpful to my past self. . . Fact: Deep learning is hard . Fact: Deep learning is easy if done right! . “There are Two Core Abilities for Thriving in the New Economy : . The ability to quickly master hard things. | The ability to produce at an elite level, in terms of both quality and speed.” ― Cal Newport | The main idea of the course and the library is to democratise this powerful tool of ‘Deep Learning’, in a way that it can be easily harnessed by people across all domains such that one can apply the principles easily in their domain. . The course challenges the usual way of learning by following a top-down approach to understanding deep learning. In comparison to every other DL course under the sun, this course makes the field easy to approach, and most importantly, it helps implement the models very quickly. Students taking the class learn to apply all the theoretical concepts learned immediately with concrete examples rather than learn mathematical proofs. In a rapidly evolving field such as this, being able to learn and rapidly prototype simultaneously is invaluable! . Everything taught in this year’s course is again application-driven and closely follows the book written by the founders of Fastai - Jeremy, and Sylvain. The only prerequisites needed to start with the course are high school math and intermediate coding skills in Python, which, to be honest, can be picked up along the way(I will be sure to put up references for all in the end). This doesn’t mean that the course is geared only for beginners. On the contrary, even veterans in the field will have a lot to discover and learn in the course. The course gradually wades through the ingenious implementations, tricks, and insights gained through experimentation by the Fastai team, which has led them to achieve state-of-the-art benchmark models by beating top companies with considerably limited compute resources as compared to big guns in the field. . The lectures taught by Jeremy, the book as a manual to wade through the ‘frightening’ depths of deep learning, the fantastic community of like-minded and extremely helpful peers, is a complete package and the perfect recipe to learn. . “What I hope is that lots of people will realise that state-of-the-art results of deep learning are something they can achieve even if they’re not a Stanford University deep learning PhD.” — Jeremy Howard . . My blog post series . There’s definitely a self-centred motivation to write these blog posts. Following the advice by Rachel Thomas(co-founder of fast.ai) in her blog post, she encourages anyone on a learning path to put out blog posts in order to maximise your learning. . But aside from the learning advantages, I would like to do my best in helping guide people entering this field on how best to navigate the myriad resources in the field and hopefully impart some of the knowledge learned along my journey until now. . Being quarantined, I find this time to be the best opportunity to start my blog by delving into depths of this fantastic deep-learning library! . The course is currently private but will be made public and free for all like all courses by fast.ai. Until then, and hopefully, even then, I hope I can help wade students through the mazes of Deep Learning, Fast.ai style! So let’s get into it! . In my upcoming blog post, I will provide an introduction to the Fastai v2 library and build an image classifier on a well-known dataset. . “Education is the kindling of a flame, not the filling of a vessel.” ― Socrates . . Happy learning, stay at home and stay safe! :) .",
            "url": "https://harish3110.github.io/through-tinted-lenses/fastai/deep%20learning/2020/03/28/Relearning-how-to-learn-deep.html",
            "relUrl": "/fastai/deep%20learning/2020/03/28/Relearning-how-to-learn-deep.html",
            "date": " • Mar 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Hi there, Harish here! . I am a data science and ML enthusiast trying to do my bit in the field. Apart from this I am a technology evangelist, a bibliophile, and a deranged Liverpool fan! :) . If you would like to provide some feedbac/suggestions on the content I post you can reach me out on my twitter handle. .",
          "url": "https://harish3110.github.io/through-tinted-lenses/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}